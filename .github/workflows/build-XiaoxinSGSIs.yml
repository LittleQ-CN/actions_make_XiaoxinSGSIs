name: Build_XiaoxinSGSIs_For_A10_AB_old

on:
  watch:
    types: [started]  # 当有人star仓库时触发工作流

env:
  BUILD_TIME: ${{ format('{0}{1}{2}-{3}{4}{5}', 
                          format(utcnow(), 'yyyy'), 
                          format(utcnow(), 'MM'), 
                          format(utcnow(), 'dd'),
                          format(utcnow(), 'HH'),
                          format(utcnow(), 'mm'),
                          format(utcnow(), 'ss')) }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: '📥 检出仓库'
      uses: actions/checkout@v4
    
    - name: "📝 读取配置文件"
      id: var
      run: |
        echo "::group::📝 加载sgsi.json配置"
        # 确保配置文件存在
        if [ ! -f "sgsi.json" ]; then
          echo "::error::❌ sgsi.json配置文件不存在"
          exit 1
        fi
        
        # 安装jq工具
        sudo apt-get install -y jq
        
        # 读取JSON配置
        rom_url=$(jq -r '.rom_url' sgsi.json)
        rom_name=$(jq -r '.rom_name' sgsi.json)
        pack_sgsi=$(jq -r '.pack_sgsi' sgsi.json)
        make_miui=$(jq -r '.make_miui' sgsi.json)
        make_flyme=$(jq -r '.make_flyme' sgsi.json)
        make_coloros=$(jq -r '.make_coloros' sgsi.json)
        make_h2os=$(jq -r '.make_h2os' sgsi.json)
        make_smartisanos=$(jq -r '.make_smartisanos' sgsi.json)
        make_zui=$(jq -r '.make_zui' sgsi.json)
        make_super=$(jq -r '.make_super' sgsi.json)
        
        # 设置环境变量
        echo "rom_url=$rom_url" >> $GITHUB_ENV
        echo "rom_name=$rom_name" >> $GITHUB_ENV
        echo "pack_sgsi=$pack_sgsi" >> $GITHUB_ENV
        echo "make_miui=$make_miui" >> $GITHUB_ENV
        echo "make_flyme=$make_flyme" >> $GITHUB_ENV
        echo "make_coloros=$make_coloros" >> $GITHUB_ENV
        echo "make_h2os=$make_h2os" >> $GITHUB_ENV
        echo "make_smartisanos=$make_smartisanos" >> $GITHUB_ENV
        echo "make_zui=$make_zui" >> $GITHUB_ENV
        echo "make_super=$make_super" >> $GITHUB_ENV
        
        # 打印配置信息
        echo "✅ 配置文件加载成功:"
        jq . sgsi.json
        echo "::endgroup::"
    
    - name: '🔍 检查配置参数'
      run: |
        echo "::group::📋 配置信息"
        echo "ROM URL: ${{ env.rom_url }}"
        echo "ROM名称: ${{ env.rom_name }}"
        echo "打包SGSI: ${{ env.pack_sgsi }}"
        echo "构建MIUI: ${{ env.make_miui }}"
        echo "构建Flyme: ${{ env.make_flyme }}"
        echo "构建ColorOS: ${{ env.make_coloros }}"
        echo "构建HydrogenOS: ${{ env.make_h2os }}"
        echo "构建SmartisanOS: ${{ env.make_smartisanos }}"
        echo "构建ZUI: ${{ env.make_zui }}"
        echo "构建Super分区: ${{ env.make_super }}"
        echo "构建时间: ${{ env.BUILD_TIME }}"
        echo "::endgroup::"
    
    - name: '⬇️ 下载ROM'
      run: |
        echo "::group::⬇️ 下载ROM"
        wget --show-progress -O rom.zip "${{ env.rom_url }}"
        echo "::endgroup::"
    
    - name: '📦 解压ROM'
      run: |
        echo "::group::📦 解压ROM"
        unzip -q rom.zip -d out/
        echo "::endgroup::"
    
    - name: '⚙️ 处理镜像'
      run: |
        echo "::group::⚙️ 处理镜像"
        # 这里添加实际的镜像处理逻辑
        echo "1. 提取system.img文件"
        echo "2. 删除不必要的应用和文件"
        echo "3. 修改build.prop属性"
        echo "处理镜像完成"
        echo "::endgroup::"

    - name: "📋 提取系统信息"
      run: |
        echo "::group::📋 提取系统信息"
        # 设置时区为上海（北京时间）
        export TZ=Asia/Shanghai
        
        if [ -d "out/system" ]; then
          # 尝试查找build.prop文件
          build_prop_path=$(find out/system -name "build.prop" -print -quit 2>/dev/null)
          
          if [ -n "$build_prop_path" ]; then
            echo "✅ 找到build.prop文件: $build_prop_path"
            
            # 提取关键系统信息
            android_version=$(grep -m1 "ro.build.version.release" "$build_prop_path" | cut -d= -f2)
            build_date=$(grep -m1 "ro.build.date" "$build_prop_path" | cut -d= -f2)
            security_patch=$(grep -m1 "ro.build.version.security_patch" "$build_prop_path" | cut -d= -f2)
            build_id=$(grep -m1 "ro.build.id" "$build_prop_path" | cut -d= -f2)
            
            # 获取原始日期的时区
            original_tz=$(echo "$build_date" | grep -oE '[A-Z]{3,4}')
            [ -z "$original_t极速版z" ] && original_tz="UTC"  # 默认时区
            
            # 尝试转换为中文格式（12小时制）
            build_date_zh=$(date -d "$build_date" +"%Y年%m月%d日 %I:%M:%S %p" 2>/dev/null)
            
            # 如果转换失败（可能是不支持的时区），使用原始日期
            if [ -z "$build_date_zh" ]; then
              build_date_zh="$build_date"
            fi
            
            # 计算时差（如果时区不同）
            time_diff=""
            if [[ "$original_tz" != "CST" ]]; then  # 只在不同时区时计算
              # 获取源时区与CST的时差
              source_epoch=$(TZ=$original_tz date -d "$build_date" +%s 2>/dev/null)
              cst_epoch=$(TZ=Asia/Shanghai date -d "$build_date" +%s 2>/dev/null)
              
              if [ -n "$source_epoch" ] && [ -n "$cst_epoch" ]; then
                diff_seconds=$((cst_epoch - source_epoch))
                abs_seconds=${diff_seconds#-}  # 取绝对值
                
                # 计算天数和小时数
                days=$((abs_seconds / 86400))
                hours=$(((abs_seconds % 86400) / 3600))
                minutes=$(((abs_seconds % 3600) / 60))
                
                # 生成时差描述
                if [ $days -gt 0 ] || [ $hours -gt 0 ] || [ $minutes -gt 0 ]; then
                  # 判断方向
                  if [ $diff_seconds -gt 0 ]; then
                    direction="比北京时间早"
                  else
                    direction="比北京时间晚"
                  fi
                  
                  # 小差异显示（小于12小时且没有天数差）
                  if [ $days -eq 0 ] && [ $hours -lt 12 ]; then
                    if [ $hours -gt 0 ]; then
                      time_diff="仅差${hours}小时"
                    elif [ $minutes -gt 0 ]; then
                      time_diff="仅差${minutes}分钟"
                    fi
                  else
                    # 大差异显示
                    time_diff="${direction}"
                    if [ $days -gt 0 ]; then
                      time_diff="${time_diff}${days}天"
                    fi
                    if [ $hours -gt 0 ]; then
                      time_diff="${time_diff}${hours}小时"
                    fi
                  fi
                else
                  time_diff=""  # 无差异不显示
                fi
              else
                time_diff="时区差异未知"
              fi
            fi
            
            # 获取当前时间作为打包日期
            pack_date=$(date +"%Y年%m月%d日 %I:%M:%S %p")
            echo "PACK_DATE=$pack_date" >> $GITHUB_ENV
            
            # 根据系统类型提取特定信息
            if [ "${{ env.make_miui }}" = "true" ]; then
              miui_version=$(grep -m1 "ro.miui.ui.version.name" "$build_prop_path" | cut -d= -f2)
              echo "MIUI_VERSION=$miui_version" >> $GITHUB_ENV
              # 组合MIUI版本和构建ID
              echo "VERSION_IDENTIFIER=${miui_version}_${build_id}" >> $GITHUB_ENV
            elif [ "${{ env.make_flyme }}" = "true" ]; then
              flyme_version=$(grep -m1 "ro.build.display.id" "$build_prop_path" | cut -d= -f2 | sed 's/Flyme //')
              echo "FLYME_VERSION=$flyme_version" >> $GITHUB_ENV
              echo "VERSION_IDENTIFIER=${flyme_version}_${build_id}" >> $GITHUB_ENV
            elif [ "${{ env.make_coloros }}" = "true" ]; then
              coloros_version=$(grep -m1 "ro.rom.version" "$build_prop_path" | cut -d= -f2)
              echo "COLOROS_VERSION=$coloros_version" >> $GITHUB_ENV
              echo "VERSION_IDENTIFIER=${coloros_version}_${build_id}" >> $GITHUB_ENV
            elif [ "${{ env.make_h2os }}" = "true" ]; then
              coloros_version=$(grep -m1 "ro.rom.version" "$build_prop_path" | cut -d= -f2)
              echo "COLOROS_VERSION=$coloros_version" >> $GITHUB_ENV
              echo "VERSION_IDENTIFIER=${coloros_version}_${build_id}" >> $GITHUB_ENV
            elif [ "${{ env.make_smartisanos }}" = "true" ]; then
              smartisan_version=$(grep -m1 "ro.smartisan.version" "$build_prop_path" | cut -d= -f2)
              echo "SMARTISAN_VERSION=$smartisan_version" >> $GITHUB_ENV
              echo "VERSION_IDENTIFIER=${smartisan_version}_${build_id}" >> $GITHUB_ENV
            elif [ "${{ env.make_zui }}" = "true" ]; then
              zui_version=$(grep -m1 "ro.zui.version" "$build_prop_path" | cut -d= -f2)
              echo "ZUI_VERSION=$zui_version" >> $GITHUB_ENV
              echo "VERSION_IDENTIFIER=${zui_version}_${build_id}" >> $GITHUB_ENV
            else
              # 如果没有厂商版本，则只使用构建ID
              echo "VERSION_IDENTIFIER=${build_id}" >> $GITHUB_ENV
            fi
            
            # 保存到环境变量
            echo "ANDROID_VERSION=$android_version" >> $GITHUB_ENV
            echo "BUILD_DATE=$build_date" >> $GITHUB_ENV
            echo "BUILD_DATE_ZH=$build_date_zh" >> $GITHUB_ENV
            echo "TIME_DIFF=$time_diff" >> $GITHUB_ENV
            echo "SECURITY_PATCH=$security_patch" >> $GITHUB_ENV
            echo "BUILD_ID=$build_id" >> $GITHUB_ENV
            
            # 打印提取的信息
            echo "Android 版本: $android_version"
            echo "构建日期: $build_date"
            echo "构建日期(中文): $build_date_zh"
            [ -n "$time_diff" ] && echo "时差信息: $time_diff"
            echo "安全补丁: $security_patch"
            echo "构建ID: $build_id"
            
            if [ -n "$miui_version" ]; then echo "MIUI 版本: $miui_version"; fi
            if [ -n "$flyme_version" ]; then echo "Flyme 版本: $flyme_version"; fi
            if [ -n "$coloros_version" ]; then echo "ColorOS 版本: $coloros_version"; fi
            if [ -n "$smartisan_version" ]; then echo "SmartisanOS 版本: $smartisan_version"; fi
            if [ -n "$zui_version" ]; then echo "ZUI 版本: $zui_version"; fi
          else
            echo "⚠️ 未找到build.prop文件"
            echo "ANDROID_VERSION=未知" >> $GITHUB_ENV
            echo "BUILD_DATE=未知" >> $GITHUB_ENV
            echo "BUILD_DATE_ZH=未知" >> $GITHUB_ENV
            echo "TIME_DIFF=" >> $GITHUB_ENV
            echo "SECURITY_PATCH=未知" >> $GITHUB_ENV
            echo "BUILD_ID=未知" >> $GITHUB_ENV
            echo "VERSION_IDENTIFIER=未知" >> $GITHUB_ENV
            echo "PACK_DATE=未知" >> $GITHUB_ENV
          fi
        else
          echo "::warning::⚠️ out/system目录不存在，无法提取系统信息"
          echo "ANDROID_VERSION=未知" >> $GITHUB_ENV
          echo "BUILD_DATE=未知" >> $GITHUB_ENV
          echo "BUILD_DATE_ZH=未知" >> $GITHUB_ENV
          echo "TIME_DIFF=" >> $GITHUB_ENV
          echo "SECURITY_PATCH=未知" >> $GITHUB_ENV
          echo "BUILD_ID=未知" >> $GITHUB_ENV
          echo "VERSION_IDENTIFIER=未知" >> $GITHUB_ENV
          echo "PACK_DATE=未知" >> $GITHUB_ENV
        fi
        echo "::endgroup::"

    - name: '📐 计算镜像大小'
      run: |
        echo "::group::📐 计算镜像大小"
        if [ -f "out/system.img" ]; then
          # 获取原始大小（字节）
          original_size=$(stat -c%s out/system.img)
          
          # 压缩镜像（如果需要）
          # echo "压缩system.img..."
          # img2simg out/system.img out/system_sparse.img
          # simg2img out/system_sparse.img out/system.img
          
          # 获取最终大小（字节）
          final_size=$(stat -c%s out/system.img)
          
          # 计算节省百分比
          saved_percent=$(awk "BEGIN {printf \"%.1f\", (($original_size - $final_size) / $original_size) * 100}")
          
          # 转换为人类可读格式
          original_size_human=$(numfmt --to=iec --suffix=B $original_size)
          final_size_human=$(numfmt --to=iec --suffix=B $final_size)
          
          # 保存到环境变量
          echo "ORIGINAL_SIZE=$original_size" >> $GITHUB_ENV
          echo "FINAL_SIZE=$final_size" >> $GITHUB_ENV
          echo "ORIGINAL_SIZE_HUMAN=$original_size_human" >> $GITHUB_ENV
          echo "FINAL_SIZE_HUMAN=$final_size_human" >> $GITHUB_ENV
          echo "SAVED_PERCENT=$saved_percent" >> $GITHUB_ENV
          
          echo "原始大小: $original_size_human"
          echo "最终大小: $final_size_human"
          echo "节省空间: ${saved_percent}%"
        else
          echo "::warning::⚠️ 未找到system.img文件"
          echo "ORIGINAL_SIZE_HUMAN=未知" >> $GITHUB_ENV
          echo "FINAL_SIZE_HUMAN=未知" >> $GITHUB_ENV
          echo "SAVED_PERCENT=0" >> $GITHUB_ENV
        fi
        echo "::endgroup::"

    - name: '🔒 计算SHA256校验和'
      run: |
        echo "::group::🔒 计算SHA256校验和"
        if [ -f "out/system.img" ]; then
          sha256=$(sha256sum out/system.img | awk '{print $1}')
          echo "SYSTEM_IMG_SHA256=$sha256" >> $GITHUB_ENV
          echo "SHA-256: $sha256"
        else
          echo "::warning::⚠️ 未找到system.img文件"
          echo "SYSTEM_IMG_SHA256=未知" >> $GITHUB_ENV
        fi
        echo "::endgroup::"

    - name: "📝 生成发布说明"
      run: |
        # 创建发布说明文件
        echo "## 🌟 SGSI镜像构建成功" > release_body.md
        echo "" >> release_body.md
        echo "### 📋 构建详情" >> release_body.md
        echo "- **源ROM**: ${{ env.rom_name }}" >> release_body.md
        echo "- **构建时间**: ${{ env.BUILD_TIME }}" >> release_body.md
        echo "- **打包日期**: ${{ env.PACK_DATE }}" >> release_body.md
        echo "- **镜像大小**: ${{ env.FINAL_SIZE_HUMAN }} (原始大小: ${{ env.ORIGINAL_SIZE_HUMAN }}, 节省 ${{ env.SAVED_PERCENT }}%)" >> release_body.md
        echo "- **SHA-256校验和**: \`${{ env.SYSTEM_IMG_SHA256 }}\`" >> release_body.md
        echo "" >> release_body.md
        
        echo "### ️ 系统信息" >> release_body.md
        echo "- **Android 版本**: ${{ env.ANDROID_VERSION }}" >> release_body.md
        echo "- **ROM版本标识**: ${{ env.VERSION_IDENTIFIER }}" >> release_body.md
        
        # 智能日期展示
        if [ -n "${{ env.TIME_DIFF }}" ]; then
          echo "- **ROM构建日期**: ${{ env.BUILD_DATE }} [中文: ${{ env.BUILD_DATE_ZH }} ${{ env.TIME_DIFF }}]" >> release_body.md
        else
          echo "- **ROM构建日期**: ${{ env.BUILD_DATE }} [中文: ${{ env.BUILD_DATE_ZH }}]" >> release_body.md
        fi
        
        echo "- **安全补丁日期**: ${{ env.SECURITY_PATCH }}" >> release_body.md
        
        # 厂商特定版本信息
        if [ "${{ env.make_miui }}" = "true" ]; then
          echo "- **MIUI 版本**: ${{ env.MIUI_VERSION }}" >> release_body.md
        fi
        
        if [ "${{ env.make_flyme }}" = "true" ]; then
          echo "- **Flyme 版本**: ${{ env.FLYME_VERSION }}" >> release_body.md
        fi
        
        if [ "${{ env.make_coloros }}" = "true" ]; then
          echo "- **ColorOS 版本**: ${{ env.COLOROS_VERSION }}" >> release_body.md
        fi
        
        if [ "${{ env.make_h2os }}" = "true" ]; then
          echo "- **HydrogenOS 版本**: ${{ env.COLOROS_VERSION }}" >> release_body.md
        fi
        
        if [ "${{ env.make_smartisanos }}" = "true" ]; then
          echo "- **SmartisanOS 版本**: ${{ env.SMARTISAN_VERSION }}" >> release_body.md
        fi
        
        if [ "${{ env.make_zui }}" = "true" ]; then
          echo "- **ZUI 版本**: ${{ env.ZUI_VERSION }}" >> release_body.md
        fi
        
        # 添加安装说明
        echo "" >> release_body.md
        echo "###  📥 安装说明" >> release_body.md
        echo "1. 下载镜像到手机存储" >> release_body.md
        echo "2. 进入TWRP或OrangeFox Recovery" >> release_body.md
        echo "3. 选择安装 → 选择镜像文件 → 刷入System分区" >> release_body.md
        echo "4. 重启设备" >> release_body.md
        echo "" >> release_body.md
        echo "> **注意**: 仅适用于Android 10 A/B分区设备" >> release_body.md
        echo "✅ 发布说明生成完成"

    - name: '📦 准备发布文件'
      run: |
        echo "::group::📦 准备发布文件"
        mkdir -p upload
        if [ -f "out/system.img" ] && [ "${{ env.pack_sgsi }}" = "true" ]; then
          cp out/system.img upload/
        fi
        if [ -f "out/super.img" ] && [ "${{ env.make_super }}" = "true" ]; then
          cp out/super.img upload/
        fi
        cp release_body.md upload/
        echo "::endgroup::"

    - name: "🚀 发布SGSI成品"
      if: success()
      uses: softprops/action-gh-release@v1
      with:
        文件: upload/*
        tag_name: "sgs-img-${{ env.BUILD_TIME }}"
        name: "SGSI Build - ${{ env.rom_name }}"
        body_file: upload/release_body.md
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: '🧹 清理工作空间'
      run: |
        echo "::group::🧹 清理工作空间"
        rm -rf rom.zip
        rm -rf out/
        rm -rf upload/
        echo "::endgroup::"
