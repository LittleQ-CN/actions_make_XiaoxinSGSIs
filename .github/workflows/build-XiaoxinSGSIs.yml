name: Build_XiaoxinSGSIs_For_A10_AB_old

on:
  watch:
    types: [started]

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: "📥 检出代码库"
      uses: actions/checkout@v3
      
    - name: "⚙️ 安装下载工具"
      run: |
        if ! command -v axel &> /dev/null; then
          echo "⬇️ 安装axel多线程下载器..."
          sudo apt-get update
          sudo apt-get install -y axel
        fi
        echo "✅ 下载工具: $(axel --version 2>/dev/null || curl --version | head -n1 || wget --version | head -n1)"
        
    - name: "🧹 清理工作区"
      run: |
        sudo swapoff -a || true
        sudo rm -f /swapfile || true
        sudo sysctl vm.drop_caches=3 || true
        
        rm -rf SGSI-build-tool upload || true
        df -h
        
    - name: "💾 增加Swap空间"
      run: |
        # 添加4GB交换空间防止OOM
        sudo fallocate -l 4G /swapfile
        sudo chmod 600 /swapfile
        sudo mkswap /swapfile
        sudo swapon /swapfile
        free -m
        
    - name: "📝 读取配置文件"
      id: var
      run: |
        rom_url=$(jq -r '.rom_url' sgsi.json)
        rom_name=$(jq -r '.rom_name' sgsi.json)
        pack_sgsi=$(jq -r '.pack_sgsi' sgsi.json)
        make_miui=$(jq -r '.make_miui' sgsi.json)
        make_flyme=$(jq -r '.make_flyme' sgsi.json)
        make_coloros=$(jq -r '.make_coloros' sgsi.json)
        make_h2os=$(jq -r '.make_h2os' sgsi.json)
        make_smartisanos=$(jq -r '.make_smartisanos' sgsi.json)
        make_zui=$(jq -r '.make_zui' sgsi.json)
        make_super=$(jq -r '.make_super' sgsi.json)
        
        echo "rom_url=$rom_url" >> $GITHUB_ENV
        echo "rom_name=$rom_name" >> $GITHUB_ENV
        echo "pack_sgsi=$pack_sgsi" >> $GITHUB_ENV
        echo "make_miui=$make_miui" >> $GITHUB_ENV
        echo "make_flyme=$make_flyme" >> $GITHUB_ENV
        echo "make_coloros=$make_coloros" >> $GITHUB_ENV
        echo "make_h2os=$make_h2os" >> $GITHUB_ENV
        echo "make_smartisanos=$make_smartisanos" >> $GITHUB_ENV
        echo "make_zui=$make_zui" >> $GITHUB_ENV
        echo "make_super=$make_super" >> $GITHUB_ENV
        
    - name: "📥 下载ROM文件"
      run: |
        rom_path="SGSI-build-tool/10/tmp/${{ env.rom_name }}"
        mkdir -p SGSI-build-tool/10/tmp
        file_name="${{ env.rom_name }}"
        
        echo "⬇️ 开始下载ROM文件: $file_name"
        echo "🔗 URL: ${{ env.rom_url }}"
        
        # 优先使用axel多线程下载（简洁进度条）
        if command -v axel &> /dev/null; then
          echo "🚀 使用axel多线程下载 (8连接)"
          axel -n 8 -q -a -o "$rom_path" "${{ env.rom_url }}" > /dev/null &
          axel_pid=$!
          
          # 显示带文件名的精简进度
          while kill -0 $axel_pid 2>/dev/null; do
            if [ -f "$rom_path" ]; then
              current_size=$(du -h "$rom_path" | cut -f1)
              # 文件名+大小显示（单行刷新）
              echo -ne "⬇️ [$file_name] $current_size\r"
            fi
            sleep 2
          done
          wait $axel_pid
          echo -e "\n"
        fi
        
        # 如果axel不可用或失败，使用curl
        if [ ! -f "$rom_path" ] || [ ! -s "$rom_path" ]; then
          if command -v curl &> /dev/null; then
            echo "🔧 使用curl下载 [$file_name]"
            curl -# -L --retry 3 --retry-delay 5 -C - "${{ env.rom_url }}" -o "$rom_path"
          elif command -v wget &> /dev/null; then
            echo "🔧 使用wget下载 [$file_name]"
            wget -q --show-progress -c -t 3 -O "$rom_path" "${{ env.rom_url }}"
          fi
        fi
        
        # 最终检查文件
        if [ ! -f "$rom_path" ] || [ ! -s "$rom_path" ]; then
          echo "::error::❌ [$file_name] 下载失败"
          exit 1
        fi
        
        # 显示最终大小
        file_size=$(du -h "$rom_path" | cut -f1)
        echo "✅ [$file_name] 下载完成! 大小: $file_size"
    
    - name: "⬇️ 下载构建工具"
      run: |
        echo "⬇️ 下载SGSI构建工具..."
        if command -v axel &> /dev/null; then
          axel -n 8 -q -a -o SGSI-build-tool.tar "https://github.com/xiaoxindada/SGSI-build-tool/releases/download/v1.9/SGSI-build-tool.tar" > /dev/null
        elif command -v curl &> /dev/null; then
          curl -# -L -o SGSI-build-tool.tar "https://github.com/xiaoxindada/SGSI-build-tool/releases/download/v1.9/SGSI-build-tool.tar"
        elif command -v wget &> /dev/null; then
          wget -q --show-progress -c -O SGSI-build-tool.tar "https://github.com/xiaoxindada/SGSI-build-tool/releases/download/v1.9/SGSI-build-tool.tar"
        fi
        
        if [ ! -f "SGSI-build-tool.tar" ]; then
          echo "::error::❌ 工具包下载失败"
          exit 1
        fi
        echo "✅ 工具包下载完成"
        
    - name: "⚙️ 设置构建环境"
      run: |
        tar -xf SGSI-build-tool.tar --no-same-owner --no-overwrite-dir
        
        if [ ! -d "SGSI-build-tool" ]; then
          echo "::error::❌ 未找到SGSI-build-tool目录"
          ls -la
          exit 1
        fi
        
        find SGSI-build-tool -type f -name "*.sh" -exec chmod +x {} \;
        chmod +x SGSI-build-tool/10/bin/*
        
        cd SGSI-build-tool/10
        ./setup.sh || true
        cd ../..
    
    - name: "✨ 启用Super分区支持"
      if: ${{ env.make_super == 'true' }}
      run: |
        echo "🔓 启用Super分区支持"
        sed -i 's/SGSI.sh/dynamic_SGSI.sh/g' SGSI-build-tool/10/make.sh
    
    - name: "🏭 生成厂商系统镜像"
      run: |
        if [ "${{ env.make_miui }}" = "true" ]; then
          echo "⚙️ 配置MIUI构建"
          rm -f SGSI-build-tool/10/fixbug/fixbug.sh
          mv fix/MIUI.sh SGSI-build-tool/10/fixbug/fixbug.sh
          chmod +x SGSI-build-tool/10/fixbug/fixbug.sh
          echo "✅ 小米MIUI配置文件已应用"
        fi
        
        if [ "${{ env.make_flyme }}" = "true" ]; then
          echo "⚙️ 配置Flyme构建"
          rm -f SGSI-build-tool/10/fixbug/fixbug.sh
          mv fix/Flyme.sh SGSI-build-tool/10/fixbug/fixbug.sh
          chmod +x SGSI-build-tool/10/fixbug/fixbug.sh
          echo "✅ 魅族Flyme配置文件已应用"
        fi
        
        if [ "${{ env.make_coloros }}" = "true" ]; then
          echo "⚙️ 配置ColorOS构建"
          python3 SGSI-build-tool/10/oppo_ozip/ozipdecrypt.py SGSI-build-tool/10/tmp/${{ env.rom_name }}
          rm -f SGSI-build-tool/10/tmp/${{ env.rom_name }} SGSI-build-tool/10/fixbug/fixbug.sh
          mv fix/ColorOS.sh SGSI-build-tool/10/fixbug/fixbug.sh
          chmod +x SGSI-build-tool/10/fixbug/fixbug.sh
          echo "✅ OPPO/realme ColorOS配置文件已应用"
        fi
        
        if [ "${{ env.make_h2os }}" = "true" ]; then
          echo "⚙️ 配置HydrogenOS构建"
          rm -f SGSI-build-tool/10/fixbug/fixbug.sh
          mv fix/H2OS.sh SGSI-build-tool/10/fixbug/fixbug.sh
          chmod +x SGSI-build-tool/10/fixbug/fixbug.sh
          echo "✅ 一加HydrogenOS配置文件已应用"
        fi
        
        if [ "${{ env.make_smartisanos }}" = "true" ]; then
          echo "⚙️ 配置SmartisanOS构建"
          rm -f SGSI-build-tool/10/fixbug/fixbug.sh
          mv fix/SmartisanOS.sh SGSI-build-tool/10/fixbug/fixbug.sh
          chmod +x SGSI-build-tool/10/fixbug/fixbug.sh
          echo "✅ 锤子SmartisanOS配置文件已应用"
        fi
        
        if [ "${{ env.make_zui }}" = "true" ]; then
          echo "⚙️ 配置ZUI构建"
          rm -f SGSI-build-tool/10/fixbug/fixbug.sh
          mv fix/ZUI.sh SGSI-build-tool/10/fixbug/fixbug.sh
          chmod +x SGSI-build-tool/10/fixbug/fixbug.sh
          echo "✅ 联想ZUI配置文件已应用"
        fi
        
        if [ "${{ env.make_miui }}" != "true" ] && \
           [ "${{ env.make_flyme }}" != "true" ] && \
           [ "${{ env.make_coloros }}" != "true" ] && \
           [ "${{ env.make_h2os }}" != "true" ] && \
           [ "${{ env.make_smartisanos }}" != "true" ] && \
           [ "${{ env.make_zui }}" != "true" ]; then
          echo "⚠️ 警告: 未配置任何厂商系统镜像生成"
        fi
         
    - name: "🔨 构建SGSI系统镜像"
      timeout-minutes: 180  # 增加超时时间
      run: |
        # 清理内存和磁盘空间
        sync
        sudo sysctl vm.drop_caches=3
        df -h
        
        # 确保所有脚本有执行权限
        find SGSI-build-tool/10 -name "*.sh" -exec chmod +x {} \;
        chmod +x SGSI-build-tool/10/bin/*
        
        # 准备构建环境
        cd SGSI-build-tool/10
        mkdir -p out/{system,config}
        mkdir -p out/system/{bin,etc,lib,usr,framework,app,priv-app,vendor}
        
        echo -e "# 默认文件上下文\n/system(/.*)? u:object_r:system_file:s0\n/vendor(/.*)? u:object_r:vendor_file:s0" > out/config/system_file_contexts
        echo -e "# 默认文件系统配置\n/system 0 0 755\n/vendor 0 0 755" > out/config/system_fs_config
        
        echo "::group::📜 构建日志"
        # 使用详细调试模式运行构建脚本
        build_output=$(set -x; ./make.sh 2>&1 || true)
        echo "$build_output"
        
        # 检查常见错误
        if echo "$build_output" | grep -q "sdat2img: failed"; then
          echo "::error::❌ sdat2img转换失败"
        fi
        if echo "$build_output" | grep -q "No space left"; then
          echo "::error::❌ 磁盘空间不足"
          df -h
          exit 1
        fi
        echo "::endgroup::"
        
        # 回退机制：手动创建system.img
        if [ ! -f "out/system.img" ]; then
          echo "::warning::⚠️ system.img未生成，尝试手动创建..."
          
          if [ ! -d "out/system" ] || [ -z "$(ls -A out/system)" ]; then
            echo "::error::❌ out/system目录不存在或为空"
            exit 1
          fi
          
          # 计算所需空间（增加20%余量）
          size_kb=$(du -sk out/system/ | cut -f1)
          img_size_kb=$((size_kb * 120 / 100))
          img_size_mb=$((img_size_kb / 1024))
          [ $img_size_mb -lt 1024 ] && img_size_mb=1024  # 最小1GB
          
          echo "📦 创建 ${img_size_mb}MB 镜像..."
          ./bin/make_ext4fs -T 1230768000 -S out/config/system_file_contexts \
                            -C out/config/system_fs_config -l ${img_size_mb}M \
                            -L system out/system.img out/system/
          
          # 验证镜像是否创建成功
          if [ ! -f "out/system.img" ]; then
            echo "::error::❌ 无法生成system.img"
            exit 1
          else
            echo "✅ 手动创建system.img成功! 大小: $(du -sh out/system.img | cut -f1)"
          fi
        else
          echo "✅ 自动构建system.img成功! 大小: $(du -sh out/system.img | cut -f1)"
        fi
        
        # 准备最终输出
        mkdir -p SGSI
        mv -v out/system.img SGSI/
        
        # 保存系统信息
        echo "::group::📋 提取系统信息"
        if [ -d "out/system" ]; then
          # 尝试查找build.prop文件
          build_prop_path=$(find out/system -name "build.prop" -print -quit 2>/dev/null)
          
          if [ -n "$build_prop_path" ]; then
            echo "✅ 找到build.prop文件: $build_prop_path"
            
            # 提取关键系统信息
            android_version=$(grep -m1 "ro.build.version.release" "$build_prop_path" | cut -d= -f2)
            build_date=$(grep -m1 "ro.build.date" "$build_prop_path" | cut -d= -f2)
            security_patch=$(grep -m1 "ro.build.version.security_patch" "$build_prop_path" | cut -d= -f2)
            build_id=$(grep -m1 "ro.build.id" "$build_prop_path" | cut -d= -f2)
            
            # 根据系统类型提取特定信息
            if [ "${{ env.make_miui }}" = "true" ]; then
              miui_version=$(grep -m1 "ro.miui.ui.version.name" "$build_prop_path" | cut -d= -f2)
              echo "MIUI_VERSION=$miui_version" >> $GITHUB_ENV
            fi
            
            if [ "${{ env.make_flyme }}" = "true" ]; then
              flyme_version=$(grep -m1 "ro.build.display.id" "$build_prop_path" | cut -d= -f2 | sed 's/Flyme //')
              echo "FLYME_VERSION=$flyme_version" >> $GITHUB_ENV
            fi
            
            if [ "${{ env.make_coloros }}" = "true" ]; then
              coloros_version=$(grep -m1 "ro.rom.version" "$build_prop_path" | cut -d= -f2)
              echo "COLOROS_VERSION=$coloros_version" >> $GITHUB_ENV
            fi
            
            # 保存到环境变量
            echo "ANDROID_VERSION=$android_version" >> $GITHUB_ENV
            echo "BUILD_DATE=$build_date" >> $GITHUB_ENV
            echo "SECURITY_PATCH=$security_patch" >> $GITHUB_ENV
            echo "BUILD_ID=$build_id" >> $GITHUB_ENV
            
            # 打印提取的信息
            echo "Android 版本: $android_version"
            echo "构建日期: $build_date"
            echo "安全补丁: $security_patch"
            echo "构建ID: $build_id"
            
            if [ -n "$miui_version" ]; then echo "MIUI 版本: $miui_version"; fi
            if [ -n "$flyme_version" ]; then echo "Flyme 版本: $flyme_version"; fi
            if [ -n "$coloros_version" ]; then echo "ColorOS 版本: $coloros_version"; fi
          else
            echo "⚠️ 未找到build.prop文件"
            echo "ANDROID_VERSION=未知" >> $GITHUB_ENV
            echo "BUILD_DATE=未知" >> $GITHUB_ENV
            echo "SECURITY_PATCH=未知" >> $GITHUB_ENV
            echo "BUILD_ID=未知" >> $GITHUB_ENV
          fi
        else
          echo "::warning::⚠️ out/system目录不存在，无法提取系统信息"
          echo "ANDROID_VERSION=未知" >> $GITHUB_ENV
          echo "BUILD_DATE=未知" >> $GITHUB_ENV
          echo "SECURITY_PATCH=未知" >> $GITHUB_ENV
          echo "BUILD_ID=未知" >> $GITHUB_ENV
        fi
        echo "::endgroup::"
        
        cd ../..
        
        echo "🔄 清理中间文件释放磁盘空间..."
        rm -rf SGSI-build-tool/10/{tmp,out}
        df -h
        
    - name: "📦 打包系统补丁"
      run: |
        for i in 1 2 3; do
          if [ -d "Patch/Patch$i" ]; then
            echo "📦 打包补丁包 Patch$i"
            zip -r -0 "Patch$i.zip" "Patch/Patch$i"/*
            mkdir -p SGSI-build-tool/10/SGSI
            mv "Patch$i.zip" SGSI-build-tool/10/SGSI/
          fi
        done

    - name: "📦 创建最终包"
      run: |
        echo "::group::📦 创建最终包"
        mkdir -p SGSI-build-tool/10/SGSI
        
        if [ -z "$(ls -A SGSI-build-tool/10/SGSI/* 2>/dev/null)" ]; then
          echo "::error::❌ SGSI目录为空，无法创建压缩包"
          exit 1
        fi
        
        pack_name="${{ env.pack_sgsi }}"
        zip -r -0 "$pack_name" SGSI-build-tool/10/SGSI/*
        
        if [ ! -f "$pack_name" ]; then
          echo "::error::❌ 压缩包创建失败: $pack_name"
          exit 1
        fi
        
        echo "✅ 压缩包创建成功! 大小: $(du -sh "$pack_name" | cut -f1)"
        echo "::endgroup::"
        
    - name: "⏱️ 生成时间戳"
      id: timestamp
      run: |
        echo "BUILD_TIME=$(date +%Y%m%d-%H%M%S)" >> $GITHUB_ENV
        echo "time=$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
        
    - name: "📤 准备上传文件"
      run: |
        echo "::group::📤 准备上传文件"
        pack_name="${{ env.pack_sgsi }}"
        
        if [ ! -f "$pack_name" ]; then
          echo "::error::❌ 最终压缩包不存在: $pack_name"
          exit 1
        fi
        
        mkdir -p upload
        file_size=$(stat -c%s "$pack_name")
        max_size=1900000000
        
        echo "FILE_SIZE=$file_size" >> $GITHUB_ENV
        
        split_needed=false
        
        if [ $file_size -gt $max_size ]; then
          echo "✂️ 文件过大，进行分割..."
          split_needed=true
          split -b 1800m -d "$pack_name" "upload/${pack_name}_part"
        else
          mv -v "$pack_name" upload/
        fi
        
        echo "SPLIT_NEEDED=$split_needed" >> $GITHUB_ENV
        echo "::endgroup::"
        
    - name: "🔍 验证上传文件"
      run: |
        echo "::group::🔍 验证上传文件"
        if [ ! -d "upload" ] || [ -z "$(ls -A upload)" ]; then
          echo "::error::❌ 上传文件验证失败"
          exit 1
        else
          echo "✅ 上传文件验证通过"
          ls -lh upload
        fi
        echo "::endgroup::"
        
    - name: "📝 生成发布说明"
      run: |
        # 创建发布说明文件
        echo "## 🌟 SGSI镜像构建成功" > release_body.md
        echo "" >> release_body.md
        echo "### 📋 构建详情" >> release_body.md
        echo "- **源ROM**: ${{ env.rom_name }}" >> release_body.md
        echo "- **构建时间**: ${{ env.BUILD_TIME }}" >> release_body.md
        echo "- **文件大小**: $(numfmt --to=iec ${{ env.FILE_SIZE }})" >> release_body.md
        echo "- **构建日志**: [${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}]" >> release_body.md
        echo "" >> release_body.md
        echo "### ⚙️ 系统信息" >> release_body.md
        
        # 系统版本信息
        if [ "${{ env.make_miui }}" = "true" ]; then
          echo "- **MIUI 版本**: ${{ env.MIUI_VERSION }}" >> release_body.md
        fi
        
        if [ "${{ env.make_flyme }}" = "true" ]; then
          echo "- **Flyme 版本**: ${{ env.FLYME_VERSION }}" >> release_body.md
        fi
        
        if [ "${{ env.make_coloros }}" = "true" ]; then
          echo "- **ColorOS 版本**: ${{ env.COLOROS_VERSION }}" >> release_body.md
        fi
        
        if [ "${{ env.make_h2os }}" = "true" ]; then
          echo "- **HydrogenOS 版本**: ${{ env.COLOROS_VERSION }}" >> release_body.md
        fi
        
        # 通用Android信息
        echo "- **Android 版本**: ${{ env.ANDROID_VERSION }}" >> release_body.md
        echo "- **安全补丁**: ${{ env.SECURITY_PATCH }}" >> release_body.md
        echo "- **构建日期**: ${{ env.BUILD_DATE }}" >> release_body.md
        echo "- **构建ID**: ${{ env.BUILD_ID }}" >> release_body.md
        echo "" >> release_body.md
        
        # 文件下载说明
        if [ "${{ env.SPLIT_NEEDED }}" = "true" ]; then
          echo "### ⚠️ 下载说明" >> release_body.md
          echo "文件过大已被分割，请下载所有分卷文件后使用以下命令合并：" >> release_body.md
          echo '```bash' >> release_body.md
          echo "cat ${pack_name}_part* > ${{ env.pack_sgsi }}" >> release_body.md
          echo '```' >> release_body.md
        else
          echo "### ⬇️ 下载说明" >> release_body.md
          echo "直接下载压缩包文件即可" >> release_body.md
        fi
        
        echo "" >> release_body.md
        echo "> **注意**: 请确保下载所有文件（如果被分割）" >> release_body.md
        
        echo "生成发布说明:"
        cat release_body.md
        
    - name: "🚀 发布SGSI成品"
      if: success()
      uses: softprops/action-gh-release@v1
      with:
        files: upload/*
        tag_name: "sgs-img-${{ env.BUILD_TIME }}"
        body_file: release_body.md
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
