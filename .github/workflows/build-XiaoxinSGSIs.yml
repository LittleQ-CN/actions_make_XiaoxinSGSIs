
name: build_XiaoxinSGSIs_Old_With_Ai-fix

on:
  watch:
    types: [started]

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: 检出代码库
      uses: actions/checkout@v4
      
    - name: 清理工作区
      run: |
        rm -rf SGSI-build-tool upload || true
        df -h
        
    - name: 读取配置文件
      id: var
      run: |
        # 从sgsi.json读取配置
        rom_url=$(jq -r '.rom_url' sgsi.json)
        rom_name=$(jq -r '.rom_name' sgsi.json)
        pack_sgsi=$(jq -r '.pack_sgsi' sgsi.json)
        make_miui=$(jq -r '.make_miui' sgsi.json)
        make_flyme=$(jq -r '.make_flyme' sgsi.json)
        make_coloros=$(jq -r '.make_coloros' sgsi.json)
        make_h2os=$(jq -r '.make_h2os' sgsi.json)
        make_smartisanos=$(jq -r '.make_smartisanos' sgsi.json)
        make_zui=$(jq -r '.make_zui' sgsi.json)
        make_super=$(jq -r '.make_super' sgsi.json)
        
        # 使用环境文件设置环境变量
        echo "rom_url=$rom_url" >> $GITHUB_ENV
        echo "rom_name=$rom_name" >> $GITHUB_ENV
        echo "pack_sgsi=$pack_sgsi" >> $GITHUB_ENV
        echo "make_miui=$make_miui" >> $GITHUB_ENV
        echo "make_flyme=$make_flyme" >> $GITHUB_ENV
        echo "make_coloros=$make_coloros" >> $GITHUB_ENV
        echo "make_h2os=$make_h2os" >> $GITHUB_ENV
        echo "make_smartisanos=$make_smartisanos" >> $GITHUB_ENV
        echo "make_zui=$make_zui" >> $GITHUB_ENV
        echo "make_super=$make_super" >> $GITHUB_ENV
        
    - name: 下载构建工具
      run: |
        # 使用原始GitHub链接下载
        tool_url="https://github.com/xiaoxindada/SGSI-build-tool/releases/download/v1.9/SGSI-build-tool.tar"
        
        # 下载并重试机制
        max_retries=5
        for i in $(seq 1 $max_retries); do
          echo "尝试下载构建工具 (第 $i 次)"
          if command -v curl &> /dev/null; then
            curl -fL -o SGSI-build-tool.tar "$tool_url" && break
          else
            wget -c -O SGSI-build-tool.tar "$tool_url" && break
          fi
          sleep 10
          echo "下载中断，继续尝试..."
        done
        
        # 检查下载结果
        if [ ! -f SGSI-build-tool.tar ]; then
          echo "::error::工具包下载失败"
          exit 1
        fi
        
        echo "下载成功！文件大小: $(du -sh SGSI-build-tool.tar | cut -f1)"
        
    - name: 设置构建环境
      run: |
        tar -xf SGSI-build-tool.tar --no-same-owner --no-overwrite-dir
        
        if [ ! -d "SGSI-build-tool" ]; then
          echo "::error::未找到SGSI-build-tool目录"
          ls -la
          exit 1
        fi
        
        # 设置执行权限
        echo "设置脚本文件执行权限..."
        find SGSI-build-tool -type f \( -name "*.sh" -o -name "*.py" -o -name "perl" \) -exec chmod +x {} \;
        chmod +x SGSI-build-tool/10/bin/*
        chmod +x SGSI-build-tool/10/fixbug/*.sh
        
        # 特别确保关键文件有权限
        chmod +x SGSI-build-tool/10/make.sh
        chmod +x SGSI-build-tool/10/setup.sh
        chmod +x SGSI-build-tool/10/SGSI.sh
        
        # 移除所有脚本中的交互式read命令
        echo "移除交互式read命令..."
        find SGSI-build-tool -type f -name "*.sh" -exec sed -i '/read -p/d' {} \;
        find SGSI-build-tool -type f -name "*.sh" -exec sed -i 's/^\s*read\s.*//g' {} \;
        
        # 修复set-output弃用警告
        echo "更新弃用的set-output命令..."
        find SGSI-build-tool -type f -name "*.sh" -exec sed -i 's/echo "::set-output name=\(.*\)::\(.*\)"/echo "\1=\2" >> $GITHUB_OUTPUT/g' {} \;
        
        # 初始化环境
        cd SGSI-build-tool/10
        ./setup.sh || true
        cd ../..
        
        # 验证关键文件权限
        echo "验证权限:"
        ls -l SGSI-build-tool/10/make.sh
        ls -l SGSI-build-tool/10/bin/*
        
    - name: 磁盘空间监控
      run: |
        echo "::group::磁盘空间检查"
        df -h
        min_free=10 # 最小10GB空闲空间
        free_space=$(df -BG . | awk 'NR==2 {print $4}' | tr -d 'G')
        
        if [ "$free_space" -lt "$min_free" ]; then
          echo "::error::磁盘空间不足! 需要至少 ${min_free}GB, 当前只有 ${free_space}GB"
          exit 1
        fi
        echo "::endgroup::"
        
    - name: 下载ROM文件
      run: |
        mkdir -p SGSI-build-tool/10/tmp
        rom_path="SGSI-build-tool/10/tmp/${{ env.rom_name }}"
        
        # 带进度显示和重试的下载
        function download_with_progress() {
          if command -v curl &> /dev/null; then
            curl -# -L -k -C - "$1" -o "$2"
          else
            wget --progress=bar:force -c "$1" -O "$2"
          fi
        }
        
        max_retries=5
        for i in $(seq 1 $max_retries); do
          echo "下载ROM文件 (尝试 $i/$max_retries)"
          download_with_progress "${{ env.rom_url }}" "$rom_path" && break
          sleep 10
          echo "下载中断，继续尝试..."
        done

        if [ ! -f "$rom_path" ]; then
          echo "::error::ROM文件下载失败"
          exit 1
        fi
        
        # 校验最小文件大小
        min_size=$((100*1024*1024)) # 100MB
        file_size=$(stat -c%s "$rom_path")
        if [ $file_size -lt $min_size ]; then
          echo "::error::ROM文件过小 (${file_size}字节)，可能不完整"
          exit 1
        fi
    
    - name: 启用Super分区支持
      if: ${{ env.make_super == 'true' }}
      run: sed -i 's/SGSI.sh/dynamic_SGSI.sh/g' SGSI-build-tool/10/make.sh
    
    - name: 生成MIUI镜像
      if: ${{ env.make_miui == 'true' }}
      run: |
        rm -f SGSI-build-tool/10/fixbug/fixbug.sh
        mv fix/MIUI.sh SGSI-build-tool/10/fixbug/fixbug.sh
        chmod +x SGSI-build-tool/10/fixbug/fixbug.sh
        
    - name: 生成Flyme镜像
      if: ${{ env.make_flyme == 'true' }}
      run: |
        rm -f SGSI-build-tool/10/fixbug/fixbug.sh
        mv fix/Flyme.sh SGSI-build-tool/10/fixbug/fixbug.sh
        chmod +x SGSI-build-tool/10/fixbug/fixbug.sh
        
    - name: 生成ColorOS镜像
      if: ${{ env.make_coloros == 'true' }}
      run: |
        # 解密ColorOS ROM
        python3 SGSI-build-tool/10/oppo_ozip/ozipdecrypt.py SGSI-build-tool/10/tmp/${{ env.rom_name }}
        
        # 获取解密后的文件名 (移除.ozip扩展名)
        decrypted_name="${rom_name%.ozip}.zip"
        
        # 更新ROM路径为解密后的文件
        echo "rom_name=$decrypted_name" >> $GITHUB_ENV
        
        # 设置修复脚本
        rm -f SGSI-build-tool/10/fixbug/fixbug.sh
        mv fix/ColorOS.sh SGSI-build-tool/10/fixbug/fixbug.sh
        chmod +x SGSI-build-tool/10/fixbug/fixbug.sh
        
    - name: 生成HydrogenOS镜像
      if: ${{ env.make_h2os == 'true' }}
      run: |
        rm -f SGSI-build-tool/10/fixbug/fixbug.sh
        mv fix/H2OS.sh SGSI-build-tool/10/fixbug/fixbug.sh
        chmod +x SGSI-build-tool/10/fixbug/fixbug.sh
        
    - name: 生成SmartisanOS镜像
      if: ${{ env.make_smartisanos == 'true' }}
      run: |
        rm -f SGSI-build-tool/10/fixbug/fixbug.sh
        mv fix/SmartisanOS.sh SGSI-build-tool/10/fixbug/fixbug.sh
        chmod +x SGSI-build-tool/10/fixbug/fixbug.sh
        
    - name: 生成ZUI镜像
      if: ${{ env.make_zui == 'true' }}
      run: |
        rm -f SGSI-build-tool/10/fixbug/fixbug.sh
        mv fix/ZUI.sh SGSI-build-tool/10/fixbug/fixbug.sh
        chmod +x SGSI-build-tool/10/fixbug/fixbug.sh
        
    - name: 开始构建
      run: |
        cd SGSI-build-tool/10
        ./make.sh
        
        ls -l ./out/
        
        # 创建上传目录
        mkdir -p ../../upload
        mv ./out/* ../../upload/
        
    - name: 清理工作空间
      run: |
        # 保留必要的构建结果
        mv SGSI-build-tool/10/tmp/${{ env.rom_name }} upload/ || true
        mv SGSI-build-tool/10/out/* upload/ || true
        
        # 清理其他文件释放空间
        rm -rf SGSI-build-tool
        rm -f SGSI-build-tool.tar
        df -h
        
    - name: 上传构建产物
      uses: actions/upload-artifact@v3
      with:
        name: XiaoxinSGSI
        path: upload
        retention-days: 1
