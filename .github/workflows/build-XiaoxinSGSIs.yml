name: build_XiaoxinSGSIs

on:
  watch:
    types: [started]

env:
  BUILD_DIR: SGSI-build-tool/10
  ROM_DIR: ${{ github.workspace }}/SGSI-build-tool/10/tmp
  TOOLKIT_URL: https://github.com/xiaoxindada/SGSI-build-tool/releases/download/v1.9/SGSI-build-tool.tar
  OUTPUT_DIR: ${{ github.workspace }}/SGSI-build-tool/10/out

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id
    timeout-minutes: 240
    
    steps:
    - name: 设置时区
      run: sudo timedatectl set-timezone Asia/Shanghai
        
    - name: 检出代码库
      uses: actions/checkout@v4
    
    - name: 清理工作区
      run: |
        rm -rf SGSI-build-tool out || true
        df -h
        
    - name: 安装必要工具
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y -qq axel pv jq bc file simg2img img2simg zip unzip python3-pip android-sdk-libsparse-utils brotli xz-utils
        git clone https://github.com/xpirt/sdat2img.git sdat2img-tool
        sudo cp sdat2img-tool/sdat2img.py /usr/local/bin/
        sudo chmod +x /usr/local/bin/sdat2img.py
        
    - name: 读取sgsi配置
      run: |
        # 设置默认值
        ROM_URL=""
        ROM_NAME="Custom-ROM"
        ANDROID_VERSION="13"
        BUILD_TYPE="userdebug"
        PACK_SGSI="true"
        MAKE_MIUI="false"
        MAKE_FLYME="false"
        MAKE_COLOROS="false"
        MAKE_H2OS="false"
        MAKE_SMARTISANOS="false"
        MAKE_ZUI="false"
        MAKE_SUPER="false"
        
        # 如果配置文件存在则读取
        if [ -f "sgsi.json" ]; then
          echo "找到sgsi.json配置文件，读取配置..."
          ROM_URL=$(jq -r '.rom_url' sgsi.json)
          ROM_NAME=$(jq -r '.rom_name' sgsi.json)
          ANDROID_VERSION=$(jq -r '.android_version' sgsi.json)
          BUILD_TYPE=$(jq -r '.build_type' sgsi.json)
          PACK_SGSI=$(jq -r '.pack_sgsi' sgsi.json)
          MAKE_MIUI=$(jq -r '.make_miui' sgsi.json)
          MAKE_FLYME=$(jq -r '.make_flyme' sgsi.json)
          MAKE_COLOROS=$(jq -r '.make_coloros' sgsi.json)
          MAKE_H2OS=$(jq -r '.make_h2os' sgsi.json)
          MAKE_SMARTISANOS=$(jq -r '.make_smartisanos' sgsi.json)
          MAKE_ZUI=$(jq -r '.make_zui' sgsi.json)
          MAKE_SUPER=$(jq -r '.make_super' sgsi.json)
        else
          echo "::warning::未找到sgsi.json配置文件，使用默认值"
        fi
        
        # 设置环境变量
        echo "rom_url=$ROM_URL" >> $GITHUB_ENV
        echo "rom_name=$ROM_NAME" >> $GITHUB_ENV
        echo "android_version=$ANDROID_VERSION" >> $GITHUB_ENV
        echo "build_type=$BUILD_TYPE" >> $GITHUB_ENV
        echo "pack_sgsi=$PACK_SGSI" >> $GITHUB_ENV
        echo "make_miui=$MAKE_MIUI" >> $GITHUB_ENV
        echo "make_flyme=$MAKE_FLYME" >> $GITHUB_ENV
        echo "make_coloros=$MAKE_COLOROS" >> $GITHUB_ENV
        echo "make_h2os=$MAKE_H2OS" >> $GITHUB_ENV
        echo "make_smartisanos=$MAKE_SMARTISANOS" >> $GITHUB_ENV
        echo "make_zui=$MAKE_ZUI" >> $GITHUB_ENV
        echo "make_super=$MAKE_SUPER" >> $GITHUB_ENV
        
    - name: 下载工具箱
      run: |
        TOOL_FILE="${{ github.workspace }}/SGSI-build-tool.tar"
        if command -v axel &> /dev/null; then
          axel -n 8 -U "SGSI-Builder" -q -o "$TOOL_FILE" "${{ env.TOOLKIT_URL }}" || true
        fi
        if [ ! -f "$TOOL_FILE" ] && command -v curl &> /dev/null; then
          curl -L -k -q -# -o "$TOOL_FILE" "${{ env.TOOLKIT_URL }}" || true
        fi
        if [ ! -f "$TOOL_FILE" ] && command -v wget &> /dev/null; then
          wget -q --show-progress -O "$TOOL_FILE" "${{ env.TOOLKIT_URL }}" || true
        fi
        if [ ! -f "$TOOL_FILE" ]; then
          echo "::error::所有下载方式均失败"
          exit 1
        fi
        
    - name: 安全初始化环境
      run: |
        tar -xvf "${{ github.workspace }}/SGSI-build-tool.tar"
        if [ ! -d "SGSI-build-tool/10" ]; then
          echo "::error::解压后未找到SGSI-build-tool/10目录"
          exit 1
        fi
        
        # 执行环境设置脚本
        cd SGSI-build-tool/10
        chmod +x setup.sh
        ./setup.sh
        cd ../../
        echo "✅ 环境准备完成"
        
    - name: 设置构建时间
      run: |
        format_time() {
            local time_str=$(date +"%Y/%m/%d")
            local hour=$(date +"%H")
            local minute=$(date +"%M")
            local second=$(date +"%S")
            local hour_nozero=$((10#$hour))

            if [ $hour_nozero -ge 0 ] && [ $hour_nozero -lt 5 ]; then
                time_str="${time_str} 凌晨${hour_nozero}:${minute}:${second}"
            elif [ $hour_nozero -ge 5 ] && [ $hour_nozero -lt 9 ]; then
                time_str="${time_str} 早上${hour_nozero}:${minute}:${second}"
            elif [ $hour_nozero -ge 9 ] && [ $hour_nozero -lt 12 ]; then
                time_str="${time_str} 上午${hour_nozero}:${minute}:${second}"
            elif [ $hour_nozero -eq 12 ]; then
                time_str="${time_str} 中午12:${minute}:${second}"
            elif [ $hour_nozero -gt 12 ] && [ $hour_nozero -lt 19 ]; then
                time_str="${time_str} 下午$(($hour_nozero-12)):${minute}:${second}"
            else
                time_str="${time_str} 晚上$(($hour_nozero-12)):${minute}:${second}"
            fi
            echo "${time_str}"
        }
        
        BUILD_TIME_FORMATTED=$(format_time)
        echo "BUILD_DATE=$BUILD_TIME_FORMATTED" >> $GITHUB_ENV
        echo "SYSTEM_INFO=$rom_name | Android $android_version | $build_type" >> $GITHUB_ENV
        
    - name: 下载ROM文件
      run: |
        ROM_FILE="${{ env.ROM_DIR }}/source_rom.zip"
        mkdir -p "${{ env.ROM_DIR }}"
        axel -n 8 -o "$ROM_FILE" "$rom_url" || curl -L -o "$ROM_FILE" "$rom_url"
        if [ ! -f "$ROM_FILE" ]; then
          echo "::error::ROM下载失败"
          exit 1
        fi
        
    - name: 解压ROM文件并收集系统信息
      run: |
        cd "${{ env.ROM_DIR }}"
        unzip -q source_rom.zip
        
        # 检测系统镜像格式
        if [ -f "system.img" ]; then
          SYSTEM_IMAGE="system.img"
        elif [ -f "system.new.dat.br" ]; then
          brotli -d system.new.dat.br
          SYSTEM_IMAGE="system.new.dat"
        elif [ -f "system.new.dat" ]; then
          SYSTEM_IMAGE="system.new.dat"
        elif [ -f "system.new.dat.xz" ]; then
          xz -d system.new.dat.xz
          SYSTEM_IMAGE="system.new.dat"
        else
          echo "::error::未找到系统镜像文件"
          exit 1
        fi
        
        # 转换镜像格式
        if [[ "$SYSTEM_IMAGE" == *.dat ]]; then
          sdat2img.py system.transfer.list $SYSTEM_IMAGE system.img
          SYSTEM_IMAGE="system.img"
        fi
        
        # 获取原始镜像大小
        ORIGINAL_SIZE=$(du -sh system.img | awk '{print $1}')
        echo "ORIGINAL_SIZE=$ORIGINAL_SIZE" >> $GITHUB_ENV
        
        # 收集系统信息
        mkdir -p temp_mount
        sudo mount -o ro,loop system.img temp_mount 2>/dev/null || true
        
        BUILD_PROPS="system/build.prop"
        if [ -f "temp_mount/$BUILD_PROPS" ]; then
          DEVICE_NAME=$(grep -Po 'ro\.product\.device=\K.*' temp_mount/$BUILD_PROPS | head -1)
          ROM_VERSION=$(grep -Po 'ro\.build\.version\.incremental=\K.*' temp_mount/$BUILD_PROPS | head -1)
          SECURITY_PATCH=$(grep -Po 'ro\.build\.version\.security_patch=\K.*' temp_mount/$BUILD_PROPS | head -1)
          
          echo "DEVICE_NAME=$DEVICE_NAME" >> $GITHUB_ENV
          echo "ROM_VERSION=$ROM_VERSION" >> $GITHUB_ENV
          echo "SECURITY_PATCH=$SECURITY_PATCH" >> $GITHUB_ENV
        fi
        
        sudo umount temp_mount 2>/dev/null || true
        rm -rf temp_mount
        
    - name: 准备SGSI系统镜像
      run: |
        # 直接使用原始的 system.img
        cp "${{ env.ROM_DIR }}/system.img" "${{ env.BUILD_DIR }}/out/system.img"
        
        SYSTEM_IMG_SIZE=$(du -sh "${{ env.BUILD_DIR }}/out/system.img" | awk '{print $1}')
        echo "SYSTEM_IMG_SIZE=$SYSTEM_IMG_SIZE" >> $GITHUB_ENV
        
        # 创建构建信息文件
        echo "Xiaoxin SGSI Build" > "${{ env.BUILD_DIR }}/out/build-info.txt"
        echo "构建日期: ${{ env.BUILD_DATE }}" >> "${{ env.BUILD_DIR }}/out/build-info.txt"
        echo "原始ROM: ${{ env.rom_name }} (${{ env.ROM_VERSION }})" >> "${{ env.BUILD_DIR }}/out/build-info.txt"
        echo "Android版本: ${{ env.android_version }} (${{ env.SECURITY_PATCH }})" >> "${{ env.BUILD_DIR }}/out/build-info.txt"
        echo "设备代号: ${{ env.DEVICE_NAME }}" >> "${{ env.BUILD_DIR }}/out/build-info.txt"
        echo "构建类型: ${{ env.build_type }}" >> "${{ env.BUILD_DIR }}/out/build-info.txt"
        echo "原始镜像大小: ${{ env.ORIGINAL_SIZE }}" >> "${{ env.BUILD_DIR }}/out/build-info.txt"
        echo "SGSI镜像大小: $SYSTEM_IMG_SIZE" >> "${{ env.BUILD_DIR }}/out/build-info.txt"
        
    - name: 压缩并添加系统信息
      run: |
        cd "${{ env.BUILD_DIR }}/out"
        img2simg system.img system.sparse.img
        SPARSE_SIZE=$(du -sh system.sparse.img | awk '{print $1}')
        
        format_time() {
            local time_str=$(date +"%Y/%m/%d")
            local hour=$(date +"%H")
            local minute=$(date +"%M")
            local second=$(date +"%S")
            local hour_nozero=$((10#$hour))

            if [ $hour_nozero -ge 0 ] && [ $hour_nozero -lt 5 ]; then
                time_str="${time_str} 凌晨${hour_nozero}:${minute}:${second}"
            elif [ $hour_nozero -ge 5 ] && [ $hour_nozero -lt 9 ]; then
                time_str="${time_str} 早上${hour_nozero}:${minute}:${second}"
            elif [ $hour_nozero -ge 9 ] && [ $hour_nozero -lt 12 ]; then
                time_str="${time_str} 上午${hour_nozero}:${minute}:${second}"
            elif [ $hour_nozero -eq 12 ]; then
                time_str="${time_str} 中午12:${minute}:${second}"
            elif [ $hour_nozero -gt 12 ] && [ $hour_nozero -lt 19 ]; then
                time_str="${time_str} 下午$(($hour_nozero-12)):${minute}:${second}"
            else
                time_str="${time_str} 晚上$(($hour_nozero-12)):${minute}:${second}"
            fi
            echo "${time_str}"
        }
        
        PACK_TIME=$(format_time)
        COMPRESSED_FILE="SGSI-${{ env.DEVICE_NAME }}-$(date +%Y%m%d).zip"
        zip -q -9 "$COMPRESSED_FILE" system.sparse.img
        COMPRESSED_SIZE=$(du -sh "$COMPRESSED_FILE" | awk '{print $1}')
        
        # 更新构建信息
        echo "稀疏镜像大小: $SPARSE_SIZE" >> build-info.txt
        echo "压缩包大小: $COMPRESSED_SIZE" >> build-info.txt
        echo "打包日期: $PACK_TIME" >> build-info.txt
        
        zip -q -9 "$COMPRESSED_FILE" build-info.txt
        
        # 添加系统信息到zip注释
        SYSTEM_INFO_STRING="设备: ${{ env.DEVICE_NAME }} | Android: ${{ env.android_version }} | 大小: $COMPRESSED_SIZE | 打包日期: $PACK_TIME"
        echo "$SYSTEM_INFO_STRING" | zipnote -w "$COMPRESSED_FILE"
        
    - name: 发布构建产物
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: SGSI-Build-Output
        path: ${{ env.BUILD_DIR }}/out/SGSI-*.zip
