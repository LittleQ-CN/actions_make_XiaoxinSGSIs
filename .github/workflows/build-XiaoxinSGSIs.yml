name: build_XiaoxinSGSIs

on:
  watch:
    types: [started]

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: 检出代码库
      uses: actions/checkout@v3
      
    - name: 清理工作区
      run: |
        rm -rf SGSI-build-tool upload || true
        df -h
        
    - name: 读取配置文件
      id: var
      run: |
        # 使用新的环境文件方式设置输出变量
        rom_url=$(jq -r '.rom_url' sgsi.json)
        rom_name=$(jq -r '.rom_name' sgsi.json)
        pack_sgsi=$(jq -r '.pack_sgsi' sgsi.json)
        make_miui=$(jq -r '.make_miui' sgsi.json)
        make_flyme=$(jq -r '.make_flyme' sgsi.json)
        make_coloros=$(jq -r '.make_coloros' sgsi.json)
        make_h2os=$(jq -r '.make_h2os' sgsi.json)
        make_smartisanos=$(jq -r '.make_smartisanos' sgsi.json)
        make_zui=$(jq -r '.make_zui' sgsi.json)
        make_super=$(jq -r '.make_super' sgsi.json)
        
        # 设置环境变量
        echo "rom_url=$rom_url" >> $GITHUB_ENV
        echo "rom_name=$rom_name" >> $GITHUB_ENV
        echo "pack_sgsi=$pack_sgsi" >> $GITHUB_ENV
        echo "make_miui=$make_miui" >> $GITHUB_ENV
        echo "make_flyme=$make_flyme" >> $GITHUB_ENV
        echo "make_coloros=$make_coloros" >> $GITHUB_ENV
        echo "make_h2os=$make_h2os" >> $GITHUB_ENV
        echo "make_smartisanos=$make_smartisanos" >> $GITHUB_ENV
        echo "make_zui=$make_zui" >> $GITHUB_ENV
        echo "make_super=$make_super" >> $GITHUB_ENV
        
    - name: 下载构建工具
      run: |
        wget -c https://github.com/xiaoxindada/SGSI-build-tool/releases/download/v1.9/SGSI-build-tool.tar
        if [ ! -f SGSI-build-tool.tar ]; then
          echo "::error::工具包下载失败"
          exit 1
        fi
        
    - name: 设置构建环境
      run: |
        tar -xf SGSI-build-tool.tar --no-same-owner --no-overwrite-dir
        
        if [ ! -d "SGSI-build-tool" ]; then
          echo "::error::未找到SGSI-build-tool目录"
          ls -la
          exit 1
        fi
        
        # 移除权限相关的命令
        find SGSI-build-tool -type f -exec sed -i '/chown/d; /sudo/d' {} \;
        
        # 设置执行权限
        find SGSI-build-tool -type f -name "*.sh" -exec chmod +x {} \;
        chmod +x SGSI-build-tool/10/bin/*
        find SGSI-build-tool -type d -exec chmod 755 {} \;
        
        # 初始化环境
        cd SGSI-build-tool/10
        ./setup.sh || true
        cd ../..
        
    - name: 下载ROM文件
      run: |
        mkdir -p SGSI-build-tool/10/tmp
        # 使用-q参数进行静默下载
        wget -q -c "${{ env.rom_url }}" -O "SGSI-build-tool/10/tmp/${{ env.rom_name }}"
        
        if [ ! -f "SGSI-build-tool/10/tmp/${{ env.rom_name }}" ]; then
          echo "::error::ROM文件下载失败"
          # 尝试重新下载一次并显示错误信息
          wget -c "${{ env.rom_url }}" -O "SGSI-build-tool/10/tmp/${{ env.rom_name }}" || true
          exit 1
        else
          echo "ROM文件已成功下载（静默模式）"
          echo "文件大小: $(du -sh SGSI-build-tool/10/tmp/${{ env.rom_name }} | cut -f1)"
        fi
    
    - name: 启用Super分区支持
      if: ${{ env.make_super == 'true' }}
      run: sed -i 's/SGSI.sh/dynamic_SGSI.sh/g' SGSI-build-tool/10/make.sh
    
    - name: 生成MIUI镜像
      if: ${{ env.make_miui == 'true' }}
      run: |
        rm -f SGSI-build-tool/10/fixbug/fixbug.sh
        mv fix/MIUI.sh SGSI-build-tool/10/fixbug/fixbug.sh
        chmod +x SGSI-build-tool/10/fixbug/fixbug.sh
        
    - name: 生成Flyme镜像
      if: ${{ env.make_flyme == 'true' }}
      run: |
        rm -f SGSI-build-tool/10/fixbug/fixbug.sh
        mv fix/Flyme.sh SGSI-build-tool/10/fixbug/fixbug.sh
        chmod +x SGSI-build-tool/10/fixbug/fixbug.sh
        
    - name: 生成ColorOS镜像
      if: ${{ env.make_coloros == 'true' }}
      run: |
        python3 SGSI-build-tool/10/oppo_ozip/ozipdecrypt.py SGSI-build-tool/10/tmp/${{ env.rom_name }}
        rm -f SGSI-build-tool/10/tmp/${{ env.rom_name }} SGSI-build-tool/10/fixbug/fixbug.sh
        mv fix/ColorOS.sh SGSI-build-tool/10/fixbug/fixbug.sh
        chmod +x SGSI-build-tool/10/fixbug/fixbug.sh
        
    - name: 生成HydrogenOS镜像
      if: ${{ env.make_h2os == 'true' }}
      run: |
        rm -f SGSI-build-tool/10/fixbug/fixbug.sh
        mv fix/H2OS.sh SGSI-build-tool/10/fixbug/fixbug.sh
        chmod +x SGSI-build-tool/10/fixbug/fixbug.sh
        
    - name: 生成SmartisanOS镜像
      if: ${{ env.make_smartisanos == 'true' }}
      run: |
        rm -f SGSI-build-tool/10/fixbug/fixbug.sh
        mv fix/SmartisanOS.sh SGSI-build-tool/10/fixbug/fixbug.sh
        chmod +x SGSI-build-tool/10/fixbug/fixbug.sh
        
    - name: 生成ZUI镜像
      if: ${{ env.make_zui == 'true' }}
      run: |
        rm -f SGSI-build-tool/10/fixbug/fixbug.sh
        mv fix/ZUI.sh SGSI-build-tool/10/fixbug/fixbug.sh
        chmod +x SGSI-build-tool/10/fixbug/fixbug.sh
         
    - name: 构建SGSI系统镜像
      timeout-minutes: 180
      run: |
        # 准备构建脚本
        rm -f SGSI-build-tool/10/{SGSI.sh,makeimg.sh,dynamic_SGSI.sh,oppo.sh}
        mv make/* SGSI-build-tool/10/
        mv bin/* SGSI-build-tool/10/bin/
        
        # 移除权限相关命令
        find SGSI-build-tool/10 -type f -exec sed -i '/chown/d' {} \;
        
        # 设置执行权限
        find SGSI-build-tool/10 -name "*.sh" -exec chmod +x {} \;
        chmod +x SGSI-build-tool/10/bin/*
        
        # 创建输出目录结构
        cd SGSI-build-tool/10
        mkdir -p out/{system,config}
        mkdir -p out/system/{bin,etc,lib,usr,framework,app,priv-app,vendor}
        
        # 创建默认配置文件
        echo -e "# 默认文件上下文\n/system(/.*)? u:object_r:system_file:s0\n/vendor(/.*)? u:object_r:vendor_file:s0" > out/config/system_file_contexts
        echo -e "# 默认文件系统配置\n/system 0 0 755\n/vendor 0 0 755" > out/config/system_fs_config
        
        # 执行构建
        echo "开始构建SGSI镜像..."
        ./make.sh || true
        echo "构建完成"
        
        # 验证构建结果
        if [ ! -f "out/system.img" ]; then
          echo "::warning::system.img未生成，尝试手动创建"
          
          # 计算所需镜像大小（目录大小 + 30%）
          size_kb=$(du -sk out/system/ | cut -f1)
          img_size_kb=$((size_kb + (size_kb * 30 / 100)))
          img_size_mb=$((img_size_kb / 1024))
          
          # 确保最小512MB
          if [ $img_size_mb -lt 512 ]; then
            img_size_mb=512
          fi
          
          echo "估算目录大小: ${size_kb}KB, 设置镜像大小: ${img_size_mb}MB"
          
          # 创建镜像文件
          ./bin/mke2fs -t ext4 -L /system -b 4096 -m 0 out/system.img ${img_size_mb}M
          
          # 填充镜像
          ./bin/e2fsdroid -e -T 1230768000 -C out/config/system_fs_config \
            -S out/config/system_file_contexts -f out/system/ -a /system out/system.img || true
            
          if [ ! -f "out/system.img" ]; then
            echo "::error::无法生成system.img"
            exit 1
          else
            echo "手动创建的system.img大小: $(du -sh out/system.img)"
          fi
        else
          echo "自动生成的system.img大小: $(du -sh out/system.img)"
        fi
        
        # 移动生成的文件
        mkdir -p SGSI
        mv out/system.img SGSI/
        echo "SGSI目录内容:"
        ls -lh SGSI
        
    - name: 打包系统补丁
      run: |
        for i in 1 2 3; do
          echo "打包补丁 Patch$i"
          if [ -d "Patch/Patch$i" ]; then
            zip -r -0 "Patch$i.zip" "Patch/Patch$i"/*
            mv "Patch$i.zip" SGSI-build-tool/10/SGSI/
          else
            echo "::warning::Patch/Patch$i 目录不存在，跳过"
          fi
        done

    - name: 打包并准备上传SGSI镜像
      run: |
        # 确保上传目录存在（使用绝对路径）
        mkdir -p "$GITHUB_WORKSPACE/upload"
        
        # 进入SGSI输出目录
        cd SGSI-build-tool/10/SGSI
        
        # 检查目录内容
        echo "SGSI目录内容:"
        ls -lh
        
        echo "::group::打包SGSI镜像"
        # 创建完整压缩包
        pack_name="${{ env.pack_sgsi }}"
        echo "正在创建压缩包: $pack_name"
        zip -r -0 "../../../../$pack_name" .
        echo "压缩包创建完成"
        echo "::endgroup::"
        
        # 返回工作目录
        cd ../../../../
        
        # 检查文件是否存在
        if [ ! -f "$pack_name" ]; then
          echo "::error::压缩包 $pack_name 未创建"
          exit 1
        fi
        
        # 确保上传目录存在
        mkdir -p upload
        echo "当前工作目录: $(pwd)"
        echo "目录内容:"
        ls -l
        
        # 检查文件大小
        max_size=2000000000  # 2GB
        file_size=$(stat -c%s "$pack_name")
        echo "压缩包大小: $(numfmt --to=iec $file_size)"
        
        if [ $file_size -gt $max_size ]; then
          echo "::notice::文件过大($(numfmt --to=iec $file_size))，进行分割处理..."
          # 使用split分割文件
          split -b 1000m -d "$pack_name" "upload/${pack_name}_part"
          rm -f "$pack_name"
          
          # 统计分割结果
          count=$(find upload/ -name "${pack_name}_part*" | wc -l)
          echo "分割完成，共生成 $count 个分卷文件"
        else
          echo "移动压缩包到upload目录"
          mv -v "$pack_name" upload/
          echo "单个压缩包已准备好上传"
        fi
        
        echo "最终上传文件:"
        ls -lh upload
        echo "Upload目录内容:"
        ls -lh upload/
        
    - name: 验证上传文件
      run: |
        if [ -z "$(ls -A upload)" ]; then
          echo "::error::上传目录为空，没有文件可发布"
          exit 1
        else
          echo "上传文件验证通过:"
          ls -lh upload
        fi
          
    - name: 发布SGSI版本
      uses: ncipollo/release-action@v1.8.6
      with:
        artifacts: 'upload/*'
        name: xiaoxinSGSI-ab-Android10-unpack
        tag: xiaoxinSGSI-ab-Android10-${{ github.run_number }}
        token: ${{ secrets.GITHUB_TOKEN }}
