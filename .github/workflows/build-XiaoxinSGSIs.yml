
name: build_XiaoxinSGSIs_2.1_Ai-test

on:
  watch:
    types: [started]

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
      - name: Checkout repository
        uses: actions/checkout@main
       
      - name: Clean up environment
        run: |
          docker rmi $(docker images -q) || true
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d || true
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php* || true
          sudo -E apt-get update
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean 
          df -h
       
      - name: Get build variables
        id: var
        run: |
          rom_url=$(jq -r '.rom_url' sgsi.json)
          rom_name=$(jq -r '.rom_name' sgsi.json)
          pack_sgsi=$(jq -r '.pack_sgsi' sgsi.json)
          make_miui=$(jq -r '.make_miui' sgsi.json)
          make_flyme=$(jq -r '.make_flyme' sgsi.json)
          make_coloros=$(jq -r '.make_coloros' sgsi.json)
          make_h2os=$(jq -r '.make_h2os' sgsi.json)
          make_smartisanos=$(jq -r '.make_smartisanos' sgsi.json)
          make_zui=$(jq -r '.make_zui' sgsi.json)
          make_super=$(jq -r '.make_super' sgsi.json)
          
          echo "rom_url=$rom_url" >> $GITHUB_OUTPUT
          echo "rom_name=$rom_name" >> $GITHUB_OUTPUT
          echo "pack_sgsi=$pack_sgsi" >> $GITHUB_OUTPUT
          echo "make_miui=$make_miui" >> $GITHUB_OUTPUT
          echo "make_flyme=$make_flyme" >> $GITHUB_OUTPUT
          echo "make_coloros=$make_coloros" >> $GITHUB_OUTPUT
          echo "make_h2os=$make_h2os" >> $GITHUB_OUTPUT
          echo "make_smartisanos=$make_smartisanos" >> $GITHUB_OUTPUT
          echo "make_zui=$make_zui" >> $GITHUB_OUTPUT
          echo "make_super=$make_super" >> $GITHUB_OUTPUT
           
      - name: Download build tools
        run: |
          tool_url="https://github.com/xiaoxindada/SGSI-build-tool/releases/download/v1.9/SGSI-build-tool.tar"
          echo "Downloading build tools: $tool_url"
          
          max_retries=5
          for i in $(seq 1 $max_retries); do
            if curl -fL -o SGSI-build-tool.tar "$tool_url"; then
              echo "Download successful"
              break
            else
              echo "Download failed, retrying ($i/$max_retries)..."
              sleep 10
            fi
          done
          if [ ! -f "SGSI-build-tool.tar" ]; then
            echo "::error::Build tools download failed"
            exit 1
          fi
          
      - name: Initialize environment
        run: |
          sudo tar -xf SGSI-build-tool.tar
          sudo rm -rf SGSI-build-tool/10/setup.sh || true
          sudo mv bin/setup.sh SGSI-build-tool/10/
          cd SGSI-build-tool/10
          sudo bash setup.sh
           
      - name: Download ROM
        run: |
          sudo wget -c ${{ steps.var.outputs.rom_url }} -O SGSI-build-tool/10/tmp/${{ steps.var.outputs.rom_name }}
       
      - name: Configure Super SGSI build
        if: ${{ steps.var.outputs.make_super == 'true' }}
        run: |
          sed -i 's/SGSI.sh/dynamic_SGSI.sh/g' SGSI-build-tool/10/make.sh
       
      - name: Configure MIUI SGSI build
        if: ${{ steps.var.outputs.make_miui == 'true' }}
        run: |
          sudo rm -rf SGSI-build-tool/10/fixbug/fixbug.sh || true
          mv fix/MIUI.sh SGSI-build-tool/10/fixbug/fixbug.sh
           
      - name: Configure Flyme SGSI build
        if: ${{ steps.var.outputs.make_flyme == 'true' }}
        run: |
          sudo rm -rf SGSI-build-tool/10/fixbug/fixbug.sh || true
          mv fix/Flyme.sh SGSI-build-tool/10/fixbug/fixbug.sh
           
      - name: Configure ColorOS SGSI build
        if: ${{ steps.var.outputs.make_coloros == 'true' }}
        run: |
          sudo python3 SGSI-build-tool/10/oppo_ozip/ozipdecrypt.py SGSI-build-tool/10/tmp/${{ steps.var.outputs.rom_name }}
          sudo rm -rf SGSI-build-tool/10/tmp/${{ steps.var.outputs.rom_name }} SGSI-build-tool/10/fixbug/fixbug.sh || true
          mv fix/ColorOS.sh SGSI-build-tool/10/fixbug/fixbug.sh
           
      - name: Configure H2OS SGSI build
        if: ${{ steps.var.outputs.make_h2os == 'true' }}
        run: |
          sudo rm -rf SGSI-build-tool/10/fixbug/fixbug.sh || true
          mv fix/H2OS.sh SGSI-build-tool/10/fixbug/fixbug.sh
           
      - name: Configure SmartisanOS SGSI build
        if: ${{ steps.var.outputs.make_smartisanos == 'true' }}
        run: |
          sudo rm -rf SGSI-build-tool/10/fixbug/fixbug.sh || true
          mv fix/SmartisanOS.sh SGSI-build-tool/10/fixbug/fixbug.sh
           
      - name: Configure ZUI SGSI build
        if: ${{ steps.var.outputs.make_zui == 'true' }}
        run: |
          sudo rm -rf SGSI-build-tool/10/fixbug/fixbug.sh || true
          mv fix/ZUI.sh SGSI-build-tool/10/fixbug/fixbug.sh
            
      - name: Generate SGSI images
        run: |
          rm -rf SGSI-build-tool/10/SGSI.sh SGSI-build-tool/10/makeimg.sh SGSI-build-tool/10/bin/mke2fs SGSI-build-tool/10/bin/e2fsdroid SGSI-build-tool/10/dynamic_SGSI.sh SGSI-build-tool/10/oppo.sh SGSI-build-tool/10/make.sh
          mv make/makeimg.sh make/SGSI.sh make/dynamic_SGSI.sh make/oppo.sh make/make.sh SGSI-build-tool/10/
          mv bin/mke2fs bin/e2fsdroid SGSI-build-tool/10/bin/
          cd SGSI-build-tool/10
          sudo bash make.sh
           
      - name: Create patch archives
        run: |
          zip -r Patch1.zip Patch/Patch1/*
          zip -r Patch2.zip Patch/Patch2/*
          zip -r Patch3.zip Patch/Patch3/*
          sudo mv Patch1.zip Patch2.zip Patch3.zip SGSI-build-tool/10/SGSI/

      - name: Package SGSI files
        run: |
          mkdir -p upload
          cd SGSI-build-tool/10/SGSI
          zip -r ${{ steps.var.outputs.pack_sgsi }} *
          cd ../../..
          mv ${{ steps.var.outputs.pack_sgsi }} upload/
          
          file_size=$(du -sb upload/${{ steps.var.outputs.pack_sgsi }} | awk '{print $1}')
          if [ $file_size -gt 2097152000 ]; then
            echo "Splitting large file into parts..."
            cd upload
            mkdir -p parts
            split -b 1024m ${{ steps.var.outputs.pack_sgsi }} parts/${{ steps.var.outputs.pack_sgsi }}.
            rm ${{ steps.var.outputs.pack_sgsi }}
            mv parts/* .
            rm -rf parts
            cd ..
          fi
          ls -lh upload
             
      - name: Upload SGSI to release
        uses: ncipollo/release-action@v1.8.6
        with:
          artifacts: upload/*
          name: xiaoxinSGSI-ab-Android10-unpack
          tag: xiaoxinSGSI-ab-Android10-${{ github.run_number }}
          token: ${{ secrets.GITHUB_TOKEN }}
