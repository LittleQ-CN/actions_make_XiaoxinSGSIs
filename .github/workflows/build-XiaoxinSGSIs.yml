name: build_XiaoxinSGSIs_old

on:
  watch:
    types: [started]
    
jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
      - name: "🚀 Checkout Code (检出代码)"
        uses: actions/checkout@v4
       
      - name: "🧹 Clean Up Environment (清理环境)"
        run: |
          docker rmi -f $(docker images -q) || true
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php* || true
          sudo -E apt-get update
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean 
          df -h
       
      - name: "⚙️ Get Configuration Variables (获取配置变量)"
        run: |
          {
            echo "rom_url=$(jq -r '.rom_url' sgsi.json)"
            echo "rom_name=$(jq -r '.rom_name' sgsi.json)"
            echo "pack_sgsi=$(jq -r '.pack_sgsi' sgsi.json)"
            echo "make_miui=$(jq -r '.make_miui' sgsi.json)"
            echo "make_flyme=$(jq -r '.make_flyme' sgsi.json)"
            echo "make_coloros=$(jq -r '.make_coloros' sgsi.json)"
            echo "make_h2os=$(jq -r '.make_h2os' sgsi.json)"
            echo "make_smartisanos=$(jq -r '.make_smartisanos' sgsi.json)"
            echo "make_zui=$(jq -r '.make_zui' sgsi.json)"
            echo "make_super=$(jq -r '.make_super' sgsi.json)"
          } >> $GITHUB_OUTPUT
        id: var
           
      - name: "📦 Install Download Tools (安装下载工具)"
        run: |
          sudo apt-get update
          # 安装基础工具和必要依赖
          sudo apt-get install -y axel curl wget pv aria2 git make gcc libfuse-dev libssl-dev autoconf automake pkg-config e2fsprogs
          
          # 尝试安装 libcom-err-dev 或替代包
          echo "🔍 查找 libcom-err-dev 或替代包..."
          if apt-cache show libcom-err-dev > /dev/null 2>&1; then
            echo "📦 安装 libcom-err-dev"
            sudo apt-get install -y libcom-err-dev
          elif apt-cache show libcomerr-dev > /dev/null 2>&1; then
            echo "📦 安装 libcomerr-dev (替代包)"
            sudo apt-get install -y libcomerr-dev
          elif apt-cache show e2fsprogs-dev > /dev/null 2>&1; then
            echo "📦 安装 e2fsprogs-dev (包含 libcom-err)"
            sudo apt-get install -y e2fsprogs-dev
          else
            echo "⚠️ 无法找到 libcom-err-dev 或直接替代包，尝试安装相关开发包"
            sudo apt-get install -y libext2fs-dev libblkid-dev libuuid-dev
          fi
          
          # 设置axel配置
          echo "max-connections = 32" | sudo tee -a /etc/axelrc
          
          # 安装 fuse-ext2 - 使用多种方法确保成功
          echo "🔧 安装 fuse-ext2..."
          
          # 方法1: 尝试从 Ubuntu 仓库安装（如果可用）
          if apt-cache show fuse-ext2 > /dev/null 2>&1; then
            echo "📦 从 Ubuntu 仓库安装 fuse-ext2"
            sudo apt-get install -y fuse-ext2
          else
            echo "⚠️ Ubuntu 仓库中没有 fuse-ext2，尝试其他方法"
          fi
          
          # 检查是否安装成功
          if command -v fuse-ext2 &> /dev/null; then
            echo "✅ fuse-ext2 已通过包管理器安装"
          else
            # 方法2: 从源码编译安装
            echo "🔨 从源码编译安装 fuse-ext2..."
            
            # 确保安装编译依赖
            sudo apt-get install -y libext2fs-dev
            
            # 克隆源码
            git clone https://github.com/alperakcan/fuse-ext2.git
            cd fuse-ext2
            
            # 配置和编译
            ./autogen.sh || (aclocal && autoreconf -i)
            ./configure --prefix=/usr
            make
            sudo make install
            sudo ldconfig
            
            # 检查编译是否成功
            if command -v fuse-ext2 &> /dev/null; then
              echo "✅ fuse-ext2 源码编译安装成功"
            else
              echo "⚠️ fuse-ext2 安装失败，将使用 debugfs 作为替代"
            fi
          fi
          
          # 确保 debugfs 可用
          if ! command -v debugfs &> /dev/null; then
            echo "📦 安装 debugfs (e2fsprogs)"
            sudo apt-get install -y e2fsprogs
          fi
           
      - name: "⬇️ Download Build Tools (下载构建工具)"
        run: |
          tool_url="https://github.com/xiaoxindada/SGSI-build-tool/releases/download/v1.9/SGSI-build-tool.tar"
          filename="SGSI-build-tool.tar"
          echo "🔧 正在下载构建工具: $tool_url"
          
          max_retries=3
          for i in $(seq 1 $max_retries); do
            if command -v curl &> /dev/null; then
              echo "⚡ 使用curl下载 [$filename]"
              if curl -# -fL -o "$filename" "$tool_url"; then
                echo "✅ 下载成功"
                break
              else
                echo "❌ curl失败，尝试aria2"
              fi
            fi
            
            if command -v aria2c &> /dev/null; then
              echo "⚡ 使用aria2下载 [$filename] (16线程)"
              if aria2c -x 16 -s 16 -k 1M --file-allocation=trunc -U "Mozilla/5.0" -o "$filename" "$tool_url"; then
                echo "✅ 下载成功"
                break
              else
                echo "❌ aria2失败，尝试axel"
              fi
            fi
            
            if command -v axel &> /dev/null; then
              echo "⚡ 使用32线程Axel下载 [$filename]"
              if axel -q -n 32 -U "Mozilla/5.0" -s -k -o "$filename" "$tool_url"; then
                echo "✅ 下载成功"
                break
              else
                echo "❌ Axel失败，尝试wget"
              fi
            fi
            
            if command -v wget &> /dev/null; then
              echo "⚡ 使用wget下载 [$filename]"
              if wget -q --show-progress -O "$filename" "$tool_url"; then
                echo "✅ 下载成功"
                break
              else
                echo "❌ wget失败"
              fi
            fi
            
            if [ $i -lt $max_retries ]; then
              echo "🔄 所有下载方式失败，重试中 ($i/$max_retries)..."
              sleep 10
            else
              echo "::error::❌ 构建工具下载失败"
              exit 1
            fi
          done
          
      - name: "🏗️ Initialize Environment (初始化环境)"
        run: |
          sudo tar -xf SGSI-build-tool.tar
          sudo rm -rf SGSI-build-tool/10/setup.sh
          sudo mv bin/setup.sh SGSI-build-tool/10/
          cd SGSI-build-tool/10
          sudo bash setup.sh
          echo "✅ 环境初始化完成"
           
      - name: "💾 Download ROM File (下载ROM文件)"
        run: |
          rom_path="SGSI-build-tool/10/tmp/${{ steps.var.outputs.rom_name }}"
          rom_url="${{ steps.var.outputs.rom_url }}"
          filename="${{ steps.var.outputs.rom_name }}"
          
          echo "🚀 开始下载: $filename"
          max_retries=5
          
          for i in $(seq 1 $max_retries); do
            if command -v aria2c &> /dev/null; then
              echo "⚡ 使用aria2下载 [$filename] (32线程)"
              aria2c -x 32 -s 32 -k 1M --file-allocation=trunc -U "Mozilla/5.0" -o "$rom_path" "$rom_url" && echo "✅ 下载成功" && break || echo "❌ aria2失败，尝试axel"
            fi
            
            if command -v axel &> /dev/null; then
              echo "⚡ 使用32线程Axel下载 [$filename]"
              axel -q -n 32 -U "Mozilla/5.0" -s -k -o "$rom_path" "$rom_url" && echo "✅ 下载成功" && break || echo "❌ Axel失败，尝试curl"
            fi
            
            if command -v curl &> /dev/null; then
              echo "⚡ 使用curl下载 [$filename]"
              curl -# -L -o "$rom_path" "$rom_url" && echo "✅ 下载成功" && break || echo "❌ curl失败，尝试wget"
            fi
            
            if command -v wget &> /dev/null; then
              echo "⚡ 使用wget下载 [$filename]"
              wget -q --show-progress -O "$rom_path" "$rom_url" && echo "✅ 下载成功" && break || echo "❌ wget失败"
            fi
            
            if [ $i -lt $max_retries ]; then
              echo "🔄 所有下载方式失败，重试中 ($i/$max_retries)..."
              sleep 10
            else
              echo "::error::❌ ROM下载失败"
              exit 1
            fi
          done
          
          echo -e "\n🎉 下载完成"
          echo "📦 文件大小: $(du -h "$rom_path" | cut -f1)"

      - name: "⚙️ Configure ROM Specific Settings (配置ROM特定设置)"
        run: |
          echo "开始配置ROM特定设置..."
          
          # Super SGSI配置
          if [ "${{ steps.var.outputs.make_super }}" = "true" ]; then
            echo "配置Super SGSI..."
            sed -i 's/SGSI.sh/dynamic_SGSI.sh/g' SGSI-build-tool/10/make.sh
            echo "Super SGSI配置完成"
          fi
          
          # 删除旧的fixbug脚本（为后续配置做准备）
          sudo rm -rf SGSI-build-tool/10/fixbug/fixbug.sh
          
          # MIUI配置
          if [ "${{ steps.var.outputs.make_miui }}" = "true" ]; then
            echo "配置MIUI..."
            cp fix/MIUI.sh SGSI-build-tool/10/fixbug/fixbug.sh
            echo "MIUI配置完成"
          
          # Flyme配置
          elif [ "${{ steps.var.outputs.make_flyme }}" = "true" ]; then
            echo "配置Flyme..."
            cp fix/Flyme.sh SGSI-build-tool/10/fixbug/fixbug.sh
            echo "Flyme配置完成"
          
          # ColorOS配置（特殊处理）
          elif [ "${{ steps.var.outputs.make_coloros }}" = "true" ]; then
            echo "配置ColorOS..."
            echo "解密ColorOS OZIP包..."
            sudo python3 SGSI-build-tool/10/oppo_ozip/ozipdecrypt.py "SGSI-build-tool/10/tmp/${{ steps.var.outputs.rom_name }}"
            sudo rm -rf "SGSI-build-tool/10/tmp/${{ steps.var.outputs.rom_name }}"
            cp fix/ColorOS.sh SGSI-build-tool/10/fixbug/fixbug.sh
            echo "ColorOS配置完成"
          
          # H2OS配置
          elif [ "${{ steps.var.outputs.make_h2os }}" = "true" ]; then
            echo "配置H2OS..."
            cp fix/H2OS.sh SGSI-build-tool/10/fixbug/fixbug.sh
            echo "H2OS配置完成"
          
          # SmartisanOS配置
          elif [ "${{ steps.var.outputs.make_smartisanos }}" = "true" ]; then
            echo "配置SmartisanOS..."
            cp fix/SmartisanOS.sh SGSI-build-tool/10/fixbug/fixbug.sh
            echo "SmartisanOS配置完成"
          
          # ZUI配置
          elif [ "${{ steps.var.outputs.make_zui }}" = "true" ]; then
            echo "配置ZUI..."
            cp fix/ZUI.sh SGSI-build-tool/10/fixbug/fixbug.sh
            echo "ZUI配置完成"
          
          else
            echo "未选择特定ROM配置，使用默认设置"
          fi
          
          echo "ROM特定设置配置完成"
            
      - name: "🛠️ Build SGSI Images (构建SGSI镜像)"
        run: |
          rm -rf SGSI-build-tool/10/SGSI.sh SGSI-build-tool/10/makeimg.sh SGSI-build-tool/10/bin/mke2fs SGSI-build-tool/10/bin/e2fsdroid SGSI-build-tool/10/dynamic_SGSI.sh SGSI-build-tool/10/oppo.sh SGSI-build-tool/10/make.sh
          mv make/makeimg.sh make/SGSI.sh make/dynamic_SGSI.sh make/oppo.sh make/make.sh SGSI-build-tool/10/
          mv bin/mke2fs bin/e2fsdroid SGSI-build-tool/10/bin/
          cd SGSI-build-tool/10
          sudo bash make.sh
          echo "🎉 SGSI镜像构建完成"

      - name: "🔍 Extract Version Info from SGSI (从SGSI镜像提取版本信息)"
        id: sgsi_info
        run: |
          echo "开始从SGSI镜像提取版本信息..."
          
          # 查找SGSI镜像文件
          sgsi_dir="SGSI-build-tool/10/SGSI"
          system_img=$(find "$sgsi_dir" -name "system.img" -o -name "system_*.img" | head -1)
          
          if [ -z "$system_img" ]; then
            echo "未找到SGSI镜像文件，使用默认版本信息"
            echo "android_version=Android10" >> $GITHUB_OUTPUT
            echo "rom_version=Unknown" >> $GITHUB_OUTPUT
            echo "security_patch=Unknown" >> $GITHUB_OUTPUT
            echo "build_date=Unknown" >> $GITHUB_OUTPUT
            echo "build_id=Unknown" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "找到SGSI镜像: $system_img"
          
          # 创建临时目录
          mkdir -p /tmp/sgsi_info
          
          # 函数：使用fuse-ext2提取信息
          extract_with_fuse_ext2() {
            if command -v fuse-ext2 &> /dev/null; then
              echo "尝试使用fuse-ext2挂载镜像..."
              mkdir -p /mnt/sgsi_temp
              fuse-ext2 "$system_img" /mnt/sgsi_temp -o ro,allow_other && sleep 2
              if [ -f "/mnt/sgsi_temp/build.prop" ]; then
                cp /mnt/sgsi_temp/build.prop /tmp/sgsi_info/
                fusermount -u /mnt/sgsi_temp
                rmdir /mnt/sgsi_temp
                return 0
              else
                fusermount -u /mnt/sgsi_temp
                rmdir /mnt/sgsi_temp
                return 1
              fi
            else
              return 1
            fi
          }
          
          # 函数：使用debugfs提取信息
          extract_with_debugfs() {
            if command -v debugfs &> /dev/null; then
              echo "尝试使用debugfs提取build.prop..."
              if debugfs -R "cat /build.prop" "$system_img" > /tmp/sgsi_info/build.prop 2>/dev/null; then
                # 检查提取的文件是否包含build属性
                if grep -q "ro.build" /tmp/sgsi_info/build.prop; then
                  return 0
                else
                  return 1
                fi
              else
                return 1
              fi
            else
              return 1
            fi
          }
          
          # 函数：从build.prop中提取信息
          extract_info_from_build_prop() {
            if [ -f /tmp/sgsi_info/build.prop ]; then
              # 提取Android版本
              android_version=$(grep -oP 'ro.build.version.release=\K.*' /tmp/sgsi_info/build.prop | head -1)
              # 提取安全补丁日期
              security_patch=$(grep -oP 'ro.build.version.security_patch=\K.*' /tmp/sgsi_info/build.prop | head -1)
              # 提取构建日期
              build_date=$(grep -oP 'ro.build.date=\K.*' /tmp/sgsi_info/build.prop | head -1)
              if [ -z "$build_date" ]; then
                build_date=$(grep -oP 'ro.build.date.utc=\K.*' /tmp/sgsi_info/build.prop | head -1)
                if [ -n "$build_date" ]; then
                  build_date=$(date -d "@$build_date" +"%Y-%m-%d" 2>/dev/null || echo "UTC-$build_date")
                fi
              fi
              # 提取构建ID
              build_id=$(grep -oP 'ro.build.id=\K.*' /tmp/sgsi_info/build.prop | head -1)
              # 提取ROM显示版本
              rom_display=$(grep -oP 'ro.build.display.id=\K.*' /tmp/sgsi_info/build.prop | head -1)
              # 提取MIUI版本
              miui_version=$(grep -oP 'ro.miui.ui.version.name=\K.*' /tmp/sgsi_info/build.prop | head -1)
              miui_code=$(grep -oP 'ro.miui.ui.version.code=\K.*' /tmp/sgsi_info/build.prop | head -1)
              
              # 组合ROM版本信息
              if [ -n "$miui_version" ]; then
                rom_version="MIUI${miui_version}"
                if [ -n "$miui_code" ]; then
                  rom_version="${rom_version}_${miui_code}"
                fi
              elif [ -n "$rom_display" ]; then
                rom_version="$rom_display"
              else
                rom_version=$(grep -oP 'ro.product.name=\K.*' /tmp/sgsi_info/build.prop | head -1)
                if [ -z "$rom_version" ]; then
                  rom_version=$(grep -oP 'ro.product.system.name=\K.*' /tmp/sgsi_info/build.prop | head -1)
                fi
              fi
              
              # 设置输出
              echo "android_version=${android_version:-Android10}" >> $GITHUB_OUTPUT
              echo "rom_version=${rom_version:-Unknown}" >> $GITHUB_OUTPUT
              echo "security_patch=${security_patch:-Unknown}" >> $GITHUB_OUTPUT
              echo "build_date=${build_date:-Unknown}" >> $GITHUB_OUTPUT
              echo "build_id=${build_id:-Unknown}" >> $GITHUB_OUTPUT
              return 0
            else
              return 1
            fi
          }
          
          # 尝试提取build.prop
          if extract_with_fuse_ext2; then
            echo "使用fuse-ext2提取成功"
          elif extract_with_debugfs; then
            echo "使用debugfs提取成功"
          else
            echo "无法提取build.prop，使用备用方法"
          fi
          
          # 从build.prop中提取信息
          if [ -f /tmp/sgsi_info/build.prop ]; then
            extract_info_from_build_prop
          else
            # 备用方法：从ROM文件名推断
            rom_name="${{ steps.var.outputs.rom_name }}"
            if echo "$rom_name" | grep -qi "android.*[0-9]"; then
              android_version=$(echo "$rom_name" | grep -oi "android.*[0-9]" | head -1 | tr '[:upper:]' '[:lower:]')
            else
              android_version="Android10"
            fi
            clean_name=$(echo "$rom_name" | cut -d'.' -f1 | tr -cd '[:alnum:]._-')
            echo "android_version=${android_version}" >> $GITHUB_OUTPUT
            echo "rom_version=${clean_name}" >> $GITHUB_OUTPUT
            echo "security_patch=Unknown" >> $GITHUB_OUTPUT
            echo "build_date=Unknown" >> $GITHUB_OUTPUT
            echo "build_id=Unknown" >> $GITHUB_OUTPUT
          fi
          
          # 清理
          rm -rf /tmp/sgsi_info
          echo "版本信息提取完成"
           
      - name: "🔍 Extract Device Info from SGSI (从SGSI镜像提取设备信息)"
        id: device_info
        run: |
          echo "提取基础设备信息..."
          
          # 简单地从之前步骤中可能已经提取的build.prop读取
          if [ -f /tmp/sgsi_info/build.prop ]; then
            device_codename=$(grep -oP 'ro.product.device=\K.*' /tmp/sgsi_info/build.prop | head -1 || echo "Unknown")
            manufacturer=$(grep -oP 'ro.product.manufacturer=\K.*' /tmp/sgsi_info/build.prop | head -1 || echo "Unknown")
          else
            device_codename="Unknown"
            manufacturer="Unknown"
          fi
          
          # 源设备通常与设备代号相同，或者我们可以用ROM名称
          source_device="$device_codename"
          if [ "$source_device" = "Unknown" ]; then
            rom_name="${{ steps.var.outputs.rom_name }}"
            source_device="${rom_name%.*}"  # 去掉文件扩展名
          fi
          
          echo "source_device=${source_device}" >> $GITHUB_OUTPUT
          echo "device_codename=${device_codename}" >> $GITHUB_OUTPUT
          echo "device_manufacturer=${manufacturer}" >> $GITHUB_OUTPUT

      - name: "📦 Package Patches (打包补丁文件)"
        run: |
          zip -r Patch1.zip Patch/Patch1/*
          zip -r Patch2.zip Patch/Patch2/*
          zip -r Patch3.zip Patch/Patch3/*
          sudo mv Patch1.zip Patch2.zip Patch3.zip SGSI-build-tool/10/SGSI/
          echo "✅ 补丁文件打包完成"

      - name: "📦 Package SGSI Output (打包SGSI输出)"
        run: |
          mkdir -p upload
          zip -r ${{ steps.var.outputs.pack_sgsi }} SGSI-build-tool/10/SGSI/*
          file_size=$(du -sb ${{ steps.var.outputs.pack_sgsi }} | awk '{print $1}')
          max_size=2097152000
          
          if [ $file_size -gt $max_size ]; then
            echo "⚠️ 文件过大 ($(numfmt --to=iec $file_size))，进行分割打包..."
            split -b 1024m -d ${{ steps.var.outputs.pack_sgsi }} upload/${{ steps.var.outputs.pack_sgsi }}_
            rm ${{ steps.var.outputs.pack_sgsi }}
            echo "✅ 分割完成: 1GB分块"
          else
            echo "📦 移动文件到上传目录"
            mv ${{ steps.var.outputs.pack_sgsi }} upload/
          fi
          
          echo "📁 上传目录内容:"
          ls -lh "upload"

      - name: "📝 Generate Release Notes (生成发布说明)"
        id: release_notes
        run: |
          # 获取当前日期作为发布日期
          release_date=$(date +"%Y-%m-%d")
          release_date_tag=$(date +"%Y%m%d")
          
          # 计算系统大小（SGSI目录的大小）
          system_size=$(du -sh SGSI-build-tool/10/SGSI | awk '{print $1}')
          
          # 计算压缩包大小
          zip_file="${{ steps.var.outputs.pack_sgsi }}"
          if [ -f "$zip_file" ]; then
            zip_size=$(du -h "$zip_file" | awk '{print $1}')
          else
            # 检查上传目录
            if [ -f "upload/$zip_file" ]; then
              zip_size=$(du -h "upload/$zip_file" | awk '{print $1}')
            else
              # 如果分割了，则计算所有分卷的总大小
              parts=$(ls upload/${zip_file}_* 2>/dev/null | wc -l)
              if [ $parts -gt 0 ]; then
                total_size=0
                for part in upload/${zip_file}_*; do
                  part_size=$(du -b "$part" | awk '{print $1}')
                  total_size=$((total_size + part_size))
                done
                zip_size=$(echo "$total_size" | awk '{ split( "B KB MB GB" , v ); s=1; while( $1>1024 ){ $1/=1024; s++ } printf "%.2f %s", $1, v[s] }')
                zip_size="$zip_size (分割为 $parts 部分)"
              else
                zip_size="未知"
              fi
            fi
          fi
          
          # 生成发布说明文件
          cat > release_notes.md << EOF
          # xiaoxinSGSI 发布信息
          
          ## 基本信息
          - **系统**: ${{ steps.sgsi_info.outputs.android_version }}
          - **系统版本**: ${{ steps.sgsi_info.outputs.rom_version }}
          - **从哪个机型移植**: ${{ steps.device_info.outputs.source_device }}
          - **设备代号**: ${{ steps.device_info.outputs.device_codename }}
          - **原构建日期**: ${{ steps.sgsi_info.outputs.build_date }}
          - **安全补丁**: ${{ steps.sgsi_info.outputs.security_patch }}
          
          ## 大小信息
          - **系统大小**: ${system_size}
          - **压缩包大小**: ${zip_size}
          - **发布日期**: ${release_date}
          
          ## 构建信息
          - **构建ID**: ${{ steps.sgsi_info.outputs.build_id }}
          EOF
          
          # 输出发布说明内容
          cat release_notes.md
          
          # 将发布说明文件移动到上传目录
          mv release_notes.md upload/
          
          # 设置输出变量
          echo "release_date=${release_date}" >> $GITHUB_OUTPUT
          echo "release_date_tag=${release_date_tag}" >> $GITHUB_OUTPUT
          echo "system_size=${system_size}" >> $GITHUB_OUTPUT
          echo "zip_size=${zip_size}" >> $GITHUB_OUTPUT
             
      - name: "🚀 Upload Build Artifacts (上传构建产物)"
        uses: ncipollo/release-action@v1.11.0
        with:
          artifacts: upload/*
          name: ${{ steps.sgsi_info.outputs.rom_version }}
          tag: ${{ steps.release_notes.outputs.release_date_tag }}_${{ steps.sgsi_info.outputs.rom_version }}
          bodyFile: upload/release_notes.md
          token: ${{ secrets.GITHUB_TOKEN }}
