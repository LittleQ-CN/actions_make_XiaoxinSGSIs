name: build_XiaoxinSGSIs_Old_With_Ai-fix

on:
  watch:
    types: [started]

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: 检出代码库
      uses: actions/checkout@v3
      
    - name: 清理工作区
      run: |
        rm -rf SGSI-build-tool upload || true
        df -h
        
    - name: 读取配置文件
      id: var
      run: |
        # 从sgsi.json读取配置
        rom_url=$(jq -r '.rom_url' sgsi.json)
        rom_name=$(jq -r '.rom_name' sgsi.json)
        pack_sgsi=$(jq -r '.pack_sgsi' sgsi.json)
        make_miui=$(jq -r '.make_miui' sgsi.json)
        make_flyme=$(jq -r '.make_flyme' sgsi.json)
        make_coloros=$(jq -r '.make_coloros' sgsi.json)
        make_h2os=$(jq -r '.make_h2os' sgsi.json)
        make_smartisanos=$(jq -r '.make_smartisanos' sgsi.json)
        make_zui=$(jq -r '.make_zui' sgsi.json)
        make_super=$(jq -r '.make_super' sgsi.json)
        
        # 使用环境文件设置环境变量（解决set-output弃用问题）
        echo "rom_url=$rom_url" >> $GITHUB_ENV
        echo "rom_name=$rom_name" >> $GITHUB_ENV
        echo "pack_sgsi=$pack_sgsi" >> $GITHUB_ENV
        echo "make_miui=$make_miui" >> $GITHUB_ENV
        echo "make_flyme=$make_flyme" >> $GITHUB_ENV
        echo "make_coloros=$make_coloros" >> $GITHUB_ENV
        echo "make_h2os=$make_h2os" >> $GITHUB_ENV
        echo "make_smartisanos=$make_smartisanos" >> $GITHUB_ENV
        echo "make_zui=$make_zui" >> $GITHUB_ENV
        echo "make_super=$make_super" >> $GITHUB_ENV
        
    - name: 下载构建工具
      run: |
        # 使用curl静默下载并重试
        max_retries=3
        for i in $(seq 1 $max_retries); do
          echo "尝试下载构建工具 (第 $i 次)"
          if command -v curl &> /dev/null; then
            curl -fL -o SGSI-build-tool.tar https://ghproxy.com/https://github.com/xiaoxindada/SGSI-build-tool/releases/download/v1.9/SGSI-build-tool.tar && break
          else
            wget -c -O SGSI-build-tool.tar https://ghproxy.com/https://github.com/xiaoxindada/SGSI-build-tool/releases/download/v1.9/SGSI-build-tool.tar && break
          fi
          sleep 5
        done
        
        if [ ! -f SGSI-build-tool.tar ]; then
          # 尝试备用源
          curl -fL -o SGSI-build-tool.tar https://hub.yzuu.cf/xiaoxindada/SGSI-build-tool/releases/download/v1.9/SGSI-build-tool.tar || {
            echo "::error::工具包下载失败"
            exit 1
          }
        fi
        
    - name: 设置构建环境
      run: |
        tar -xf SGSI-build-tool.tar --no-same-owner --no-overwrite-dir
        
        if [ ! -d "SGSI-build-tool" ]; then
          echo "::error::未找到SGSI-build-tool目录"
          ls -la
          exit 1
        fi
        
        # 设置执行权限
        find SGSI-build-tool -type f -name "*.sh" -exec chmod +x {} \;
        chmod +x SGSI-build-tool/10/bin/*
        
        # 初始化环境
        cd SGSI-build-tool/10
        ./setup.sh || true
        cd ../..
        
    - name: 磁盘空间监控
      run: |
        echo "::group::磁盘空间检查"
        df -h
        min_free=10 # 最小10GB空闲空间
        free_space=$(df -BG . | awk 'NR==2 {print $4}' | tr -d 'G')
        
        if [ "$free_space" -lt "$min_free" ]; then
          echo "::error::磁盘空间不足! 需要至少 ${min_free}GB, 当前只有 ${free_space}GB"
          exit 1
        fi
        echo "::endgroup::"
        
    - name: 下载ROM文件
      run: |
        mkdir -p SGSI-build-tool/10/tmp
        rom_path="SGSI-build-tool/10/tmp/${{ env.rom_name }}"
        
        # 带进度显示和重试的下载
        function download_with_progress() {
          if command -v curl &> /dev/null; then
            curl -# -L -k -C - "$1" -o "$2"
          else
            wget --progress=bar:force -c "$1" -O "$2"
          fi
        }
        
        max_retries=5
        for i in $(seq 1 $max_retries); do
          echo "下载ROM文件 (尝试 $i/$max_retries)"
          download_with_progress "${{ env.rom_url }}" "$rom_path" && break
          sleep 10
          echo "下载中断，继续尝试..."
        done

        if [ ! -f "$rom_path" ]; then
          echo "::error::ROM文件下载失败"
          exit 1
        fi
        
        # 校验最小文件大小
        min_size=$((100*1024*1024)) # 100MB
        file_size=$(stat -c%s "$rom_path")
        if [ $file_size -lt $min_size ]; then
          echo "::error::ROM文件过小 (${file_size}字节)，可能不完整"
          exit 1
        fi
    
    - name: 启用Super分区支持
      if: ${{ env.make_super == 'true' }}
      run: sed -i 's/SGSI.sh/dynamic_SGSI.sh/g' SGSI-build-tool/10/make.sh
    
    - name: 生成MIUI镜像
      if: ${{ env.make_miui == 'true' }}
      run: |
        rm -f SGSI-build-tool/10/fixbug/fixbug.sh
        mv fix/MIUI.sh SGSI-build-tool/10/fixbug/fixbug.sh
        chmod +x SGSI-build-tool/10/fixbug/fixbug.sh
        
    - name: 生成Flyme镜像
      if: ${{ env.make_flyme == 'true' }}
      run: |
        rm -f SGSI-build-tool/10/fixbug/fixbug.sh
        mv fix/Flyme.sh SGSI-build-tool/10/fixbug/fixbug.sh
        chmod +x SGSI-build-tool/10/fixbug/fixbug.sh
        
    - name: 生成ColorOS镜像
      if: ${{ env.make_coloros == 'true' }}
      run: |
        python3 SGSI-build-tool/10/oppo_ozip/ozipdecrypt.py SGSI-build-tool/10/tmp/${{ env.rom_name }}
        rm -f SGSI-build-tool/10/tmp/${{ env.rom_name }} SGSI-build-tool/10/fixbug/fixbug.sh
        mv fix/ColorOS.sh SGSI-build-tool/10/fixbug/fixbug.sh
        chmod +x SGSI-build-tool/10/fixbug/fixbug.sh
        
    - name: 生成HydrogenOS镜像
      if: ${{ env.make_h2os == 'true' }}
      run: |
        rm -f SGSI-build-tool/10/fixbug/fixbug.sh
        mv fix/H2OS.sh SGSI-build-tool/10/fixbug/fixbug.sh
        chmod +x SGSI-build-tool/10/fixbug/fixbug.sh
        
    - name: 生成SmartisanOS镜像
      if: ${{ env.make_smartisanos == 'true' }}
      run: |
        rm -f SGSI-build-tool/10/fixbug/fixbug.sh
        mv fix/SmartisanOS.sh SGSI-build-tool/10/fixbug/fixbug.sh
        chmod +x SGSI-build-tool/10/fixbug/fixbug.sh
        
    - name: 生成ZUI镜像
      if: ${{ env.make_zui == 'true' }}
      run: |
        rm -f SGSI-build-tool/10/fixbug/fixbug.sh
        mv fix/ZUI.sh SGSI-build-tool/10/fixbug/fixbug.sh
        chmod +x SGSI-build-tool/10/fixbug/fixbug.sh
         
    - name: 构建SGSI系统镜像
      timeout-minutes: 120
      run: |
        set -euo pipefail  # 启用严格错误处理
        
        echo "::group::准备构建环境"
        # 确保所有脚本文件有执行权限
        find SGSI-build-tool/10 -name "*.sh" -exec chmod +x {} \;
        chmod +x SGSI-build-tool/10/bin/*
        
        # 移除权限相关命令
        find SGSI-build-tool/10 -type f -exec sed -i '/chown/d' {} \;
        
        # 准备构建文件
        rm -f SGSI-build-tool/10/{SGSI.sh,makeimg.sh,dynamic_SGSI.sh,oppo.sh}
        mv make/* SGSI-build-tool/10/
        mv bin/* SGSI-build-tool/10/bin/
        
        # 创建输出目录结构
        cd SGSI-build-tool/10
        mkdir -p out/{system,config}
        mkdir -p out/system/{bin,etc,lib,usr,framework,app,priv-app,vendor}
        
        # 创建默认配置文件
        echo -e "# 默认文件上下文\n/system(/.*)? u:object_r:system_file:s0\n/vendor(/.*)? u:object_r:vendor_file:s0" > out/config/system_file_contexts
        echo -e "# 默认文件系统配置\n/system 0 0 755\n/vendor 0 0 755" > out/config/system_fs_config
        
        # 关键文件校验
        required_files=(
          "make.sh"
          "bin/mke2fs"
          "bin/e2fsdroid"
          "bin/simg2img"
          "bin/img2simg"
          "fixbug/fixbug.sh"
        )
        
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "::error::关键文件缺失: $file"
            exit 1
          fi
        done
        
        # 校验ROM文件
        rom_path="tmp/${{ env.rom_name }}"
        if [ ! -f "$rom_path" ]; then
          echo "::error::ROM文件不存在: $rom_path"
          exit 1
        fi
        
        min_rom_size=$((100*1024*1024)) # 100MB
        rom_size=$(stat -c%s "$rom_path")
        if [ $rom_size -lt $min_rom_size ]; then
          echo "::error::ROM文件过小 (${rom_size}字节)，可能下载不完整"
          exit 1
        fi
        echo "::endgroup::"
        
        echo "::group::执行make.sh构建"
        # 设置资源限制
        ulimit -v $((4096 * 1024))  # 限制内存使用
        ionice -c 3 -p $$           # 降低IO优先级
        
        # 执行构建
        build_log="build_${GITHUB_RUN_ID}.log"
        
        # 使用unbuffer确保实时输出 (如果可用)
        if command -v unbuffer >/dev/null; then
          unbuffer ./make.sh 2>&1 | tee "$build_log"
        else
          ./make.sh 2>&1 | tee "$build_log"
        fi
        
        build_exit=${PIPESTATUS[0]}
        if [ $build_exit -ne 0 ]; then
          echo "::error::make.sh构建失败，退出码: $build_exit"
          # 提取日志中的关键错误
          grep -i -E "error|fail|critical|exception" "$build_log" || true
          exit $build_exit
        fi
        
        # 检查特定错误模式
        if grep -q "sdat2img: failed" "$build_log"; then
          echo "::error::sdat2img转换失败"
          exit 1
        fi
        echo "::endgroup::"
        
        echo "::group::校验构建结果"
        # 检查生成的镜像文件
        if [ ! -f "out/system.img" ]; then
          echo "::warning::system.img未生成，尝试手动创建"
          
          if [ ! -d "out/system" ]; then
            echo "::error::out/system目录不存在，无法创建镜像"
            exit 1
          fi
          
          # 计算镜像大小
          size_kb=$(du -sk out/system/ | cut -f1)
          img_size_kb=$((size_kb * 130 / 100))  # +30%
          img_size_mb=$((img_size_kb / 1024))
          [ $img_size_mb -lt 512 ] && img_size_mb=512
          
          echo "创建 ${img_size_mb}MB 镜像"
          ./bin/mke2fs -t ext4 -L /system -b 4096 -m 0 out/system.img ${img_size_mb}M
          ./bin/e2fsdroid -e -T 1230768000 -C out/config/system_fs_config -S out/config/system_file_contexts -f out/system/ -a /system out/system/system/ -a /system out/system.img
        fi
        
        # 校验生成的镜像
        if [ ! -f "out/system.img" ]; then
          echo "::error::最终system.img不存在"
          exit 1
        fi
        
        min_img_size=$((300*1024*1024)) # 300MB
        img_size=$(stat -c%s "out/system.img")
        if [ $img_size -lt $min_img_size ]; then
          echo "::error::生成的system.img过小 (${img_size}字节)，可能构建失败"
          exit 1
        fi
        
        # 移动生成的文件
        mkdir -p SGSI
        mv out/system.img SGSI/
        echo "构建产物大小: $(du -sh SGSI/system.img)"
        echo "::endgroup::"
        cd ../../..

    - name: 打包系统补丁
      run: |
        for i in 1 2 3; do
          if [ -d "Patch/Patch$i" ]; then
            echo "打包补丁 Patch$i"
            zip -r -0 "Patch$i.zip" "Patch/Patch$i"/*
            mkdir -p SGSI-build-tool/10/SGSI
            mv "Patch$i.zip" SGSI-build-tool/10/SGSI/
          fi
        done

    - name: 创建最终包
      run: |
        echo "::group::创建最终包"
        # 确保SGSI目录存在
        mkdir -p SGSI-build-tool/10/SGSI
        
        # 创建压缩包
        pack_name="${{ env.pack_sgsi }}"
        echo "创建压缩包: $pack_name"
        
        # 直接在工作区根目录创建压缩包
        zip -r -0 "$pack_name" SGSI-build-tool/10/SGSI/*
        
        # 生成SHA256校验文件
        sha256sum "$pack_name" > "${pack_name}.sha256"
        
        # 检查压缩包
        if [ ! -f "$pack_name" ]; then
          echo "::error::压缩包创建失败: $pack_name"
          exit 1
        fi
        
        echo "压缩包大小: $(du -sh "$pack_name" | cut -f1)"
        echo "::endgroup::"
        
    - name: 准备上传文件
      run: |
        echo "::group::准备上传文件"
        pack_name="${{ env.pack_sgsi }}"
        
        # 创建上传目录
        mkdir -p upload
        mv "$pack_name" upload/
        mv "${pack_name}.sha256" upload/
        
        # 添加恢复说明
        cat <<EOF > upload/RECOVERY_INSTRUCTIONS.txt
        文件完整性校验:
        sha256sum -c ${pack_name}.sha256
        
        如果文件被分割：
        1. 合并所有部分: cat ${pack_name}_part* > $pack_name
        2. 验证完整性: sha256sum -c ${pack_name}.sha256
        EOF
        
        # 检查文件大小
        file_size=$(stat -c%s "upload/$pack_name")
        max_size=1500000000  # 1.5GB
        
        echo "压缩包大小: $(numfmt --to=iec $file_size)"
        
        if [ $file_size -gt $max_size ]; then
          echo "文件过大，进行分割..."
          
          # 计算分割大小 (1.4GB)
          split_size=1400m
          
          # 分割文件
          cd upload
          split -b $split_size -d "$pack_name" "${pack_name}_part"
          rm "$pack_name"  # 删除原始文件，保留分割后的部分
          
          echo "分割完成，上传目录内容:"
          ls -lh
        else
          echo "上传目录内容:"
          ls -lh upload/
        fi
        echo "::endgroup::"
        
    - name: 验证上传文件
      run: |
        echo "::group::验证上传文件"
        if [ -z "$(ls -A upload)" ]; then
          echo "::error::上传目录为空!"
          exit 1
        else
          echo "上传文件列表 ($(ls upload | wc -l) 个文件):"
          ls -lh upload
          
          # 尝试验证校验文件（如果未分割）
          if [ ! -f "upload/${pack_name}_part00" ] && [ -f "upload/${pack_name}.sha256" ]; then
            echo "尝试校验文件完整性..."
            (cd upload && sha256sum -c "${pack_name}.sha256") || {
              echo "::warning::文件校验失败，但继续执行"
            }
          fi
        fi
        echo "::endgroup::"
        
    - name: 发送通知
      if: always()
      run: |
        if [ "${{ job.status }}" == 'success' ]; then
          echo "::notice::构建成功! 版本号: ${{ github.run_number }}"
        else
          echo "::error::构建失败! 详情查看工作流运行"
        fi
          
    - name: 发布SGSI版本
      uses: ncipollo/release-action@v1.8.6
      with:
        artifacts: 'upload/*'
        name: xiaoxinSGSI-ab-Android10-unpack
        tag: xiaoxinSGSI-ab-Android10-${{ github.run_number }}
        token: ${{ secrets.GITHUB_TOKEN }}
