name: build_XiaoxinSGSIs

on:
  watch:
    types: [started]

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: 检出代码
      uses: actions/checkout@v3
      
    - name: 清理工作区
      run: |
        rm -rf SGSI-build-tool || true
        df -h
        
    - name: 读取配置变量
      id: var
      run: |
        echo "rom_url=$(jq -r '.rom_url' sgsi.json)" >> $GITHUB_OUTPUT
        echo "rom_name=$(jq -r '.rom_name' sg极速版.json)" >> $GITHUB_OUTPUT
        echo "pack_sgsi=$(jq -r '.pack_sgsi' sgsi.json)" >> $GITHUB_OUTPUT
        echo "make_miui=$(jq -r '.make_miui' sgsi.json)" >> $GITHUB_OUTPUT
        echo "make_flyme=$(jq -r '.make_flyme' sgsi.json)" >> $GITHUB_OUTPUT
        echo "make_coloros=$(jq -r '.make_coloros' sgsi.json)" >> $GITHUB_OUTPUT
        echo "make_h2os=$(jq -r '.make_h2os' sgsi.json)" >> $GITHUB_OUTPUT
        echo "make_smartisanos=$(jq -r '.make_smartisanos' sgsi.json)" >> $GITHUB_OUTPUT
        echo "make_zui=$(jq -r '.make_zui' sgsi.json)" >> $GITHUB_OUTPUT
        echo "make_super=$(jq -r '.make_super' sgsi.json)" >> $GITHUB_OUTPUT
        
    - name: 下载构建工具
      run: |
        wget -c https://github.com/xiaoxindada/SGSI-build-tool/releases/download/v1.9/SGSI-build-tool.tar
        if [ ! -f SGSI-build-tool.tar ]; then
          echo "::error::工具包下载失败"
          exit 1
        fi
        
    - name: 初始化环境
      run: |
        tar -xf SGSI-build-tool.tar
        
        if [ ! -d "SGSI-build-tool" ]; then
          echo "::error::未找到SGSI-build-tool目录"
          ls -la
          exit 1
        fi
        
        cd SGSI-build-tool
        
        if [ ! -d "10" ]; then
          echo "::error::缺少Android 10构建目录"
          exit 1
        fi
        
        if [ ! -f "10/setup.sh" ]; then
          echo "::error::未找到setup.sh安装脚本"
          exit 1
        fi
        
        cd 10
        
        sed -i '/chown/d' setup.sh
        sed -i '/chmod/d' setup.sh
        
        bash setup.sh
        
        cd ../..
        
    - name: 下载ROM
      run: wget -c ${{ steps.var.outputs.rom_url }} -O SGSI-build-tool/10/tmp/${{ steps.var.outputs.rom_name }}
    
    - name: 构建Super分区SGSI
      if: steps.var.outputs.make_super == 'true'
      run: |
        sed -i 's/SGSI.sh/dynamic_SGSI.sh/g' SGSI-build-tool/10/make.sh
    
    - name: 生成MIUI SGSI
      if: steps.var.outputs.make_miui == 'true'
      run: |
        rm -rf SGSI-build-tool/10/fixbug/fixbug.sh
        mv fix/MIUI.sh SGSI-build-tool/10/fixbug/fixbug.sh
        
    - name: 生成Flyme SGSI
      if: steps.var.outputs.make_flyme == 'true'
      run: |
        rm -rf SGSI-build-tool/10/fixbug/fixbug.sh
        mv fix/Flyme.sh SGSI-build-tool/10/fixbug/fixbug.sh
        
    - name: 生成ColorOS SGSI
      if: steps.var.outputs.make_coloros == 'true'
      run: |
        python3 SGSI-build-tool/10/oppo_ozip/ozipdecrypt.py SGSI-build-tool/10/tmp/${{ steps.var.outputs.rom_name }}
        rm -rf SGSI-build-tool/10/tmp/${{ steps.var.outputs.rom_name }} SGSI-build-tool/10/fixbug/fixbug.sh
        mv fix/ColorOS.sh SGSI-build-tool/10/fixbug/fixbug.sh
        
    - name: 生成H2OS SGSI
      if: steps.var.outputs.make_h2os == 'true'
      run: |
        rm -rf SGSI-build-tool/10/fixbug/fixbug.sh
        mv fix/H2OS.sh SGSI-build-tool/10/fixbug/fixbug.sh
        
    - name: 生成SmartisanOS SGSI
      if: steps.var.outputs.make_smartisanos == 'true'
      run: |
        rm -rf SGSI-build-tool/10/fixbug/fixbug.sh
        mv fix/SmartisanOS.sh SGSI-build-tool/10/fixbug/fixbug.sh
        
    - name: 生成ZUI SGSI
      if: steps.var.outputs.make_zui == 'true'
      run: |
        rm -rf SGSI-build-tool/10/fixbug/fixbug.sh
        mv fix/ZUI.sh SGSI-build-tool/10/fixbug/fixbug.sh
         
    # 修正的关键部分开始
    - name: 生成SGSI镜像
      timeout-minutes: 120
      run: |
        # 清理旧文件
        rm -rf SGSI-build-tool/10/SGSI.sh SGSI-build-tool/10/makeimg.sh SGSI-build-tool/10/bin/mke2fs SGSI-build-tool/10/bin/e2fsdroid SGSI-build-tool/10/dynamic_SGSI.sh SGSI-build-tool/10/oppo.sh SGSI-build-tool/10/make.sh
        
        # 将构建脚本移动到SGSI-build-tool/10目录
        mv make/* SGSI-build-tool/10/
        
        # 将工具文件移动到SGSI-build-tool/10/bin目录
        mv bin/* SGSI-build-tool/10/bin/
        
        # 执行构建
        cd SGSI-build-tool/10
        bash make.sh
    # 修正的关键部分结束
        
    - name: 打包补丁文件
      run: |
        zip -r Patch1.zip Patch/Patch1/*
        zip -r Patch2.zip Patch/Patch2/*
        zip -r Patch3.zip Patch/Patch3/*
        mv Patch1.zip Patch2.zip Patch3.zip SGSI-build-tool/10/SGSI/

    - name: 压缩SGSI成果物
      run: |
        mkdir -p upload
        zip -r ${{ steps.var.outputs.pack_sgsi }} SGSI-build-tool/10/SGSI/*
        if [[ $(du -sb ${{ steps.var.outputs.pack_sgsi }} | awk '{print $1}') -gt 2097152000 ]];then
              echo "::notice::文件过大，进行分割打包..."
              tar -cpzf - ${{ steps.var.outputs.pack_sgsi }} | split -d -b 1024m - upload/${{ steps.var.outputs.pack_sgsi }}
          else
              mv ${{ steps.var.outputs.pack_sgsi }} upload/
          fi
          ls "upload"
          
    - name: 发布SGSI版本
      uses: ncipollo/release-action@v1.8.6
      with:
        artifacts: upload/*
        name: xiaoxinSGSI-ab-Android10-unpack
        tag: xiaoxinSGSI-ab-Android10-${{ github.run_number }}
        token: ${{ secrets.GITHUB_TOKEN }}
