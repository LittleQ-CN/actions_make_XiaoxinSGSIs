name: build_XiaoxinSGSIs

on:
  watch:
    types: [started]

env:
  BUILD_DIR: SGSI-build-tool/10
  ROM_DIR: tmp
  TOOLKIT_URL: https://github.com/xiaoxindada/SGSI-build-tool/releases/download/v1.9/SGSI-build-tool.tar

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id
    timeout-minutes: 180
    
    steps:
    - name: 清理工作区
      run: |
        echo "🔄 清理工作区..."
        rm -rf SGSI-build-tool upload || true
        df -h
        echo "✅ 工作区清理完成"
      
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 加载配置
      id: config
      run: |
        echo "📝 加载配置文件..."
        [ ! -f "sgsi.json" ] && { echo "::error::未找到sgsi.json配置文件"; exit 1; }
        
        # 配置项定义
        declare -A CONFIG_MAP=(
          [rom_url]=required
          [rom_name]=required
          [pack_sgsi]=optional
          [make_miui]=required
          [make_flyme]=required
          [make_coloros]=required
          [make_h2os]=required
          [make_smartisanos]=required
          [make_zui]=required
          [make_super]=required
          [upload_artifact]=required
          [upload_wetransfer]=required
        )
        
        # 解析配置
        for key in "${!CONFIG_MAP[@]}"; do
          value=$(jq -r ".$key" sgsi.json)
          required="${CONFIG_MAP[$key]}"
          
          if [ "$value" = "null" ]; then
            if [ "$required" = "required" ]; then
              echo "::error::配置项 $key 缺失于sgsi.json"; exit 1
            else
              continue
            fi
          fi
          
          if [ "$key" = "uploa_wetransfer" ]; then
            echo "upload_transfer=$value" >> $GITHUB_ENV
          else
            echo "$key=$value" >> $GITHUB_ENV
          fi
        done
        
        # 确定输出文件名
        pack_name=$(jq -r '.pack_sgsi' sgsi.json)
        if [ -n "$pack_name" ] && [ "$pack_name" != "null" ]; then
          echo "OUTPUT_FILE=$pack_name" >> $GITHUB_ENV
        else
          rom_name=$(jq -r '.rom_name' sgsi.json)
          echo "OUTPUT_FILE=XiaoxinSGSI-${rom_name}-$(date +%m%d).7z" >> $GITHUB_ENV
        fi
        echo "✅ 配置加载完成"
        
    - name: 获取工具箱
      run: |
        echo "📦 下载工具箱..."
        mkdir -p $BUILD_DIR/SGSI
        
        echo "🚀 优先使用axel下载..."
        axel -n 8 -U "SGSI-Builder" --alternate -o SGSI-build-tool.tar "$TOOLKIT_URL" && echo "✅ axel下载成功" || {
          echo "⚠️ axel下载失败，尝试wget..."
          wget --progress=bar:force:noscroll -O SGSI-build-tool.tar "$TOOLKIT_URL" && echo "✅ wget下载成功" || {
            echo "⚠️ wget下载失败，尝试curl..."
            curl -L -o SGSI-build-tool.tar "$TOOLKIT_URL" && echo "✅ curl下载成功" || {
              echo "❌ 所有下载方式均失败"; exit 1
            }
          }
        }
        
        echo "📂 解压工具箱..."
        tar -xf SGSI-build-tool.tar
        [ ! -d "$BUILD_DIR" ] && { echo "::error::工具箱解压失败"; exit 1; }
        echo "✅ 工具箱准备就绪"
        
    - name: 下载ROM
      run: |
        echo "⬇️ 下载ROM文件..."
        mkdir -p $ROM_DIR
        
        echo "🚀 优先使用axel下载..."
        axel -n 8 -U "SGSI-Builder" --alternate -o "$ROM_DIR/$rom_name" "$rom_url" && echo "✅ axel下载成功" || {
          echo "⚠️ axel下载失败，尝试wget..."
          wget --progress=bar:force:noscroll -c -O "$ROM_DIR/$rom_name" "$rom_url" && echo "✅ wget下载成功" || {
            echo "⚠️ wget下载失败，尝试curl..."
            curl -C - -L -o "$ROM_DIR/$rom_name" "$rom_url" && echo "✅ curl下载成功" || {
              echo "❌ 所有下载方式均失败"; exit 1
            }
          }
        }
        
        ROM_SIZE=$(du -sh "$ROM_DIR/$rom_name" | awk '{print $1}')
        echo "✅ ROM下载完成 (大小: $ROM_SIZE)"
        
    - name: 处理ColorOS
      if: env.make_coloros == 'true'
      run: |
        echo "🎨 处理ColorOS解密..."
        cd $BUILD_DIR
        python3 oppo_ozip/ozipdecrypt.py "../$ROM_DIR/$rom_name" || {
          echo "::warning::ColorOS解密失败，可能不是加密文件"
        }
        echo "✅ ColorOS处理完成"
        
    - name: 准备系统镜像
      run: |
        echo "🖼️ 准备系统镜像..."
        cd $ROM_DIR
        
        # 解压ROM文件
        unzip -q "$rom_name" || true
        
        # 处理不同格式的system镜像
        if [ -f "system.img" ]; then
          echo "🔍 找到system.img"
        elif [ -f "system.new.dat.br" ]; then
          echo "🧪 解压brotli格式..."
          brotli -d system.new.dat.br
          rm -f system.new.dat.br
        elif [ -f "system.new.dat.xz" ]; then
          echo "🧪 解压xz格式..."
          xz -d system.new.dat.xz
        fi
        
        # 转换dat格式到img
        if [ -f "system.new.dat" ] && [ -f "system.transfer.list" ]; then
          echo "🔧 转换dat到img..."
          sdat2img system.transfer.list system.new.dat system.img
          rm -f system.new.dat system.transfer.list
        fi
        
        # 检查镜像是否存在
        [ -f "system.img" ] || { echo "::error::未找到有效的system.img"; exit 1; }
        echo "✅ 系统镜像准备完成"
        
    - name: 提取版本信息
      run: |
        echo "📊 提取版本信息..."
        cd $ROM_DIR
        
        # 尝试挂载系统镜像
        mkdir -p system_mount
        sudo mount -t ext4 -o ro,loop system.img system_mount 2>/dev/null || true
        
        # 查找build.prop文件
        if [ -f "system_mount/system/build.prop" ]; then
          BUILD_PROPS="system_mount/system/build.prop"
        elif [ -f "system_mount/build.prop" ]; then
          BUILD_PROPS="system_mount/build.prop"
        fi
        
        # 提取版本信息
        if [ -n "$BUILD_PROPS" ]; then
          ROM_VERSION=$(grep -m1 "ro.build.version.incremental" "$BUILD_PROPS" | cut -d'=' -f2)
          ANDROID_VERSION=$(grep -m1 "ro.build.version.release" "$BUILD_PROPS" | cut -d'=' -f2)
          SECURITY_PATCH=$(grep -m1 "ro.build.version.security_patch" "$BUILD_PROPS" | cut -d'=' -f2)
          echo "rom_version=$ROM_VERSION" >> $GITHUB_ENV
          echo "android_version=$ANDROID_VERSION" >> $GITHUB_ENV
          echo "security_patch=${SECURITY_PATCH:-未知}" >> $GITHUB_ENV
        fi
        
        # 清理挂载点
        sudo umount system_mount 2>/dev/null || true
        rm -rf system_mount
        echo "✅ 版本信息提取完成"
        
    - name: 配置构建选项
      run: |
        echo "⚙️ 配置构建选项..."
        cd $BUILD_DIR
        
        # 配置super模式
        if [ "$make_super" = 'true' ]; then
          sed -i 's/SGSI.sh/dynamic_SGSI.sh/g' make.sh
          echo "🔄 启用super分区模式"
        fi
        
        # 应用品牌特定修复
        BRANDS=("MIUI" "Flyme" "ColorOS" "H2OS" "SmartisanOS" "ZUI")
        KEYS=("make_miui" "make_flyme" "make_coloros" "make_h2os" "make_smartisanos" "make_zui")
        
        for i in ${!BRANDS[@]}; do
          key="${KEYS[$i]}"
          brand="${BRANDS[$i]}"
          
          if [ "${!key}" = 'true' ] && [ -f "../fix/${brand}.sh" ]; then
            cp -f "../fix/${brand}.sh" fixbug/fixbug.sh
            echo "brand=$brand" >> $GITHUB_ENV
            echo "🔧 应用${brand}修复"
            break
          fi
        done
        
        # 确保修复脚本存在
        [ -f "fixbug/fixbug.sh" ] || {
          echo "# 基础修复脚本" > fixbug/fixbug.sh
          chmod +x fixbug/fixbug.sh
          echo "brand=通用" >> $GITHUB_ENV
          echo "⚠️ 使用基础修复脚本"
        }
        
        echo "✅ 构建配置完成"
        
    - name: 执行构建
      run: |
        echo "🏗️ 开始构建SGSI..."
        cd $BUILD_DIR
        time bash make.sh
        [ ! -d "out" ] && { echo "::error::构建失败，未找到输出目录"; exit 1; }
        echo "✅ SGSI构建完成"
        
    - name: 打包成果
      run: |
        echo "📦 打包成果物..."
        cd $BUILD_DIR
        
        # 创建版本信息文件
        echo "构建信息:" > version-info.txt
        echo "设备: $rom_name" >> version-info.txt
        echo "品牌: ${brand:-通用}" >> version-info.txt
        echo "Android版本: ${android_version:-未知}" >> version-info.txt
        echo "安全补丁: ${security_patch:-未知}" >> version-info.txt
        
        # 创建压缩包
        7za a -t7z -mx=9 "$OUTPUT_FILE" SGSI/* version-info.txt
        [ ! -f "$OUTPUT_FILE" ] && { echo "::error::打包失败"; exit 1; }
        
        OUTPUT_SIZE=$(du -sh "$OUTPUT_FILE" | awk '{print $1}')
        echo "✅ 打包完成 (大小: $OUTPUT_SIZE)"
        
    - name: 上传到WeTransfer
      if: env.upload_transfer == 'true'
      run: |
        echo "☁️ 上传到WeTransfer..."
        cd $BUILD_DIR
        curl -sL https://git.io/file-transfer | sh
        ./transfer wet "$OUTPUT_FILE" | tee transfer.log
        DOWNLOAD_URL=$(grep 'Download Link:' transfer.log | cut -d' ' -f3-)
        
        if [ -n "$DOWNLOAD_URL" ]; then
          echo "##   SGSI下载" >> $GITHUB_STEP_SUMMARY
          echo "**文件**: $OUTPUT_FILE" >> $GITHUB_STEP_SUMMARY
          echo "**大小**: $OUTPUT_SIZE" >> $GITHUB_STEP_SUMMARY
          echo "**下载**: [WeTransfer]($DOWNLOAD_URL)" >> $GITHUB_STEP_SUMMARY
          echo "✅ 上传成功"
        else
          echo "::error::WeTransfer上传失败"
        fi
        
    - name: 上传制品
      if: env.upload_artifact == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: XiaoxinSGSI
        path: ${{ env.BUILD_DIR }}/${{ env.OUTPUT_FILE }}
        
    - name: 最终清理
      run: |
        echo "🧹 最终清理..."
        rm -rf $ROM_DIR/* $BUILD_DIR/SGSI
        df -h
        echo "✅ 清理完成"
