name: build_XiaoxinSGSIs

on:
  watch:
    types: [started]

env:
  BUILD_DIR: SGSI-build-tool/10
  ROM_DIR: tmp
  TOOLKIT_URL: https://github.com/xiaoxindada/SGSI-build-tool/releases/download/v1.9/SGSI-build-tool.tar
  MAX_LOG_LINES: 1000

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 180
    
    steps:
    - name: 清理工作区
      run: |
        echo "🔄 清理工作区..."
        rm -rf SGSI-build-tool upload || true
        df -h
        
    - name: 安装必要工具
      run: |
        echo "🛠️ 安装构建工具..."
        sudo apt-get update
        sudo apt-get install -y axel brotli xz-utils android-sdk-libsparse-utils \
          simg2img img2simg p7zip-full jq tree e2fsprogs cpio debugfs numfmt
        
    - name: 加载配置
      run: |
        echo "📝 加载配置文件..."
        [ ! -f "sgsi.json" ] && echo "::error::sgsi.json文件缺失" && exit 1
        
        # 读取所有配置选项
        ROM_URL=$(jq -r '.rom_url' sgsi.json)
        ROM_NAME=$(jq -r '.rom_name' sgsi.json)
        PACK_SGSI=$(jq -r '.pack_sgsi' sgsi.json)
        MAKE_MIUI=$(jq -r '.make_miui' sgsi.json)
        MAKE_FLYME=$(jq -r '.make_flyme' sgsi.json)
        MAKE_COLOROS=$(jq -r '.make_coloros' sgsi.json)
        MAKE_H2OS=$(jq -r '.make_h2os' sgsi.json)
        MAKE_SMARTISANOS=$(jq -r '.make_smartisanos' sgsi.json)
        MAKE_ZUI=$(jq -r '.make_zui' sgsi.json)
        MAKE_SUPER=$(jq -r '.make_super' sgsi.json)
        UPLOAD_ARTIFACT=$(jq -r '.upload_artifact' sgsi.json)
        UPLOAD_WETRANSFER=$(jq -r '.upload_wetransfer' sgsi.json)
        
        # 设置环境变量
        echo "ROM_URL=$ROM_URL" >> $GITHUB_ENV
        echo "ROM_NAME=$ROM_NAME" >> $GITHUB_ENV
        echo "PACK_SGSI=$PACK_SGSI" >> $GITHUB_ENV
        echo "MAKE_MIUI=$MAKE_MIUI" >> $GITHUB_ENV
        echo "MAKE_FLYME=$MAKE_FLYME" >> $GITHUB_ENV
        echo "MAKE_COLOROS=$MAKE_COLOROS" >> $GITHUB_ENV
        echo "MAKE_H2OS=$MAKE_H2OS" >> $GITHUB_ENV
        echo "MAKE_SMARTISANOS=$MAKE_SMARTISANOS" >> $GITHUB_ENV
        echo "MAKE_ZUI=$MAKE_ZUI" >> $GITHUB_ENV
        echo "MAKE_SUPER=$MAKE_SUPER" >> $GITHUB_ENV
        echo "UPLOAD_ARTIFACT=$UPLOAD_ARTIFACT" >> $GITHUB_ENV
        echo "UPLOAD_WETRANSFER=$UPLOAD_WETRANSFER" >> $GITHUB_ENV
        
        # 设置输出文件名
        if [ "$PACK_SGSI" != "null" ]; then
          OUTPUT_FILE="${PACK_SGSI}"
        else
          OUTPUT_FILE="XiaoxinSGSI-${ROM_NAME}-$(date +%m%d).7z"
        fi
        echo "OUTPUT_FILE=$OUTPUT_FILE" >> $GITHUB_ENV

    - name: 获取工具箱
      run: |
        echo "📦 下载工具箱..."
        mkdir -p $BUILD_DIR/SGSI
        
        # 带进度下载
        curl -# -L "$TOOLKIT_URL" -o toolkit.tar | \
          while IFS= read -r line; do
            if [[ $line =~ ([0-9]{1,3})% ]]; then
              percent="${BASH_REMATCH[1]}"
              printf "[工具箱]  ▏%3s%% 下载中...\n" "$percent"
            fi
          done
        
        # 解压工具箱
        echo "📂 解压工具箱..."
        tar -xf toolkit.tar

    - name: 下载ROM
      run: |
        echo "⬇️ 下载ROM文件..."
        mkdir -p $ROM_DIR
        cd $ROM_DIR
        
        # 带进度下载
        curl -# -L "$ROM_URL" -o "$ROM_NAME" | \
          while IFS= read -r line; do
            if [[ $line =~ ([0-9]{1,3})% ]]; then
              percent="${BASH_REMATCH[1]}"
              printf "[ROM]  ▏%3s%% 下载中...\n" "$percent"
            fi
          done

    - name: 准备系统镜像
      run: |
        echo "🖼️ 准备系统镜像..."
        cd $ROM_DIR
        
        # 解压ROM带实时进度
        echo "[系统] 解压ROM文件..."
        7z x "$ROM_NAME" -y > unpack.log 2>&1
        
        # 处理不同格式
        if [ -f "system.new.dat" ]; then
          echo "[系统] 转换dat格式..."
          curl -sLO https://raw.githubusercontent.com/xpirt/sdat2img/master/sdat2img.py
          python3 sdat2img.py system.transfer.list system.new.dat system.img > convert.log 2>&1
        elif [ -f "super.img" ]; then
          echo "[系统] 解包super分区..."
          simg2img super.img super_raw.img >> unpack.log 2>&1
          lpunpack super_raw.img >> unpack.log 2>&1
        fi
        
        # 最终检查
        if [ ! -f "system.img" ]; then
          echo "::error::未找到有效的system.img"
          echo "=== 解压日志最后20行 ==="
          tail -n 20 unpack.log
          [ -f "convert.log" ] && echo "=== 转换日志最后20行 ===" && tail -n 20 convert.log
          exit 1
        fi

    - name: 提取版本信息
      run: |
        echo "📊 提取版本信息..."
        cd $ROM_DIR
        
        # 尝试提取build.prop
        debugfs -R "cat /system/build.prop" system.img > build.prop 2>/dev/null || true
        
        if [ ! -s "build.prop" ]; then
          7z x system.img -oextracted >/dev/null 2>&1
          find extracted -name build.prop ! -empty -exec cat {} + > build.prop
        fi
        
        if [ -s "build.prop" ]; then
          ROM_VERSION=$(grep "ro.build.version.incremental" build.prop | cut -d= -f2)
          ANDROID_VERSION=$(grep "ro.build.version.release" build.prop | cut -d= -f2)
          
          echo "ROM版本: ${ROM_VERSION:-未知}"
          echo "Android版本: ${ANDROID_VERSION:-未知}"
          echo "ANDROID_VERSION=$ANDROID_VERSION" >> $GITHUB_ENV
        else
          echo "::warning::未找到build.prop文件"
        fi

    - name: 配置构建选项
      run: |
        echo "⚙️ 配置构建选项..."
        cd $BUILD_DIR
        
        # 跳过权限更改
        sed -i 's/chown -R root:root/# chown -R root:root/g' make.sh
        sed -i 's/chmod -R 777/# chmod -R 777/g' make.sh
        
        # 禁用交互
        sed -i 's/read pause/# read pause/g' make.sh
        
        # 配置super模式
        if [ "$MAKE_SUPER" = 'true' ]; then
          sed -i 's/SGSI.sh/dynamic_SGSI.sh/g' make.sh
          echo "🔄 启用super分区模式"
        fi
        
        # 配置MIUI构建
        if [ "$MAKE_MIUI" = 'true' ]; then
          sed -i 's/SGSI.sh/make_miui.sh/g' make.sh
          echo "🔄 启用MIUI构建模式"
        fi
        
        # 配置Flyme构建
        if [ "$MAKE_FLYME" = 'true' ]; then
          sed -i 's/SGSI.sh/make_flyme.sh/g' make.sh
          echo "🔄 启用Flyme构建模式"
        fi
        
        # 配置ColorOS构建
        if [ "$MAKE_COLOROS" = 'true' ]; then
          sed -i 's/SGSI.sh/make_coloros.sh/g' make.sh
          echo "🔄 启用ColorOS构建模式"
        fi
        
        # 配置H2OS构建
        if [ "$MAKE_H2OS" = 'true' ]; then
          sed -i 's/SGSI.sh/make_h2os.sh/g' make.sh
          echo "🔄 启用H2OS构建模式"
        fi
        
        # 配置SmartisanOS构建
        if [ "$MAKE_SMARTISANOS" = 'true' ]; then
          sed -i 's/SGSI.sh/make_smartisan.sh/g' make.sh
          echo "🔄 启用SmartisanOS构建模式"
        fi
        
        # 配置ZUI构建
        if [ "$MAKE_ZUI" = 'true' ]; then
          sed -i 's/SGSI.sh/make_zui.sh/g' make.sh
          echo "🔄 启用ZUI构建模式"
        fi

    - name: 执行构建
      run: |
        echo "🏗️ 开始构建SGSI..."
        cd $BUILD_DIR
        
        # 带进度监控的构建
        bash make.sh 2>&1 | tee build.log | while IFS= read -r line; do
          # 关键错误标记
          if echo "$line" | grep -qi "error\|fail\|cannot"; then
            echo "::error::❌ $line"
          # 进度显示
          elif [[ "$line" =~ ([0-9]{1,3})% ]]; then
            percent="${BASH_REMATCH[1]}"
            echo "▏${percent}% 处理中..."
          # 重要里程碑
          elif echo "$line" | grep -qiE 'complete|done|success'; then
            echo "✅ $line"
          fi
        done
        
        # 检查结果
        if [ ! -d "out" ] && [ ! -d "SGSI" ]; then
          echo "::error::构建失败，未找到输出目录"
          echo "=== 构建日志最后20行 ==="
          tail -n 20 build.log
          exit 1
        fi

    - name: 打包成果
      run: |
        echo "📦 打包成果物..."
        cd $BUILD_DIR
        
        # 带进度压缩
        7za a -t7z -mx=9 "$OUTPUT_FILE" SGSI/* out/* > package.log 2>&1
        
        if [ -f "$OUTPUT_FILE" ]; then
          OUTPUT_SIZE=$(numfmt --to=iec-i --suffix=B $(stat -c %s "$OUTPUT_FILE") | sed 's/ /_/g')
          echo "✅ 打包完成 | 大小: $OUTPUT_SIZE"
        else
          echo "::error::打包失败"
          echo "=== 打包日志最后20行 ==="
          tail -n 20 package.log
          exit 1
        fi

    - name: 上传制品
      run: |
        echo "⬆️ 上传制品..."
        cd $BUILD_DIR
        
        # 准备上传
        if [ "$UPLOAD_ARTIFACT" = 'true' ]; then
          # 使用配置中指定的打包名称
          FINAL_FILE="$OUTPUT_FILE"
          
          # 创建版本信息
          echo "设备: $ROM_NAME" > version-info.txt
          echo "Android版本: ${ANDROID_VERSION:-未知}" >> version-info.txt
          echo "构建日期: $(date +"%Y-%m-%d")" >> version-info.txt
          
          echo "制品 $FINAL_FILE 已准备上传"
        fi

    - name: 上传日志
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          ${{ env.ROM_DIR }}/unpack.log
          ${{ env.ROM_DIR }}/convert.log
          ${{ env.ROM_DIR }}/build.prop
          ${{ env.BUILD_DIR }}/build.log
          ${{ env.BUILD_DIR }}/package.log

    - name: 上传WeTransfer
      if: env.UPLOAD_WETRANSFER == 'true'
      run: |
        echo "☁️ 上传到WeTransfer..."
        cd $BUILD_DIR
        
        # 下载传输工具
        curl -sL https://git.io/file-transfer | sh
        
        # 带进度上传
        ./transfer wet "$OUTPUT_FILE" | while IFS= read -r line; do
          if [[ "$line" =~ ([0-9]{1,3})% ]]; then
            percent="${BASH_REMATCH[1]}"
            printf "[上传] ▏%3s%% 上传中...\n" "$percent"
          elif [[ "$line" =~ 'Download Link' ]]; then
            DOWNLOAD_LINK=$(echo "$line" | cut -d: -f2- | xargs)
            echo "## WeTransfer下载地址" >> $GITHUB_STEP_SUMMARY
            echo "$DOWNLOAD_LINK" >> $GITHUB_STEP_SUMMARY
          fi
        done

    - name: 清理工作区
      run: |
        echo "🧹 最终清理..."
        rm -rf $ROM_DIR $BUILD_DIR/SGSI $BUILD_DIR/out
        df -h
        echo "✅ 构建流程完成"
