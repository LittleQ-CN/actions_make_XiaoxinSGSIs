name: build_XiaoxinSGSIs

on:
  watch:
    types: [started]

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: 检出代码库
      uses: actions/checkout@v3
      
    - name: 清理工作区
      run: |
        rm -rf SGSI-build-tool upload || true
        df -h
        
    - name: 读取配置文件
      id: var
      run: |
        # 从sgsi.json读取配置
        rom_url=$(jq -r '.rom_url' sgsi.json)
        rom_name=$(jq -r '.rom_name' sgsi.json)
        pack_sgsi=$(jq -r '.pack_sgsi' sgsi.json)
        make_miui=$(jq -r '.make_miui' sgsi.json)
        make_flyme=$(jq -r '.make_flyme' sgsi.json)
        make_coloros=$(jq -r '.make_coloros' sgsi.json)
        make_h2os=$(jq -r '.make_h2os' sgsi.json)
        make_smartisanos=$(jq -r '.make_smartisanos' sgsi.json)
        make_zui=$(jq -r '.make_zui' sgsi.json)
        make_super=$(jq -r '.make_super' sgsi.json)
        
        # 设置环境变量
        echo "rom_url=$rom_url" >> $GITHUB_ENV
        echo "rom_name=$rom_name" >> $GITHUB_ENV
        echo "pack_sgsi=$pack_sgsi" >> $GITHUB_ENV
        echo "make_miui=$make_miui" >> $GITHUB_ENV
        echo "make_flyme=$make_flyme" >> $GITHUB_ENV
        echo "make_coloros=$make_coloros" >> $GITHUB_ENV
        echo "make_h2os=$make_h2os" >> $GITHUB_ENV
        echo "make_smartisanos=$make_smartisanos" >> $GITHUB_ENV
        echo "make_zui=$make_zui" >> $GITHUB_ENV
        echo "make_super=$make_super" >> $GITHUB_ENV
        
    - name: 下载构建工具
      run: |
        # 使用curl静默下载
        if command -v curl &> /dev/null; then
          curl -sSL -o SGSI-build-tool.tar https://github.com/xiaoxindada/SGSI-build-tool/releases/download/v1.9/SGSI-build-tool.tar
        else
          wget -q -c https://github.com/xiaoxindada/SGSI-build-tool/releases/download/v1.9/SGSI-build-tool.tar
        fi
        
        if [ ! -f SGSI-build-tool.tar ]; then
          echo "::error::工具包下载失败"
          exit 1
        fi
        
    - name: 设置构建环境
      run: |
        tar -xf SGSI-build-tool.tar --no-same-owner --no-overwrite-dir
        
        if [ ! -d "SGSI-build-tool" ]; then
          echo "::error::未找到SGSI-build-tool目录"
          ls -la
          exit 1
        fi
        
        # 移除权限相关的命令
        find SGSI-build-tool -type f -exec sed -i '/chown/d; /sudo/d' {} \;
        
        # 设置执行权限
        find SGSI-build-tool -type f -name "*.sh" -exec chmod +x {} \;
        chmod +x SGSI-build-tool/10/bin/*
        find SGSI-build-tool -type d -exec chmod 755 {} \;
        
        # 初始化环境
        cd SGSI-build-tool/10
        ./setup.sh || true
        cd ../..
        
    - name: 下载ROM文件 (多方式静默下载)
      run: |
        mkdir -p SGSI-build-tool/10/tmp
        rom_path="SGSI-build-tool/10/tmp/${{ env.rom_name }}"
        
        echo "正在下载ROM文件: ${{ env.rom_name }}"
        
        # 方法1: 使用curl静默下载
        if command -v curl &> /dev/null; then
          echo "使用curl下载..."
          curl -L -k -sS -C - "${{ env.rom_url }}" -o "$rom_path" && download_success=true || curl_ret=$?
        fi
        
        # 方法2: 如果curl失败或未安装，使用wget
        if [ ! -f "$rom_path" ] && command -v wget &> /dev/null; then
          echo "使用wget下载..."
          wget -q -c "${{ env.rom_url }}" -O "$rom_path" && download_success=true || wget_ret=$?
        fi
        
        # 检查是否下载成功
        if [ ! -f "$rom_path" ]; then
          echo "::error::ROM文件下载失败"
          echo "curl退出码: ${curl_ret:-未使用}"
          echo "wget退出码: ${wget_ret:-未使用}"
          exit 1
        else
          echo "ROM文件下载成功"
          echo "文件大小: $(du -sh "$rom_path" | cut -f1)"
          echo "下载方式: ${download_success:+${curl_ret+curl}${wget_ret+wget}}"
        fi
    
    - name: 启用Super分区支持
      if: ${{ env.make_super == 'true' }}
      run: sed -i 's/SGSI.sh/dynamic_SGSI.sh/g' SGSI-build-tool/10/make.sh
    
    - name: 生成MIUI镜像
      if: ${{ env.make_miui == 'true' }}
      run: |
        rm -f SGSI-build-tool/10/fixbug/fixbug.sh
        mv fix/MIUI.sh SGSI-build-tool/10/fixbug/fixbug.sh
        chmod +x SGSI-build-tool/10/fixbug/fixbug.sh
        
    - name: 生成Flyme镜像
      if: ${{ env.make_flyme == 'true' }}
      run: |
        rm -f SGSI-build-tool/10/fixbug/fixbug.sh
        mv fix/Flyme.sh SGSI-build-tool/10/fixbug/fixbug.sh
        chmod +x SGSI-build-tool/10/fixbug/fixbug.sh
        
    - name: 生成ColorOS镜像
      if: ${{ env.make_coloros == 'true' }}
      run: |
        python3 SGSI-build-tool/10/oppo_ozip/ozipdecrypt.py SGSI-build-tool/10/tmp/${{ env.rom_name }}
        rm -f SGSI-build-tool/10/tmp/${{ env.rom_name }} SGSI-build-tool/10/fixbug/fixbug.sh
        mv fix/ColorOS.sh SGSI-build-tool/10/fixbug/fixbug.sh
        chmod +x SGSI-build-tool/10/fixbug/fixbug.sh
        
    - name: 生成HydrogenOS镜像
      if: ${{ env.make_h2os == 'true' }}
      run: |
        rm -f SGSI-build-tool/10/fixbug/fixbug.sh
        mv fix/H2OS.sh SGSI-build-tool/10/fixbug/fixbug.sh
        chmod +x SGSI-build-tool/10/fixbug/fixbug.sh
        
    - name: 生成SmartisanOS镜像
      if: ${{ env.make_smartisanos == 'true' }}
      run: |
        rm -f SGSI-build-tool/10/fixbug/fixbug.sh
        mv fix/SmartisanOS.sh SGSI-build-tool/10/fixbug/fixbug.sh
        chmod +x SGSI-build-tool/10/fixbug/fixbug.sh
        
    - name: 生成ZUI镜像
      if: ${{ env.make_zui == 'true' }}
      run: |
        rm -f SGSI-build-tool/10/fixbug/fixbug.sh
        mv fix/ZUI.sh SGSI-build-tool/10/fixbug/fixbug.sh
        chmod +x SGSI-build-tool/10/fixbug/fixbug.sh
         
    - name: 构建SGSI系统镜像
      timeout-minutes: 120
      run: |
        # 准备构建环境
        rm -f SGSI-build-tool/10/{SGSI.sh,makeimg.sh,dynamic_SGSI.sh,oppo.sh}
        mv make/* SGSI-build-tool/10/
        mv bin/* SGSI-build-tool/10/bin/
        
        # 移除权限相关命令
        find SGSI-build-tool/10 -type f -exec sed -i '/chown/d' {} \;
        
        # 设置执行权限
        find SGSI-build-tool/10 -name "*.sh" -exec chmod +x {} \;
        chmod +x SGSI-build-tool/10/bin/*
        
        # 创建输出目录结构
        cd SGSI-build-tool/10
        mkdir -p out/{system,config}
        mkdir -p out/system/{bin,etc,lib,usr,framework,app,priv-app,vendor}
        
        # 创建默认配置文件
        echo -e "# 默认文件上下文\n/system(/.*)? u:object_r:system_file:s0\n/vendor(/.*)? u:object_r:vendor_file:s0" > out/config/system_file_contexts
        echo -e "# 默认文件系统配置\n/system 0 0 755\n/vendor 0 0 755" > out/config/system_fs_config
        
        # 执行构建并处理sdat2img输出
        echo "::group::构建日志"
        build_output=$(./make.sh 2>&1 || true)
        echo "$build_output"
        
        # 检测Android版本信息 - 专注ext4格式转换
        if echo "$build_output" | grep -q "Android Nougat 7.x / Oreo 8.x detected"; then
          echo "::notice::检测到Android 7.x/8.x ROM（ext4格式），正在转换系统镜像..."
        fi
        
        # 检查转换错误
        if echo "$build_output" | grep -q "sdat2img: failed"; then
          echo "::error::sdat2img转换失败"
          exit 1
        fi
        echo "::endgroup::"
        
        # 验证构建结果
        if [ ! -f "out/system.img" ]; then
          echo "::warning::system.img未生成，尝试手动创建"
          
          if [ ! -d "out/system" ]; then
            echo "::error::out/system目录不存在，无法创建镜像"
            exit 1
          fi
          
          # 计算镜像大小
          size_kb=$(du -sk out/system/ | cut -f1)
          img_size_kb=$((size_kb * 130 / 100))  # +30%
          img_size_mb=$((img_size_kb / 1024))
          [ $img_size_mb -lt 512 ] && img_size_mb=512
          
          echo "创建 ${img_size_mb}MB 镜像"
          ./bin/mke2fs -t ext4 -L /system -b 4096 -m 0 out/system.img ${img_size_mb}M
          ./bin/e2fsdroid -e -T 1230768000 -C out/config/system_fs_config -S out/config/system_file_contexts -f out/system/ -a /system out/system.img
          
          if [ ! -f "out/system.img" ]; then
            echo "::error::无法生成system.img"
            exit 1
          fi
        fi
        
        # 移动生成的文件
        mkdir -p SGSI
        mv out/system.img SGSI/
        cd ../../../
        
    - name: 打包系统补丁
      run: |
        for i in 1 2 3; do
          if [ -d "Patch/Patch$i" ]; then
            echo "打包补丁 Patch$i"
            zip -r -0 "Patch$i.zip" "Patch/Patch$i"/*
            mkdir -p SGSI-build-tool/10/SGSI
            mv "Patch$i.zip" SGSI-build-tool/10/SGSI/
          fi
        done

    - name: 创建最终包
      run: |
        echo "::group::创建最终包"
        # 确保SGSI目录存在
        mkdir -p SGSI-build-tool/10/SGSI
        
        # 进入SGSI目录
        cd SGSI-build-tool/10/SGSI
        
        # 检查目录内容
        echo "SGSI目录内容:"
        ls -lh
        
        # 确保有文件存在
        if [ -z "$(ls -A .)" ]; then
          echo "::error::SGSI目录为空，无法创建压缩包"
          exit 1
        fi
        
        # 创建压缩包
        pack_name="${{ env.pack_sgsi }}"
        echo "创建压缩包: $pack_name"
        zip -r -0 "../../../../$pack_name" .
        
        # 检查压缩包
        if [ ! -f "../../../../$pack_name" ]; then
          echo "::error::压缩包创建失败: $pack_name"
          exit 1
        fi
        
        echo "压缩包大小: $(du -sh "../../../../$pack_name" | cut -f1)"
        echo "::endgroup::"
        
        # 返回工作目录
        cd ../../../../
        
    - name: 准备上传文件
      run: |
        echo "::group::准备上传文件"
        pack_name="${{ env.pack_sgsi }}"
        
        # 确保压缩包存在
        if [ ! -f "$pack_name" ]; then
          echo "::error::最终压缩包不存在: $pack_name"
          exit 1
        fi
        
        # 创建上传目录
        mkdir -p upload
        echo "上传目录路径: $(pwd)/upload"
        
        # 检查文件大小
        file_size=$(stat -c%s "$pack_name")
        max_size=1500000000  # 1.5GB
        
        echo "压缩包大小: $(numfmt --to=iec $file_size)"
        
        if [ $file_size -gt $max_size ]; then
          echo "文件过大，进行分割..."
          
          # 计算分割大小 (1.4GB)
          split_size=1400m
          
          # 分割文件
          split -b $split_size -d "$pack_name" "upload/${pack_name}_part"
          
          echo "分割完成，上传目录内容:"
          ls -lh upload/
        else
          echo "移动单个压缩包到upload目录"
          mv -v "$pack_name" upload/
          
          echo "上传目录内容:"
          ls -lh upload/
        fi
        echo "::endgroup::"
        
    - name: 验证上传文件
      run: |
        echo "::group::验证上传文件"
        # 检查上传目录是否存在
        if [ ! -d "upload" ]; then
          echo "::error::上传目录不存在"
          exit 1
        fi
        
        # 检查是否有文件
        if [ -z "$(ls -A upload)" ]; then
          echo "::error::上传目录为空!"
          exit 1
        else
          echo "上传文件列表 ($(ls upload | wc -l) 个文件):"
          ls -lh upload
        fi
        echo "::endgroup::"
          
    - name: 发布SGSI版本
      uses: ncipollo/release-action@v1.8.6
      with:
        artifacts: 'upload/*'
        name: xiaoxinSGSI-ab-Android10-unpack
        tag: xiaoxinSGSI-ab-Android10-${{ github.run_number }}
        token: ${{ secrets.GITHUB_TOKEN }}
