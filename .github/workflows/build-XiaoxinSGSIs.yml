我理解您需要一个完整的整合方案，将带进度条的下载工具和ROM下载步骤整合到整个工作流中。以下是完整的 `build.yml` 文件，包含了优化的下载进度显示：

```yaml
name: build_XiaoxinSGSIs

on:
  watch:
    types: [started]

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: 初始化环境
      run: |
        rm -rf SGSI-build-tool upload || true
        df -h
        
    - name: 检出代码库
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 验证配置文件存在
      id: config_check
      run: |
        echo "📁 当前目录内容:"
        ls -la
        
        if [ ! -f sgsi.json ]; then
          echo "::error::❌ sgsi.json 配置文件不存在"
          echo "请在仓库根目录创建sgsi.json文件并填写配置"
          exit 1
        fi
        echo "✅ 配置文件存在"
    
    - name: 安装依赖工具
      run: |
        sudo apt-get update
        sudo apt-get install -y jq pigz aria2
        
        if ! command -v jq &> /dev/null; then
          echo "::error::❌ jq 未安装成功"
          exit 1
        fi
        echo "✅ jq 版本: $(jq --version)"
        
        if ! command -v pigz &> /dev/null; then
          echo "::warning::⚠️ pigz 未安装，将使用gzip进行压缩"
        fi
    
    - name: 读取配置文件
      id: config
      run: |
        # 验证JSON格式
        if ! jq empty sgsi.json; then
          echo "::error::❌ sgsi.json 格式无效"
          echo "请检查JSON语法是否正确"
          exit 1
        fi
        
        # 读取所有配置字段
        rom_url=$(jq -r '.rom_url' sgsi.json)
        rom_name=$(jq -r '.rom_name' sgsi.json)
        pack_sgsi=$(jq -r '.pack_sgsi' sgsi.json)
        upload_artifact=$(jq -r '.upload_artifact' sgsi.json)
        upload_wetransfer=$(jq -r '.upload_wetransfer' sgsi.json)
        make_miui=$(jq -r '.make_miui' sgsi.json)
        make_flyme=$(jq -r '.make_flyme' sgsi.json)
        make_coloros=$(jq -r '.make_coloros' sgsi.json)
        make_h2os=$(jq -r '.make_h2os' sgsi.json)
        make_smartisanos=$(jq -r '.make_smartisanos' sgsi.json)
        make_zui=$(jq -r '.make_zui' sgsi.json)
        make_super=$(jq -r '.make_super' sgsi.json)
        
        # 设置默认值（处理null值）
        [ "$upload_artifact" == "null" ] && upload_artifact=true
        [ "$upload_wetransfer" == "null" ] && upload_wetransfer=false
        [ "$make_super" == "null" ] && make_super=false
        
        # 检查必需字段
        if [ -z "$rom_url" ] || [ "$rom_url" == "null" ]; then
          echo "::error::❌ rom_url 未定义"
          echo "请在sgsi.json中提供rom_url"
          exit 1
        fi
        
        # 如果rom_name为空，则从URL中提取文件名
        if [ -z "$rom_name" ] || [ "$rom_name" == "null" ]; then
          rom_name=$(basename "$rom_url")
          echo "ℹ️ 从URL提取ROM文件名: $rom_name"
        fi
        
        # ROM类型检查
        rom_types=(miui flyme coloros h2os smartisanos zui)
        type_count=0
        current_type=""
        
        echo "🔍 检查ROM类型配置:"
        for type in "${rom_types[@]}"; do
          # 使用动态变量名
          value_name="make_${type}"
          value=${!value_name}
          
          # 处理null值
          [ "$value" == "null" ] && value="false"
          
          echo "  make_$type = $value"
          
          if [ "$value" == "true" ]; then
            type_count=$((type_count + 1))
            current_type=$type
          fi
        done
        
        if [ $type_count -gt 1 ]; then
          echo "::error::❌ 只能启用一个ROM类型"
          echo "请检查sgsi.json配置，只能有一个make_*设为true"
          exit 1
        fi
        
        # 输出环境变量
        echo "rom_url=$rom_url" >> $GITHUB_ENV
        echo "rom_name=$rom_name" >> $GITHUB_ENV
        echo "pack_sgsi=$pack_sgsi" >> $GITHUB_ENV
        echo "upload_artifact=$upload_artifact" >> $GITHUB_ENV
        echo "upload_wetransfer=$upload_wetransfer" >> $GITHUB_ENV
        echo "make_miui=$make_miui" >> $GITHUB_ENV
        echo "make_flyme=$make_flyme" >> $GITHUB_ENV
        echo "make_coloros=$make_coloros" >> $GITHUB_ENV
        echo "make_h2os=$make_h2os" >> $GITHUB_ENV
        echo "make_smartisanos=$make_smartisanos" >> $GITHUB_ENV
        echo "make_zui=$make_zui" >> $GITHUB_ENV
        echo "make_super=$make_super" >> $GITHUB_ENV
        echo "rom_type=$current_type" >> $GITHUB_ENV
        
        # 显示读取的配置摘要
        echo "✅ 配置读取成功:"
        echo "  ROM URL: $rom_url"
        echo "  ROM名称: $rom_name"
        echo "  ROM类型: ${current_type:-无}"
        echo "  打包名称: $pack_sgsi"
        echo "  Artifact上传: $upload_artifact"
        echo "  WeTransfer上传: $upload_wetransfer"
    
    - name: 下载构建工具（带进度条）
      timeout-minutes: 5
      run: |
        tool_url="https://github.com/xiaoxindada/SGSI-build-tool/releases/download/v1.9/SGSI-build-tool.tar"
        filename="SGSI-build-tool.tar"
        
        # 获取文件大小函数
        get_file_size() {
          curl -sI "$1" | grep -i 'content-length' | awk '{print $2}' | tr -d '\r'
        }
        
        # 格式化文件大小函数
        format_size() {
          local size=$1
          if [ $size -ge $((1024*1024*1024)) ]; then
            printf "%.1fGB" $(echo "scale=1; $size/(1024*1024*1024)" | bc)
          elif [ $size -ge $((1024*1024)) ]; then
            printf "%.1fMB" $(echo "scale=1; $size/(1024*1024)" | bc)
          elif [ $size -ge 1024 ]; then
            printf "%.1fKB" $(echo "scale=1; $size/1024" | bc)
          else
            printf "%dB" $size
          fi
        }
        
        # 获取文件大小
        file_size=$(get_file_size "$tool_url")
        if [ -z "$file_size" ]; then
          file_size=$((150*1024*1024))  # 默认150MB
          echo "⚠️ 无法获取文件大小，使用默认值: $(format_size $file_size)"
        else
          echo "ℹ️ 文件大小: $(format_size $file_size)"
        fi
        
        formatted_size=$(format_size $file_size)
        echo "⬇️ 下载 $filename [$formatted_size]"
        
        # 进度条函数
        progress_bar() {
          local total=$1
          local current=$2
          local width=20  # 进度条宽度
          local percent=$((current * 100 / total))
          local progress=$((current * width / total))
          local rest=$((width - progress))
          
          printf "\r["
          printf "%${progress}s" | tr ' ' '#'
          printf "%${rest}s" | tr ' ' '-'
          printf "] %3d%%" $percent
        }
        
        # 使用curl下载并显示进度
        download_with_curl() {
          echo "⚙️ 使用 curl"
          curl -L --progress-bar -o "$filename" "$tool_url" \
            | while IFS= read -r line; do
                if [[ $line =~ ([0-9]+)\ ([0-9.]+)% ]]; then
                  current=${BASH_REMATCH[1]}
                  progress_bar $file_size $current
                fi
              done
          echo  # 新行
        }
        
        # 使用aria2c下载并显示进度
        download_with_aria2c() {
          echo "⚙️ 使用 aria2c"
          aria2c -x8 -s8 -k1M --show-console-readout=false --summary-interval=1 \
                 "$tool_url" -o "$filename" 2>&1 \
            | while IFS= read -r line; do
                if [[ $line =~ \(([0-9]*)%\) ]]; then
                  percent=${BASH_REMATCH[1]}
                  current=$((file_size * percent / 100))
                  progress_bar $file_size $current
                fi
              done
          echo  # 新行
        }
        
        # 尝试下载
        if command -v aria2c &> /dev/null; then
          download_with_aria2c
        else
          download_with_curl
        fi
        
        # 验证下载
        if [ ! -f "$filename" ]; then
          echo "::error::❌ 下载失败"
          exit 1
        fi
        
        # 验证文件大小
        actual_size=$(stat -c%s "$filename")
        if [ $actual_size -lt $((file_size * 9 / 10)) ]; then
          echo "::error::❌ 文件大小不匹配 (应为: $formatted_size, 实际: $(format_size $actual_size))"
          exit 1
        fi
        
        # 验证压缩包完整性
        if ! tar -tf "$filename" >/dev/null 2>&1; then
          echo "::error::❌ 工具包损坏"
          exit 1
        fi
        
        echo "✅ 下载完成 [$(format_size $actual_size)]"
        echo "✅ 工具包验证通过"
    
    - name: 设置构建环境
      run: |
        tar -xf SGSI-build-tool.tar
        chmod -R +x SGSI-build-tool
        
        cd SGSI-build-tool/10
        ./setup.sh || echo "⚠️ 忽略非关键错误"
        cd ../..
        
        echo "🛠️ 构建环境已设置"
    
    - name: 下载ROM文件（带进度条）
      timeout-minutes: 30
      run: |
        rom_path="SGSI-build-tool/10/tmp/${{ env.rom_name }}"
        rom_url="${{ env.rom_url }}"
        filename="${{ env.rom_name }}"
        echo "⬇️ 下载ROM: ${{ env.rom_url }}"
        
        # 确保目录存在
        mkdir -p "$(dirname "$rom_path")"
        
        # 获取文件大小函数
        get_file_size() {
          curl -sI "$1" | grep -i 'content-length' | awk '{print $2}' | tr -d '\r'
        }
        
        # 格式化文件大小函数
        format_size() {
          local size=$1
          if [ $size -ge $((1024*1024*1024)) ]; then
            printf "%.1fGB" $(echo "scale=1; $size/(1024*1024*1024)" | bc)
          elif [ $size -ge $((1024*1024)) ]; then
            printf "%.1fMB" $(echo "scale=1; $size/(1024*1024)" | bc)
          elif [ $size -ge 1024 ]; then
            printf "%.1fKB" $(echo "scale=1; $size/1024" | bc)
          else
            printf "%dB" $size
          fi
        }
        
        # 获取文件大小
        file_size=$(get_file_size "$rom_url")
        if [ -z "$file_size" ]; then
          # 使用默认大小提示（不强制）
          min_size=$((100*1024*1024))  # 100MB
          echo "⚠️ 无法获取ROM文件大小，将使用默认验证阈值: $(format_size $min_size)"
        else
          echo "ℹ️ ROM大小: $(format_size $file_size)"
        fi
        
        formatted_size=$(format_size ${file_size:-0})
        echo "⬇️ 下载 $filename [${formatted_size:-未知大小}]"
        
        # 进度条函数（同上）
        progress_bar() {
          local total=$1
          local current=$2
          local width=20  # 进度条宽度
          local percent=$((current * 100 / total))
          local progress=$((current * width / total))
          local rest=$((width - progress))
          
          printf "\r["
          printf "%${progress}s" | tr ' ' '#'
          printf "%${rest}s" | tr ' ' '-'
          printf "] %3d%%" $percent
        }
        
        # 使用aria2c下载并显示进度（优先）
        if command -v aria2c &> /dev/null; then
          echo "⚙️ 使用 aria2c"
          aria2c -x8 -s8 -k1M --show-console-readout=false --summary-interval=1 \
                 "$rom_url" -d "$(dirname "$rom_path")" -o "$filename" 2>&1 \
            | while IFS= read -r line; do
                if [[ $line =~ \(([0-9]*)%\) ]]; then
                  percent=${BASH_REMATCH[1]}
                  # 如果知道文件大小，则计算当前字节数，否则用百分比模拟
                  if [ -n "$file_size" ]; then
                    current=$((file_size * percent / 100))
                    progress_bar $file_size $current
                  else
                    # 未知文件大小时只显示百分比
                    printf "\r[%-20s] %3d%%" $(printf "%${percent}s" | tr ' ' '#') $percent
                  fi
                fi
              done
          echo  # 新行
        else
          # 使用curl作为备选
          echo "⚙️ 使用 curl"
          curl -L --progress-bar -o "$rom_path" "$rom_url" \
            | while IFS= read -r line; do
                if [[ $line =~ ([0-9]+)\ ([0-9.]+)% ]]; then
                  current=${BASH_REMATCH[1]}
                  if [ -n "$file_size" ]; then
                    progress_bar $file_size $current
                  else
                    percent=${BASH_REMATCH[2]}
                    printf "\r[%-20s] %3d%%" $(printf "%${percent}s" | tr ' ' '#') ${BASH_REMATCH[2]%.*}
                  fi
                fi
              done
          echo  # 新行
        fi
        
        # 验证下载的文件
        if [ ! -f "$rom_path" ]; then
          echo "::error::❌ ROM下载失败"
          exit 1
        fi
        
        actual_size=$(stat -c%s "$rom_path")
        if [ -n "$file_size" ]; then
          if [ $actual_size -lt $((file_size * 9 / 10)) ]; then
            echo "::error::❌ ROM大小不匹配 (应为: $(format_size $file_size), 实际: $(format_size $actual_size))"
            exit 1
          fi
        else
          # 没有原始文件大小时，验证最小大小
          min_size=$((100*1024*1024))  # 100MB
          if [ $actual_size -lt $min_size ]; then
            echo "::error::❌ ROM文件异常 (大小: $(format_size $actual_size))"
            exit 1
          fi
        fi
        
        echo "✅ ROM下载完成 [$(format_size $actual_size)]"
    
    - name: 处理ROM类型
      run: |
        cd SGSI-build-tool/10
        
        # 应用通用修复脚本
        if [ -f "../../fix/fixbug.sh" ]; then
          cp ../../fix/fixbug.sh fixbug/fixbug.sh
          chmod +x fixbug/fixbug.sh
          echo "🛠️ 应用通用修复脚本..."
          ./fixbug/fixbug.sh || echo "⚠️ 通用修复脚本执行异常"
        fi
        
        # 应用ROM类型专用脚本
        if [ -n "${{ env.rom_type }}" ] && [ -f "../../fix/${{ env.rom_type }}_fixbug.sh" ]; then
          cp "../../fix/${{ env.rom_type }}_fixbug.sh" "fixbug/${{ env.rom_type }}_fixbug.sh"
          chmod +x "fixbug/${{ env.rom_type }}_fixbug.sh"
          echo "🛠️ 应用${{ env.rom_type }}专用修复脚本..."
          ./fixbug/${{ env.rom_type }}_fixbug.sh || echo "⚠️ ${{ env.rom_type }}修复脚本执行异常"
        fi
        
        # ROM类型特殊处理
        case "${{ env.rom_type }}" in
          coloros)
            echo "🔓 解密ColorOS ROM..."
            python3 oppo_ozip/ozipdecrypt.py "tmp/${{ env.rom_name }}"
            decrypted_file="${rom_name%.*}.img"
            if [ -f "tmp/$decrypted_file" ]; then
              rm -f "tmp/${{ env.rom_name }}"
              echo "✅ 解密成功: $decrypted_file"
              echo "rom_name=$decrypted_file" >> $GITHUB_ENV
            else
              echo "::error::❌ ColorOS解密失败"
              exit 1
            fi
            ;;
          miui)
            echo "🍚 执行MIUI特殊处理..."
            # 这里可以添加MIUI特定的处理逻辑
            ;;
          *)
            echo "ℹ️ ROM类型: ${{ env.rom_type }}，无需特殊处理"
            ;;
        esac
        
        # 处理Super分区支持
        if [ "${{ env.make_super }}" == "true" ]; then
          sed -i 's/SGSI.sh/dynamic_SGSI.sh/g' make.sh
          echo "🛠️ 启用Super分区支持"
        fi
    
    - name: 构建系统镜像
      timeout-minutes: 120
      run: |
        cd SGSI-build-tool/10
        
        # 复制自定义文件
        if [ -d "../../make" ]; then
          cp -f ../../make/* ./
          echo "📂 已添加自定义make文件"
        fi
        if [ -d "../../bin" ]; then
          cp -f ../../bin/* bin/
          echo "📂 已添加自定义bin文件"
        fi
        
        # 确保脚本可执行
        find . -name "*.sh" -exec chmod +x {} \;
        chmod +x bin/*
        
        echo "::group::📜 构建日志"
        ./make.sh || build_failed=true
        echo "::endgroup::"
        
        if [ "$build_failed" = true ]; then
          echo "⚠️ 构建失败，尝试手动创建镜像..."
          if [ -d "out/system" ]; then
            size_kb=$(du -sk out/system/ | cut -f1)
            img_size_kb=$((size_kb * 130 / 100))
            img_size_mb=$((img_size_kb / 1024))
            [ $img_size_mb -lt 512 ] && img_size_mb=512
            
            ./bin/make_ext4fs -T 0 -S out/config/system_file_contexts \
                              -C out/config/system_fs_config \
                              -l ${img_size_mb}M -a system out/system.img out/system/
            
            if [ -f "out/system.img" ]; then
              mkdir -p SGSI
              mv out/system.img SGSI/
              echo "✅ 手动创建镜像成功"
            else
              echo "::error::❌ 无法手动创建镜像"
              exit 1
            fi
          else
            echo "::error::❌ 构建失败且无可用系统文件"
            exit 1
          fi
        else
          echo "✅ 构建成功"
        fi
        
        # 整理输出文件
        mkdir -p ../final_out
        mv SGSI/* ../final_out/ 2>/dev/null || true
        mv out/*.img ../final_out/ 2>/dev/null || true
        
        if [ -f "../final_out/system.img" ]; then
          orig_size=$(du -h "../final_out/system.img" | cut -f1)
          echo "原始大小: $orig_size" >> ../final_out/build_info.txt
        fi
        
        echo "📁 输出文件列表:"
        ls -l ../final_out/
    
    - name: 打包补丁
      if: ${{ success() }}
      run: |
        if [ -d "Patch" ]; then
          cd Patch
          for dir in */; do
            if [ -d "$dir" ]; then
              dir_name="${dir%/}"
              echo "📦 打包补丁: $dir_name"
              zip -r -0 "../../SGSI-build-tool/final_out/${dir_name}.zip" "$dir_name"
            fi
          done
          cd ..
        else
          echo "ℹ️ 未找到Patch目录，跳过补丁打包"
        fi
    
    - name: 压缩系统镜像
      if: ${{ success() }}
      run: |
        cd SGSI-build-tool/final_out
        
        if [ -f "system.img" ]; then
          echo "📦 开始压缩system.img..."
          original_size=$(du -h system.img | cut -f1)
          
          if command -v pigz &> /dev/null; then
            echo "⚙️ 使用pigz进行多线程压缩..."
            pigz -k -f -9 system.img
          else
            echo "⚙️ 使用gzip进行压缩..."
            gzip -k -f -9 system.img
          fi
          
          compressed_size=$(du -h system.img.gz | cut -f1)
          echo "压缩后大小: $compressed_size" >> build_info.txt
          
          orig_bytes=$(stat -c%s system.img)
          comp_bytes=$(stat -c%s system.img.gz)
          ratio=$(echo "scale=2; (1 - $comp_bytes/$orig_bytes) * 100" | bc)
          echo "压缩率: $ratio%" >> build_info.txt
          
          echo "✅ 压缩完成: ${original_size} → ${compressed_size} (节省 ${ratio}%)"
          ls -lh system.img*
        else
          echo "ℹ️ 未找到system.img，跳过压缩"
        fi
    
    - name: 创建发布包
      if: ${{ success() }}
      run: |
        cd SGSI-build-tool/final_out
        
        if [ -z "$(ls -A .)" ]; then
          echo "::error::❌ 无可用输出文件"
          exit 1
        fi
        
        pack_name="${{ env.pack_sgsi }}"
        
        # 显示构建信息
        if [ -f "build_info.txt" ]; then
          echo "::group::📊 镜像压缩信息"
          cat build_info.txt
          echo "::endgroup::"
          
          orig_size=$(grep "原始大小" build_info.txt | cut -d: -f2 | xargs)
          comp_size=$(grep "压缩后大小" build_info.txt | cut -d: -f2 | xargs)
          ratio=$(grep "压缩率" build_info.txt | cut -d: -f2 | xargs)
          
          if [ -n "$orig_size" ] && [ -n "$comp_size" ]; then
            echo "✅ 压缩结果: ${orig_size} → ${comp_size} (节省 $ratio)"
          fi
        fi
        
        # 打包文件
        echo "📦 创建发布包: $pack_name"
        zip -r -0 "../$pack_name" .
        
        # 处理大文件分割
        cd ..
        file_size=$(stat -c%s "$pack_name")
        max_size=1400000000  # 1.4GB
        
        if [ $file_size -gt $max_size ]; then
          echo "✂️ 分割大文件 (大小: $((file_size/1024/1024))MB)"
          split -b 1000M -d "$pack_name" "${pack_name}_part"
          rm "$pack_name"
          packed_files=($(ls "${pack_name}"_part*))
        else
          packed_files=("$pack_name")
          echo "ℹ️ 文件大小: $((file_size/1024/1024))MB，无需分割"
        fi
        
        # 准备上传
        mkdir -p ../upload
        mv "${packed_files[@]}" ../upload/ || true
        
        # 设置上传文件路径
        output_file=$(ls $PWD/../upload/$pack_name* | head -n1)
        if [ -n "$output_file" ]; then
          echo "📎 上传文件: $(basename "$output_file")"
          echo "OUTPUT_FILE=$output_file" >> $GITHUB_ENV
        else
          echo "::error::❌ 未找到输出文件"
          exit 1
        fi
    
    - name: 发布GitHub版本
      uses: softprops/action-gh-release@v1
      with:
        files: upload/*
        tag_name: build-${{ github.run_number }}
        generate_release_notes: true
        body: |
          构建 #${{ github.run_number }} 已完成！
          
          **关键信息**:
          - ROM名称: ${{ env.rom_name }}
          - ROM类型: ${{ env.rom_type || '无' }}
          - 构建时间: ${{ steps.date.outputs.formattedDate }}
          
          ${{ env.upload_wetransfer == 'true' && '>  ️ **重要提示**：本构建包含WeTransfer下载链接（有效期7天），请在作业摘要中查看详情！' || '' }}
    
    - name: 上传构建产物
      if: ${{ env.upload_artifact == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: SGSI-build-output
        path: upload/*
        retention-days: 7
        
    - name: 上传到WeTransfer
      if: ${{ env.upload_wetransfer == 'true' }}
      run: |
        echo "☁️ 上传到WeTransfer..."
        cd $GITHUB_WORKSPACE
        
        # 检查文件是否存在
        if [ ! -f "$OUTPUT_FILE" ]; then
          echo "::error::❌ 要上传的文件不存在: $OUTPUT_FILE"
          exit 1
        fi
        
        # 获取文件大小信息
        FILE_SIZE=$(du -h "$OUTPUT_FILE" | cut -f1)
        echo "⬆️ 开始上传文件: $(basename "$OUTPUT_FILE") (大小: $FILE_SIZE)..."
        
        # 计算到期日期
        EXPIRY_DATE=$(date -d "+7 days" "+%Y-%m-%d")
        
        # 上传并获取结果
        curl -sL https://git.io/file-transfer | sh
        TRANSFER_OUTPUT=$(./transfer wet "$OUTPUT_FILE")
        echo "$TRANSFER_OUTPUT"
        
        # 提取下载链接
        DOWNLOAD_LINK=$(echo "$TRANSFER_OUTPUT" | grep -o 'https://we.tl/[^ ]*' | head -n1)
        if [ -n "$DOWNLOAD_LINK" ]; then
          # 添加到工作流摘要（带有效期声明）
          echo "##   WeTransfer 下载地址" >> $GITHUB_STEP_SUMMARY
          echo ">   **链接有效期至 ${EXPIRY_DATE}**" >> $GITHUB_STEP_SUMMARY
          echo "[点击下载]($DOWNLOAD_LINK)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "文件: $(basename "$OUTPUT_FILE")" >> $GITHUB_STEP_SUMMARY
          echo "大小: $FILE_SIZE" >> $GITHUB_STEP_SUMMARY
          
          # 设置环境变量供后续步骤使用
          echo "WETRANSFER_LINK=$DOWNLOAD_LINK" >> $GITHUB_ENV
          echo "EXPIRY_DATE=$EXPIRY_DATE" >> $GITHUB_ENV
        else
          echo "::warning::⚠️ 未找到下载链接"
          echo "完整输出: $TRANSFER_OUTPUT" # 输出完整结果用于调试
        fi
    
    - name: 显示最终摘要
      if: always()
      run: |
        echo "✅ 构建流程已完成"
        echo "::group::📊 构建摘要"
        echo "ROM URL: ${{ env.rom_url }}"
        echo "ROM名称: ${{ env.rom_name }}"
        echo "ROM类型: ${{ env.rom_type }}"
        echo "构建编号: ${{ github.run_number }}"
        
        # 镜像压缩信息
        if [ -f "SGSI-build-tool/final_out/build_info.txt" ]; then
          orig_size=$(grep "原始大小" SGSI-build-tool/final_out/build_info.txt | cut -d: -f2 | xargs)
          comp_size=$(grep "压缩后大小" SGSI-build-tool/final_out/build_info.txt | cut -d: -f2 | xargs)
          ratio=$(grep "压缩率" SGSI-build-tool/final_out/build_info.txt | cut -d: -f2 | xargs)
          
          if [ -n "$orig_size" ] && [ -n "$comp_size" ]; then
            echo "✨ 镜像大小对比: ${orig_size} → ${comp_size} (节省 ${ratio})"
          fi
        fi
        
        # WeTransfer链接信息
        if [[ -n "$WETRANSFER_LINK" && -n "$EXPIRY_DATE" ]]; then
          echo ""
          echo "🌐 WeTransfer下载链接: $WETRANSFER_LINK"
          echo "⏳ 链接有效期至: $EXPIRY_DATE"
        fi
        
        echo "::endgroup::"
