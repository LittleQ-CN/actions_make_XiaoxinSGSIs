name: build_XiaoxinSGSIs

on:
  watch:
    types: [started]  # 监听仓库的star事件
#  push:               # 代码推送时触发
#    branches: [ master ]
#  pull_request:       # 创建PR时触发
#    branches: [ master ]
    
jobs:
  build:
    runs-on: ubuntu-22.04  # 使用Ubuntu 22.04运行环境
    # 仅当仓库所有者自己触发时运行
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: 检出代码
      uses: actions/checkout@v3
      
    - name: 清理工作区
      run: |
        # 安全清理工作区，不影响系统文件
        sudo rm -rf SGSI-build-tool || true
        df -h  # 显示磁盘使用情况
        
    - name: 读取配置变量
      id: var
      run: |
        # 从sgsi.json文件中提取所需变量
        echo "rom_url=$(jq -r '.rom_url' sgsi.json)" >> $GITHUB_OUTPUT
        echo "rom_name=$(jq -r '.rom_name' sgsi.json)" >> $GITHUB_OUTPUT
        echo "pack_sgsi=$(jq -r '.pack_sgsi' sgsi.json)" >> $GITHUB_OUTPUT
        echo "make_miui=$(jq -r '.make_miui' sgsi.json)" >> $GITHUB_OUTPUT
        echo "make_flyme=$(jq -r '.make_flyme' sgsi.json)" >> $GITHUB_OUTPUT
        echo "make_coloros=$(jq -r '.make_coloros' sgsi.json)" >> $GITHUB_OUTPUT
        echo "make_h2os=$(jq -r '.make_h2os' sgsi.json)" >> $GITHUB_OUTPUT
        echo "make_smartisanos=$(jq -r '.make_smartisanos' sgsi.json)" >> $GITHUB_OUTPUT
        echo "make_zui=$(jq -r '.make_zui' sgsi.json)" >> $GITHUB_OUTPUT
        echo "make_super=$(jq -r '.make_super' sgsi.json)" >> $GITHUB_OUTPUT
        
    - name: 下载构建工具
      run: |
        # 从GitHub下载SGSI构建工具包
        wget -c https://github.com/xiaoxindada/SGSI-build-tool/releases/download/v1.9/SGSI-build-tool.tar
        # 检查下载是否成功
        if [ ! -f SGSI-build-tool.tar ]; then
          echo "::error::工具包下载失败"
          exit 1
        fi
        
    - name: 初始化环境
      run: |
        # 解压工具包
        tar -xf SGSI-build-tool.tar
        
        # 验证目录结构
        if [ ! -d "./SGSI-build-tool" ]; then
          echo "::error::未找到SGSI-build-tool目录"
          ls -la
          exit 1
        fi
        
        # 进入工具目录
        cd ./SGSI-build-tool
        
        # 验证Android 10构建目录
        if [ ! -d "10" ]; then
          echo "::error::缺少Android 10构建目录"
          exit 1
        fi
        
        # 准备安装脚本
        if [ ! -f "../bin/setup.sh" ]; then
          echo "::error::未找到setup.sh安装脚本"
          exit 1
        fi
        rm -rf 10/setup.sh
        mv ../bin/setup.sh 10/
        
        # 运行环境设置
        cd 10
        bash setup.sh
        
    - name: 下载ROM
      run: wget -c ${{ steps.var.outputs.rom_url }} -O ./SGSI-build-tool/10/tmp/${{ steps.var.outputs.rom_name }}
    
    - name: 构建Super分区SGSI
      if: steps.var.outputs.make_super == 'true'
      run: |
        # 修改构建脚本为动态分区模式
        sed -i 's/SGSI.sh/dynamic_SGSI.sh/g' ./SGSI-build-tool/10/make.sh
    
    - name: 生成MIUI SGSI
      if: steps.var.outputs.make_miui == 'true'
      run: |
        # 替换为MIUI修复脚本
        rm -rf ./SGSI-build-tool/10/fixbug/fixbug.sh
        mv fix/MIUI.sh ./SGSI-build-tool/10/fixbug/fixbug.sh
        
    - name: 生成Flyme SGSI
      if: steps.var.outputs.make_flyme == 'true'
      run: |
        # 替换为Flyme修复脚本
        rm -rf ./SGSI-build-tool/10/fixbug/fixbug.sh
        mv fix/Flyme.sh ./SGSI-build-tool/10/fixbug/fixbug.sh
        
    - name: 生成ColorOS SGSI
      if: steps.var.outputs.make_coloros == 'true'
      run: |
        # 解密OPPO OZIP格式ROM
        python3 ./SGSI-build-tool/10/oppo_ozip/ozipdecrypt.py ./SGSI-build-tool/10/tmp/${{ steps.var.outputs.rom_name }}
        # 替换为ColorOS修复脚本
        rm -rf ./SGSI-build-tool/10/tmp/${{ steps.var.outputs.rom_name }} ./SGSI-build-tool/10/fixbug/fixbug.sh
        mv fix/ColorOS.sh ./SGSI-build-tool/10/fixbug/fixbug.sh
        
    - name: 生成H2OS SGSI
      if: steps.var.outputs.make_h2os == 'true'
      run: |
        # 替换为H2OS修复脚本
        rm -rf ./SGSI-build-tool/10/fixbug/fixbug.sh
        mv fix/H2OS.sh ./SGSI-build-tool/10/fixbug/fixbug.sh
        
    - name: 生成SmartisanOS SGSI
      if: steps.var.outputs.make_smartisanos == 'true'
      run: |
        # 替换为SmartisanOS修复脚本
        rm -rf ./SGSI-build-tool/10/fixbug/fixbug.sh
        mv fix/SmartisanOS.sh ./SGSI-build-tool/10/fixbug/fixbug.sh
        
    - name: 生成ZUI SGSI
      if: steps.var.outputs.make_zui == 'true'
      run: |
        # 替换为ZUI修复脚本
        rm -rf ./SGSI-build-tool/10/fixbug/fixbug.sh
        mv fix/ZUI.sh ./SGSI-build-tool/10/fixbug/fixbug.sh
         
    - name: 生成SGSI镜像
      timeout-minutes: 120  # 设置超时防止无限挂起
      run: |
        # 清理旧文件
        rm -rf ./SGSI-build-tool/10/SGSI.sh ./SGSI-build-tool/10/makeimg.sh ./SGSI-build-tool/10/bin/mke2fs ./SGSI-build-tool/10/bin/e2fsdroid ./SGSI-build-tool/10/dynamic_SGSI.sh ./SGSI-build-tool/10/oppo.sh ./SGSI-build-tool/10/make.sh
        
        # 准备构建脚本
        mv make/makeimg.sh make/SGSI.sh make/dynamic_SGSI.sh make/oppo.sh make/make.sh ./SGSI-build-tool/10/
        
        # 准备工具文件
        mv bin/mke2fs bin/e2fsdroid ./SGSI-build-tool/10/bin/
        
        # 执行构建
        cd ./SGSI-build-tool/10
        bash make.sh
        
    - name: 打包补丁文件
      run: |
        # 分别打包三个补丁目录
        zip -r Patch1.zip Patch/Patch1/*
        zip -r Patch2.zip Patch/Patch2/*
        zip -r Patch3.zip Patch/Patch3/*
        
        # 移动补丁包到SGSI目录
        mv Patch1.zip Patch2.zip Patch3.zip ./SGSI-build-tool/10/SGSI/

    - name: 压缩SGSI成果物
      run: |
        # 创建上传目录
        mkdir -p upload
        
        # 打包SGSI文件
        zip -r ${{ steps.var.outputs.pack_sgsi }} ./SGSI-build-tool/10/SGSI/*
        
        # 检查文件大小，大于2GB时分割打包
        if [[ $(du -sb ${{ steps.var.outputs.pack_sgsi }} | awk '{print $1}') -gt 2097152000 ]];then
              echo "::notice::文件过大，进行分割打包..."
              tar -cpzf - ${{ steps.var.outputs.pack_sgsi }} | split -d -b 1024m - upload/${{ steps.var.outputs.pack_sgsi }}
          else
              mv ${{ steps.var.outputs.pack_sgsi }} upload/
          fi
          
          # 显示上传目录内容
          ls "upload"
          
    - name: 发布SGSI版本
      uses: ncipollo/release-action@v1.8.6
      with:
        artifacts: upload/*             # 上传所有打包文件
        name: xiaoxinSGSI-ab-Android10-unpack  # 发布名称
        tag: xiaoxinSGSI-ab-Android10-${{ github.run_number }}  # 自动生成版本标签
        token: ${{ secrets.GITHUB_TOKEN }}  # 使用GitHub令牌认证
