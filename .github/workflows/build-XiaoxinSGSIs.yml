name: build_XiaoxinSGSIs_Ai_Edit

on:
  watch:
    types: [started]

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 120

    steps:
      - name: "Checkout Code (检出代码)"
        uses: actions/checkout@v4
        
      - name: "📋 Check Config Status (检查配置文件状态)"
        run: |
          # Check sgsi.json config file (检查sgsi.json配置文件)
          if [[ ! -f "sgsi.json" ]]; then
            echo "::error::❌ Missing sgsi.json config file (缺少sgsi.json配置文件)"
            exit 1
          fi
          
          # Check sgsi.sh file (检查sgsi.sh文件)
          if [[ -f "SGSI-build-tool/10/sgsi.sh" ]]; then
            echo "✅ Detected configured sgsi.sh file (检测到已配置sgsi.sh文件)"
          else
            echo "ℹ️ No custom sgsi.sh detected, using default config (未检测到自定义sgsi.sh文件，将使用默认配置)"
          fi
       
      - name: "🧹 Clean Up Environment (清理环境)"
        run: |
          echo "🗑️ Starting full cleanup (启动全面清理)..."
          sudo apt-get autoremove -y --purge
          sudo apt-get clean
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d || true
          echo "✅ Cleanup complete! Disk space (清理完成！磁盘空间):"
          df -h
       
      - name: "⚙️ Parse Config Variables (解析配置变量)"
        id: config
        run: |
          # Use more robust JSON parsing (使用更健壮的JSON解析方式)
          rom_url=$(jq -r '.rom_url // empty' sgsi.json)
          if [[ -z "$rom_url" ]]; then
            echo "::error::❌ Missing rom_url field in sgsi.json (sgsi.json中缺少rom_url字段)"
            exit 1
          fi
          
          {
            echo "rom_url=$rom_url"
            echo "rom_name=$(jq -r '.rom_name // "unknown_rom"' sgsi.json)"
            echo "pack_sgsi=$(jq -r '.pack_sgsi // "SGSI.zip"' sgsi.json)"
            echo "make_miui=$(jq -r '.make_miui // "false"' sgsi.json)"
            echo "make_flyme=$(jq -r '.make_flyme // "false"' sgsi.json)"
            echo "make_coloros=$(jq -r '.make_coloros // "false"' sgsi.json)"
            echo "make_h2os=$(jq -r '.make_h2os // "false"' sgsi.json)"
            echo "make_smartisanos=$(jq -r '.make_smartisanos // "false"' sgsi.json)"
            echo "make_zui=$(jq -r '.make_zui // "false"' sgsi.json)"
            echo "make_super=$(jq -r '.make_super // "false"' sgsi.json)"
          } >> $GITHUB_OUTPUT
           
      - name: "📦 Install Required Tools (安装必要工具)"
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            aria2 \
            curl \
            jq \
            brotli \
            android-sdk-libsparse-utils \
            python3 \
            python3-pip \
            p7zip-full \
            zip \
            unzip \
            e2fsprogs \
            android-tools-fsutils
          
          echo "✅ Tools installation complete (工具安装完成)"
          
      - name: "⬇️ Download Build Tools (下载构建工具)"
        run: |
          tool_url="https://github.com/xiaoxindada/SGSI-build-tool/releases/download/v1.9/SGSI-build-tool.tar"
          filename="SGSI-build-tool.tar"
          
          echo "🔧 Starting build tools download (开始下载构建工具)..."
          max_retries=5
          retry_delay=10
          
          for i in $(seq 1 $max_retries); do
            if curl -fL -o "$filename" "$tool_url"; then
              echo "✅ Download successful (下载成功)"
              break
            else
              echo "❌ Download failed (尝试 $i/$max_retries) (下载失败)"
              if [ $i -eq $max_retries ]; then
                echo "::error::❌ Build tools download failed (构建工具下载失败)"
                exit 1
              fi
              echo "🔄 Retrying in ${retry_delay} seconds (${retry_delay}秒后重试)..."
              sleep $retry_delay
            fi
          done
          
      - name: "🏗️ Initialize Build Environment (初始化构建环境)"
        run: |
          echo "📂 Extracting build tools (解压构建工具)..."
          if ! sudo tar -xf SGSI-build-tool.tar; then
            echo "::error::❌ Failed to extract build tools (解压构建工具失败)"
            exit 1
          fi
          
          # Set execute permissions (设置执行权限)
          sudo find SGSI-build-tool -name "*.sh" -exec chmod +x {} \;
          
          echo "✅ Environment initialization complete (环境初始化完成)"
          
      - name: "🔧 Fix Toolchain Issues (修复工具链问题)"
        run: |
          cd SGSI-build-tool/10
          echo "🛠️ Fixing binary compatibility (修复二进制兼容性)..."
          
          # Create necessary directories (创建必要目录)
          sudo mkdir -p bin
          
          # Create symbolic links for essential tools only (仅为必要工具创建符号链接)
          for tool in brotli simg2img img2simg mke2fs e2fsdroid; do
            tool_location=$(which $tool 2>/dev/null)
            if [[ -n "$tool_location" ]]; then
              sudo ln -sf "$tool_location" bin/$tool
              echo "✅ Linked $tool from $tool_location"
            else
              echo "::warning::⚠️ Tool not found: $tool (未找到工具: $tool)"
              # For e2fsdroid, try to find it in alternative locations (对于e2fsdroid，尝试在其他位置查找)
              if [[ "$tool" == "e2fsdroid" ]]; then
                alt_location=$(find /usr -name "e2fsdroid" 2>/dev/null | head -1)
                if [[ -n "$alt_location" ]]; then
                  sudo ln -sf "$alt_location" bin/$tool
                  echo "✅ Linked $tool from alternative location: $alt_location"
                else
                  echo "::error::❌ Required tool not found: $tool (未找到必需工具: $tool)"
                  exit 1
                fi
              fi
            fi
          done
          
          echo "✅ Essential binary tools linked (必需二进制工具链接完成)"
          cd ../..
          
      - name: "🔒 Fix Directory Permissions (修复目录权限)"
        run: |
          echo "Fixing SGSI-build-tool directory permissions (修复SGSI-build-tool目录权限)..."
          sudo chown -R $(id -u):$(id -g) SGSI-build-tool
          sudo chmod -R 755 SGSI-build-tool
          echo "✅ Directory permissions fixed (目录权限已修复)"
          
      - name: "💾 Download ROM File (下载ROM文件)"
        run: |
          rom_path="SGSI-build-tool/10/tmp/${{ steps.config.outputs.rom_name }}"
          rom_url="${{ steps.config.outputs.rom_url }}"
          filename="${{ steps.config.outputs.rom_name }}"
          
          # Create target directory (创建目标目录)
          sudo mkdir -p "$(dirname "$rom_path")"
          
          echo "🚀 Starting ROM download: $filename"
          echo "📥 URL: $rom_url"
          
          max_retries=5
          retry_delay=30
          
          for i in $(seq 1 $max_retries); do
            echo "Attempt $i/$max_retries (尝试 $i/$max_retries)..."
            
            # Prefer aria2 if available (优先使用aria2)
            if command -v aria2c &> /dev/null; then
              echo "⚡ Using aria2 download (multi-threaded) (使用aria2下载 - 多线程)"
              if sudo aria2c -x 8 -s 8 -k 1M "$rom_url" -d "$(dirname "$rom_path")" -o "$(basename "$rom_path")"; then
                echo "✅ aria2 download successful (aria2下载成功)"
                break
              fi
            fi
            
            # Fallback to curl (备用curl)
            if command -v curl &> /dev/null; then
              echo "⚡ Using curl download (使用curl下载)"
              if sudo curl -fL -C - -o "$rom_path" "$rom_url"; then
                echo "✅ curl download successful (curl下载成功)"
                break
              fi
            fi
            
            if [ $i -eq $max_retries ]; then
              echo "::error::❌ ROM download failed (ROM下载失败)"
              exit 1
            fi
            
            echo "🔄 Retrying in ${retry_delay} seconds (${retry_delay}秒后重试)..."
            sleep $retry_delay
          done
          
          echo -e "\n🎉 Download completed (下载完成)"
          echo "📦 File info (文件信息): $(sudo ls -lh "$rom_path")"

      - name: "⚙️ Configure ROM Specific Settings (配置ROM特定设置)"
        run: |
          echo "Starting ROM-specific configuration (开始配置ROM特定设置)..."
          
          # Determine ROM type (确定ROM类型)
          rom_type="Generic"
          if [ "${{ steps.config.outputs.make_miui }}" = "true" ]; then rom_type="MIUI"; fi
          if [ "${{ steps.config.outputs.make_flyme }}" = "true" ]; then rom_type="Flyme"; fi
          if [ "${{ steps.config.outputs.make_coloros }}" = "true" ]; then rom_type="ColorOS"; fi
          if [ "${{ steps.config.outputs.make_h2os }}" = "true" ]; then rom_type="H2OS"; fi
          if [ "${{ steps.config.outputs.make_smartisanos }}" = "true" ]; then rom_type="SmartisanOS"; fi
          if [ "${{ steps.config.outputs.make_zui }}" = "true" ]; then rom_type="ZUI"; fi
          
          echo "ℹ️ Detected ROM type: $rom_type (检测到的ROM类型: $rom_type)"
          
          # Configure Super SGSI (配置Super SGSI)
          if [ "${{ steps.config.outputs.make_super }}" = "true" ]; then
            echo "Configuring Super SGSI (配置Super SGSI)..."
            if [[ -f "SGSI-build-tool/10/make.sh" ]]; then
              sudo sed -i 's/SGSI.sh/dynamic_SGSI.sh/g' SGSI-build-tool/10/make.sh
              echo "Super SGSI configuration completed (Super SGSI配置完成)"
            else
              echo "::warning::⚠️ make.sh script not found, skipping Super SGSI configuration (未找到make.sh脚本，跳过Super SGSI配置)"
            fi
          fi
          
          # Clean up old fixbug script (清理旧的fixbug脚本)
          sudo rm -f SGSI-build-tool/10/fixbug/fixbug.sh
          
          # ColorOS special handling (ColorOS特殊处理)
          if [ "$rom_type" = "ColorOS" ]; then
            echo "Decrypting ColorOS OZIP package (解密ColorOS OZIP包)..."
            if [[ -f "SGSI-build-tool/10/oppo_ozip/ozipdecrypt.py" ]]; then
              sudo python3 SGSI-build-tool/10/oppo_ozip/ozipdecrypt.py "SGSI-build-tool/10/tmp/${{ steps.config.outputs.rom_name }}"
              sudo rm -f "SGSI-build-tool/10/tmp/${{ steps.config.outputs.rom_name }}"
              echo "ColorOS ROM decryption completed (ColorOS ROM解密完成)"
            else
              echo "::error::❌ ozipdecrypt.py script not found (未找到ozipdecrypt.py脚本)"
              exit 1
            fi
          fi
          
          # Apply ROM-specific fix scripts (应用ROM特定的修复脚本)
          if [[ -f "fix/${rom_type}.sh" ]]; then
            echo "Applying $rom_type configuration script (应用$rom_type配置脚本)..."
            sudo cp "fix/${rom_type}.sh" SGSI-build-tool/10/fixbug/fixbug.sh
            sudo chmod +x SGSI-build-tool/10/fixbug/fixbug.sh
            echo "$rom_type configuration completed ($rom_type配置完成)"
          else
            echo "ℹ️ $rom_type configuration script not found, using generic configuration (找不到$rom_type配置脚本，使用通用配置)"
          fi
            
          echo "ROM-specific configuration completed (ROM特定设置配置完成)"
          
      - name: "🔧 Fix Script Syntax Errors (修复脚本语法错误)"
        run: |
          cd SGSI-build-tool/10
          
          echo "Checking and fixing SGSI.sh script errors (检查并修复SGSI.sh脚本错误)..."
          if [[ -f "SGSI.sh" ]]; then
            # More precise fixes to avoid over-replacement (更精确的修复以避免过度替换)
            sudo sed -i 's/\[ *\] *== *"\(.*\)" *]/\[ -n "\1" ]/g' SGSI.sh
            sudo sed -i 's/==/=/g' SGSI.sh
            echo "✅ Script syntax errors fixed (已修复脚本语法错误)"
          else
            echo "::warning::⚠️ SGSI.sh script not found (未找到SGSI.sh脚本)"
          fi
          cd ../..
          
      - name: "📦 Prepare Build Files (准备构建文件)"
        run: |
          echo "Preparing build scripts and tools (准备构建脚本和工具)..."
          
          # Copy custom build scripts (复制自定义构建脚本)
          if [[ -d "make" ]]; then
            echo "Moving build scripts (移动构建脚本)..."
            sudo cp -v make/*.sh SGSI-build-tool/10/
          fi
          
          # Copy binary tools (复制二进制工具)
          if [[ -d "bin" ]]; then
            echo "Moving binary tools (移动二进制工具)..."
            sudo mkdir -p SGSI-build-tool/10/bin
            sudo cp -v bin/* SGSI-build-tool/10/bin/
          fi
          
          # Update symbolic links (更新符号链接)
          cd SGSI-build-tool/10
          for tool in brotli simg2img e2fsdroid; do
            if command -v $tool >/dev/null 2>&1; then
              sudo ln -sf $(which $tool) bin/$tool
            fi
          done
          cd ../..
          
          echo "✅ Build files preparation completed (构建文件准备完成)"
          
      - name: "🏭 Build SGSI Image (构建SGSI镜像)"
        run: |
          cd SGSI-build-tool/10
          
          echo "🏗️ Starting SGSI build (开始构建SGSI)..."
          # Set longer timeout (设置更长的超时时间)
          timeout 60m bash -c '
            if ! sudo bash make.sh 2>&1 | tee make.log; then
              echo "::error::❌ Build failed! (构建失败！)"
              echo "=== Last 100 lines of build log (构建日志最后100行) ==="
              tail -100 make.log
              echo "========================"
              exit 1
            fi
          ' || exit $?
          
          echo "🎉 SGSI image build completed (SGSI镜像构建完成)"
           
      - name: "📦 Package Output Files (打包输出文件)"
        run: |
          cd SGSI-build-tool/10
          
          echo "=== Packaging step (打包步骤) ==="
          
          # Verify SGSI directory exists (验证SGSI目录存在)
          if [[ ! -d "SGSI" ]]; then
            echo "::error::❌ SGSI directory does not exist! (SGSI目录不存在！)"
            echo "Current directory contents (当前目录内容):"
            ls -la
            exit 1
          fi
          
          # Create output filename (创建输出文件名)
          output_file="${{ steps.config.outputs.pack_sgsi }}"
          
          # Fix file ownership before packaging (打包前修复文件所有权)
          echo "Fixing file ownership (修复文件所有权)..."
          sudo chown -R $(id -u):$(id -g) SGSI/
          
          # Package files (打包文件)
          echo "Packaging SGSI to: $output_file"
          if ! zip -r "$output_file" SGSI/*; then
            echo "::error::❌ Packaging failed! (打包失败！)"
            exit 1
          fi
          
          # Prepare upload directory (准备上传目录)
          mkdir -p "${GITHUB_WORKSPACE}/upload"
          file_size=$(stat -c%s "$output_file")
          max_size=2000000000  # 2GB
          
          # Check file size and split if needed (检查文件大小并在需要时分卷)
          if [[ -z "$file_size" ]] || [[ "$file_size" -eq 0 ]]; then
            echo "::error::❌ SGSI production failed or is empty (SGSI产出失败或为空)"
            exit 1
          fi
          
          echo "File size: $(numfmt --to=iec-i $file_size) (文件大小)"
          
          if [[ $file_size -gt $max_size ]]; then
            echo "⚠️ File too large, splitting into parts (文件过大，进行分卷打包)..."
            split -b 1500m -d -a 1 "$output_file" "${output_file}_part"
            # Move split files to upload directory (移动分卷文件到上传目录)
            mv "${output_file}_part"* "${GITHUB_WORKSPACE}/upload/"
            # Delete original large file (删除原始大文件)
            rm "$output_file"
            echo "Split file list (分卷文件列表):"
            ls -lh "${GITHUB_WORKSPACE}/upload"
          else
            echo "Moving file to upload directory (移动文件到上传目录)"
            mv "$output_file" "${GITHUB_WORKSPACE}/upload/"
          fi
          
          # Ensure upload directory has content (确保上传目录有内容)
          echo "=== Upload directory contents (上传目录内容) ==="
          ls -lh "${GITHUB_WORKSPACE}/upload" || true
          echo "===================="
          
          # Save upload directory path (保存上传目录路径)
          echo "UPLOAD_DIR=${GITHUB_WORKSPACE}/upload" >> $GITHUB_ENV
             
      - name: "🏷️ Generate Release Tag (生成发布标签)"
        id: release_tag
        run: |
          current_date=$(date +"%Y%m%d")
          timestamp=$(date +"%H%M%S")
          
          # Determine ROM type based on config (根据配置确定ROM类型)
          rom_type="Generic"
          if [ "${{ steps.config.outputs.make_miui }}" = "true" ]; then rom_type="MIUI"; fi
          if [ "${{ steps.config.outputs.make_flyme }}" = "true" ]; then rom_type="Flyme"; fi
          if [ "${{ steps.config.outputs.make_coloros }}" = "true" ]; then rom_type="ColorOS"; fi
          if [ "${{ steps.config.outputs.make_h2os }}" = "true" ]; then rom_type="H2OS"; fi
          if [ "${{ steps.config.outputs.make_smartisanos }}" = "true" ]; then rom_type="SmartisanOS"; fi
          if [ "${{ steps.config.outputs.make_zui }}" = "true" ]; then rom_type="ZUI"; fi
          
          # Generate unique tag to avoid conflicts (生成唯一标签以避免冲突)
          release_tag="${current_date}_${timestamp}"
          echo "release_tag=$release_tag" >> $GITHUB_OUTPUT
          echo "rom_type=$rom_type" >> $GITHUB_OUTPUT
          echo "Generated release tag: $release_tag (生成的发布标签: $release_tag)"
          echo "ROM type: $rom_type (ROM 类型: $rom_type)"
             
      - name: "🚀 Create Release with Unique Tag (使用唯一标签创建发布)"
        uses: softprops/action-gh-release@v1
        with:
          name: "Auto Build SGSI - ${{ steps.release_tag.outputs.release_tag }}"
          tag_name: "${{ steps.release_tag.outputs.release_tag }}"
          files: "${{ env.UPLOAD_DIR }}/*"
          body: |
            ## SGSI Build Information (构建信息)
            
            **Built at (构建时间):** ${{ steps.release_tag.outputs.release_tag }}
            
            **ROM Type (ROM 类型):** ${{ steps.release_tag.outputs.rom_type }} [自动识别]
            
            ---
            
            🔧 **Note (注意):** This is an experimental build. (这是一个实验性构建)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
             
      - name: "✅ Check Upload Status (检查上传状态)"
        run: |
          if [[ -n "${{ github.event.release }}" ]] && [[ -n "${{ github.event.release.upload_url }}" ]]; then
            echo "🎉 Release created successfully! (发布创建成功！)"
          else
            echo "::warning::⚠️ Release creation may have issues (发布创建可能有问题)"
            echo "Upload artifacts directory contents (上传产物目录内容):"
            ls -la "${{ env.UPLOAD_DIR }}" || true
          fi
             
      - name: "✅ Completion Notification (完成通知)"
        if: success()
        run: |
          echo "🎉 Build completed! (构建完成!)"
          echo "Release tag: ${{ steps.release_tag.outputs.release_tag }} (发布标签)"
          echo "Artifact location: ${{ env.UPLOAD_DIR }} (产物位置)"
