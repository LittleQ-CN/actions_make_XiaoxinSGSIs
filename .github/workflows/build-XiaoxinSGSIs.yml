
name: build_XiaoxinSGSIs

on:
  watch:
    types: [started]

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: 初始化环境
      run: |
        rm -rf SGSI-build-tool upload tmp_fix || true
        mkdir -p tmp_fix
        df -h
        
    - name: 检出代码库
      uses: actions/checkout@v4

    - name: 读取配置文件
      id: config
      run: |
        if [ ! -f sgsi.json ]; then
          echo "::error::sgsi.json 配置文件不存在"
          exit 1
        fi
        
        rom_url=$(jq -r '.rom_url' sgsi.json)
        rom_name=$(jq -r '.rom_name' sgsi.json)
        pack_sgsi=$(jq -r '.pack_sgsi' sgsi.json)
        upload_artifact=$(jq -r '.upload_artifact' sgsi.json)
        upload_wetransfer=$(jq -r '.upload_wetransfer' sgsi.json)
        
        [ "$upload_artifact" == "null" ] && upload_artifact=true
        [ "$upload_wetransfer" == "null" ] && upload_wetransfer=false
        
        if [ -z "$rom_url" ] || [ "$rom_url" == "null" ]; then
          echo "::error::rom_url 未定义"
          exit 1
        fi
        
        rom_types=(miui flyme coloros h2os smartisanos zui)
        type_count=0
        for type in "${rom_types[@]}"; do
          value=$(jq -r ".make_$type" sgsi.json)
          if [ "$value" == "true" ]; then
            ((type_count++))
            current_type=$type
          fi
        done
        
        if [ $type_count -gt 1 ]; then
          echo "::error::只能启用一个ROM类型"
          exit 1
        fi
        
        echo "rom_url=$rom_url" >> $GITHUB_ENV
        echo "rom_name=$rom_name" >> $GITHUB_ENV
        echo "pack_sgsi=$pack_sgsi" >> $GITHUB_ENV
        echo "rom_type=${current_type:-none}" >> $GITHUB_ENV
        echo "upload_artifact=$upload_artifact" >> $GITHUB_ENV
        echo "upload_wetransfer=$upload_wetransfer" >> $GITHUB_ENV
        
        if [ -n "$current_type" ]; then
          cp "fix/${current_type^}.sh" tmp_fix/fixbug.sh
        fi
    
    - name: 下载构建工具
      timeout-minutes: 5
      run: |
        tool_url="https://github.com/xiaoxindada/SGSI-build-tool/releases/download/v1.9/SGSI-build-tool.tar"
        attempts=0
        max_attempts=3
        
        while [ $attempts -lt $max_attempts ]; do
          ((attempts++))
          echo "尝试 #$attempts 下载构建工具..."
          
          if curl -L --fail --retry 3 -o SGSI-build-tool.tar "$tool_url"; then
            echo "下载成功"
            break
          elif wget -c -O SGSI-build-tool.tar "$tool_url"; then
            echo "下载成功"
            break
          else
            echo "下载失败，等待10秒后重试..."
            sleep 10
          fi
        done
        
        if [ ! -f SGSI-build-tool.tar ]; then
          echo "::error::工具包下载失败"
          exit 1
        fi
        
        if ! tar -tf SGSI-build-tool.tar >/dev/null; then
          echo "::error::工具包损坏"
          exit 1
        fi
        
    - name: 设置构建环境
      run: |
        tar -xf SGSI-build-tool.tar
        chmod -R +x SGSI-build-tool
        
        cd SGSI-build-tool/10
        ./setup.sh || echo "忽略非关键错误"
        cd ../..
        
    - name: 下载ROM文件
      timeout-minutes: 30
      run: |
        rom_path="SGSI-build-tool/10/tmp/${{ env.rom_name }}"
        echo "下载ROM: ${{ env.rom_url }}"
        
        if command -v aria2c &>/dev/null; then
          aria2c -x8 -s8 -k1M --retry-wait=30 "${{ env.rom_url }}" -o "$rom_path"
        else
          curl -L -C - --retry 30 --retry-delay 30 "${{ env.rom_url }}" -o "$rom_path"
        fi
        
        min_size=$((100*1024*1024))
        file_size=$(stat -c%s "$rom_path" 2>/dev/null || echo 0)
        
        if [ $file_size -lt $min_size ]; then
          echo "::error::ROM文件异常 (大小: $((file_size/1024/1024))MB)"
          exit 1
        fi
        
        echo "下载完成，大小: $((file_size/1024/1024))MB")
    
    - name: 处理ROM类型
      if: ${{ env.rom_type != 'none' }}
      run: |
        cd SGSI-build-tool/10
        
        case "${{ env.rom_type }}" in
          coloros)
            python3 oppo_ozip/ozipdecrypt.py "tmp/${{ env.rom_name }}"
            decrypted_file="${rom_name%.*}.img"
            if [ -f "tmp/$decrypted_file" ]; then
              rm -f "tmp/${{ env.rom_name }}"
              echo "解密成功: $decrypted_file"
              echo "rom_name=$decrypted_file" >> $GITHUB_ENV
            else
              echo "::error::ColorOS解密失败"
              exit 1
            fi
            ;;
        esac
        
        if [ -f "../../tmp_fix/fixbug.sh" ]; then
          cp -f "../../tmp_fix/fixbug.sh" fixbug/
          chmod +x fixbug/fixbug.sh
          echo "已应用 ${{ env.rom_type }} 修复脚本"
        fi
        
        if [ "$(jq -r '.make_super' ../sgsi.json)" == "true" ]; then
          sed -i 's/SGSI.sh/dynamic_SGSI.sh/g' make.sh
          echo "启用Super分区支持"
        fi
    
    - name: 构建系统镜像
      timeout-minutes: 120
      run: |
        cd SGSI-build-tool/10
        
        if [ -d "../../make" ]; then
          cp -f ../../make/* ./
        fi
        
        if [ -d "../../bin" ]; then
          cp -f ../../bin/* bin/
        fi
        
        find . -name "*.sh" -exec chmod +x {} \;
        chmod +x bin/*
        
        echo "::group::构建日志"
        ./make.sh || build_failed=true
        echo "::endgroup::"
        
        if [ "$build_failed" = true ]; then
          if [ -d "out/system" ]; then
            echo "::warning::构建失败，尝试手动创建镜像"
            size_kb=$(du -sk out/system/ | cut -f1)
            img_size_kb=$((size_kb * 130 / 100))
            img_size_mb=$((img_size_kb / 1024))
            [ $img_size_mb -lt 512 ] && img_size_mb=512
            
            ./bin/make_ext4fs -T 0 -S out/config/system_file_contexts \
                              -C out/config/system_fs_config \
                              -l ${img_size_mb}M -a system out/system.img out/system/
            
            if [ -f "out/system.img" ]; then
              mkdir -p SGSI
              mv out/system.img SGSI/
            else
              echo "::error::无法创建镜像"
              exit 1
            fi
          else
            echo "::error::构建失败且无可用系统文件"
            exit 1
          fi
        fi
        
        mkdir -p ../final_out
        mv SGSI/* ../final_out/ || true
        mv out/*.img ../final_out/ || true
        
        if [ -f "../final_out/system.img" ]; then
          orig_size=$(du -h "../final_out/system.img" | cut -f1)
          echo "原始大小: $orig_size" >> ../final_out/build_info.txt
        fi
    
    - name: 打包补丁
      run: |
        if [ -d "Patch" ]; then
          cd Patch
          for dir in */; do
            if [ -d "$dir" ]; then
              dir_name="${dir%/}"
              echo "打包补丁: $dir_name"
              zip -r -0 "../../SGSI-build-tool/final_out/${dir_name}.zip" "$dir_name"
            fi
          done
          cd ..
        fi
    
    - name: 压缩系统镜像
      run: |
        cd SGSI-build-tool/final_out
        
        if [ -f "system.img" ]; then
          echo "开始压缩system.img..."
          original_size=$(du -h system.img | cut -f1)
          
          if ! command -v pigz &>/dev/null; then
            echo "安装pigz以获得更快压缩速度..."
            sudo apt-get update -qq
            sudo apt-get install -y pigz
          fi
          
          echo "使用pigz进行多线程压缩..."
          pigz -k -f -9 system.img
          
          compressed_size=$(du -h system.img.gz | cut -f1)
          echo "压缩后大小: $compressed_size" >> build_info.txt
          
          orig_bytes=$(stat -c%s system.img)
          comp_bytes=$(stat -c%s system.img.gz)
          ratio=$(echo "scale=2; (1 - $comp_bytes/$orig_bytes) * 100" | bc)
          echo "压缩率: $ratio%" >> build_info.txt
          
          echo "压缩完成: ${original_size} → ${compressed_size} (节省 ${ratio}%)"
          ls -lh system.img*
        else
          echo "未找到system.img，跳过压缩"
        fi
    
    - name: 创建发布包
      run: |
        cd SGSI-build-tool/final_out
        
        if [ -z "$(ls -A .)" ]; then
          echo "::error::无可用输出文件"
          exit 1
        fi
        
        pack_name="${{ env.pack_sgsi }}"
        
        if [ -f "build_info.txt" ]; then
          echo "::group::📦 镜像压缩信息"
          cat build_info.txt
          echo "::endgroup::"
          
          orig_size=$(grep "原始大小" build_info.txt | cut -d: -f2 | xargs)
          comp_size=$(grep "压缩后大小" build_info.txt | cut -d: -f2 | xargs)
          ratio=$(grep "压缩率" build_info.txt | cut -d: -f2 | xargs)
          
          if [ -n "$orig_size" ] && [ -n "$comp_size" ]; then
            echo "✅ 压缩结果: ${orig_size} → ${comp_size} (节省 $ratio)"
          fi
        fi
        
        zip -r -0 "../$pack_name" .
        
        cd ..
        file_size=$(stat -c%s "$pack_name")
        max_size=1400000000
        
        if [ $file_size -gt $max_size ]; then
          echo "分割大文件 (大小: $((file_size/1024/1024))MB)"
          split -b 1000M -d "$pack_name" "${pack_name}_part"
          rm "$pack_name"
        fi
        
        mkdir -p ../upload
        mv "${pack_name}"* ../upload/ || true
        
        # 设置上传文件路径
        echo "OUTPUT_FILE=$(ls $PWD/../upload/$pack_name* | head -n1)" >> $GITHUB_ENV
    
    - name: 发布GitHub版本
      uses: softprops/action-gh-release@v1
      with:
        files: upload/*
        tag_name: build-${{ github.run_number }}
        generate_release_notes: true
        body: |
          构建 #${{ github.run_number }} 已完成！
          查看构建日志获取镜像压缩详情
          
          ${{ env.upload_wetransfer == 'true' && '> ️ **重要提示**：本构建包含WeTransfer下载链接（有效期7天），请在作业摘要中查看详情！' || '' }}
    
    - name: 上传构建产物
      if: ${{ env.upload_artifact == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: SGSI-build-output
        path: upload/*
        retention-days: 7
        
    - name: 上传到WeTransfer
      if: ${{ env.upload_wetransfer == 'true' }}
      run: |
        echo "☁️ 上传到WeTransfer..."
        cd $GITHUB_WORKSPACE
        
        # 检查文件是否存在
        if [ ! -f "$OUTPUT_FILE" ]; then
          echo "::error::要上传的文件不存在: $OUTPUT_FILE"
          exit 1
        fi
        
        # 下载文件传输工具
        echo "安装 file-transfer 工具..."
        curl -sL https://git.io/file-transfer | sh
        
        # 获取文件大小信息
        FILE_SIZE=$(du -h "$OUTPUT_FILE" | cut -f1)
        echo "开始上传文件: $OUTPUT_FILE (大小: $FILE_SIZE)..."
        
        # 计算到期日期
        EXPIRY_DATE=$(date -d "+7 days" "+%Y-%m-%d")
        
        # 上传并获取结果
        TRANSFER_OUTPUT=$(./transfer wet "$OUTPUT_FILE")
        echo "$TRANSFER_OUTPUT"
        
        # 提取下载链接
        DOWNLOAD_LINK=$(echo "$TRANSFER_OUTPUT" | grep -o 'https://we.tl/[^ ]*' | head -n1)
        if [ -n "$DOWNLOAD_LINK" ]; then
          # 添加到工作流摘要（带有效期声明）
          echo "##  WeTransfer 下载地址" >> $GITHUB_STEP_SUMMARY
          echo ">  ⏳ **链接有效期至 ${EXPIRY_DATE}**" >> $GITHUB_STEP_SUMMARY
          echo "[点击下载]($DOWNLOAD_LINK)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "文件: $(basename "$OUTPUT_FILE")" >> $GITHUB_STEP_SUMMARY
          
          # 添加到控制台输出
          echo "✅ WeTransfer上传成功！"
          echo "📥 下载链接: $DOWNLOAD_LINK"
          echo "⏳ 链接有效期至: ${EXPIRY_DATE}"
          
          # 设置环境变量供后续步骤使用
          echo "DOWNLOAD_LINK=$DOWNLOAD_LINK" >> $GITHUB_ENV
          echo "EXPIRY_DATE=$EXPIRY_DATE" >> $GITHUB_ENV
        else
          echo "::warning::未找到下载链接"
          echo "TRANSFER_OUTPUT: $TRANSFER_OUTPUT" # 输出完整结果用于调试
        fi
    
    - name: 显示最终摘要
      run: |
        echo "✅ 构建流程已完成"
        echo "::group::📊 构建摘要"
        echo "ROM URL: ${{ env.rom_url }}"
        echo "ROM名称: ${{ env.rom_name }}"
        echo "ROM类型: ${{ env.rom_type }}"
        echo "构建编号: ${{ github.run_number }}"
        
        # 镜像压缩信息
        if [ -f "SGSI-build-tool/final_out/build_info.txt" ]; then
          orig_size=$(grep "原始大小" SGSI-build-tool/final_out/build_info.txt | cut -d: -f2 | xargs)
          comp_size=$(grep "压缩后大小" SGSI-build-tool/final_out/build_info.txt | cut -d: -f2 | xargs)
          ratio=$(grep "压缩率" SGSI-build-tool/final_out/build_info.txt | cut -d: -f2 | xargs)
          
          if [ -n "$orig_size" ] && [ -n "$comp_size" ]; then
            echo "✨ 镜像大小对比: ${orig_size} → ${comp_size} (节省 ${ratio})"
          fi
        fi
        
        # WeTransfer链接信息
        if [[ -n "$DOWNLOAD_LINK" && -n "$EXPIRY_DATE" ]]; then
          echo ""
          echo "🌐 WeTransfer下载链接: $DOWNLOAD_LINK"
          echo "⏳ 链接有效期至: $EXPIRY_DATE"
        fi
        
        echo "::endgroup::"
