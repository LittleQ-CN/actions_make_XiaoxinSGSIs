name: build_XiaoxinSGSIs_old

on:
  watch:
    types: [started]
    
jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
      - name: "🚀 Checkout Code (检出代码)"
        uses: actions/checkout@v4
       
      - name: "🧹 Clean Environment (清理环境)"
        run: |
          docker rmi -f $(docker images -q) || true
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
          sudo apt-get purge -y azure-cli ghc* zulu* llvm* firefox google* dotnet* openjdk* mysql* php*
          sudo apt-get autoremove -y --purge
          sudo apt-get clean
          df -h
       
      - name: "⚙️ Get Config Vars (获取配置变量)"
        id: var
        run: |
          config=$(jq -r 'to_entries[] | "\(.key)=\(.value)"' sgsi.json)
          while IFS= read -r line; do
            echo "$line" >> $GITHUB_OUTPUT
          done <<< "$config"
           
      - name: "📦 Install Tools (安装工具)"
        run: |
          sudo apt-get update
          sudo apt-get install -y axel curl wget pv aria2 jq
          echo "max-connections=32" | sudo tee -a /etc/axelrc
          echo "✅ Tools installed (工具安装完成)"
           
      - name: "⬇️ Download Build Tools (下载构建工具)"
        run: |
          max_retries=3
          tool_url="https://github.com/xiaoxindada/SGSI-build-tool/releases/download/v1.9/SGSI-build-tool.tar"
          
          for ((i=1; i<=max_retries; i++)); do
            [[ -f SGSI-build-tool.tar ]] && rm SGSI-build-tool.tar
            
            if aria2c -x 16 -s 16 -k 1M -o "SGSI-build-tool.tar" "$tool_url"; then
              echo "✅ Download success (下载成功)"; break
            elif axel -n 32 -U "Mozilla/5.0" -o "SGSI-build-tool.tar" "$tool_url"; then
              echo "✅ Download success (下载成功)"; break
            elif curl -# -fL -o "SGSI-build-tool.tar" "$tool_url"; then
              echo "✅ Download success (下载成功)"; break
            elif wget --show-progress -O "SGSI-build-tool.tar" "$tool_url"; then
              echo "✅ Download success (下载成功)"; break
            else
              echo "❌ Attempt $i failed (尝试 $i 失败)"
              [[ $i -lt max_retries ]] && sleep 10
            fi
          done
          
          [[ ! -f SGSI-build-tool.tar ]] && { echo "::error::❌ All downloads failed (全部下载失败)"; exit 1; }
          
      - name: "🏗️ Setup Env (设置环境)"
        run: |
          sudo tar -xf SGSI-build-tool.tar
          sudo mv bin/setup.sh SGSI-build-tool/10/
          cd SGSI-build-tool/10 && sudo bash setup.sh
          echo "✅ Environment ready (环境就绪)"
           
      - name: "💾 Download ROM (下载ROM)"
        run: |
          rom_path="SGSI-build-tool/10/tmp/${{ steps.var.outputs.rom_name }}"
          rom_url="${{ steps.var.outputs.rom_url }}"
          
          for ((i=1; i<=5; i++)); do
            if aria2c -x 32 -s 32 -k 1M -d "$(dirname "$rom_path")" -o "$(basename "$rom_path")" "$rom_url"; then
              echo "✅ ROM downloaded (ROM下载完成)"; break
            elif axel -n 32 -U "Mozilla/5.0" -o "$rom_path" "$rom_url"; then
              echo "✅ ROM downloaded (ROM下载完成)"; break
            else
              echo "❌ Attempt $i failed (尝试 $i 失败)"
              [[ $i -lt 5 ]] && sleep 10
            fi
          done
          
          [[ ! -f "$rom_path" ]] && { echo "::error::❌ ROM download failed (ROM下载失败)"; exit 1; }
          echo "📦 Size: $(du -h "$rom_path" | cut -f1) (文件大小)"

      - name: "⚙️ Configure ROM (配置ROM)"
        id: configure_rom
        run: |
          # 清理旧配置
          rm -f SGSI-build-tool/10/fixbug/fixbug.sh
          
          # 确定ROM类型
          rom_type=""
          [[ "${{ steps.var.outputs.make_super }}" = "true" ]] && \
            sed -i 's/SGSI.sh/dynamic_SGSI.sh/g' SGSI-build-tool/10/make.sh
          
          # 检测ROM类型
          if [[ "${{ steps.var.outputs.make_miui }}" = "true" ]]; then rom_type="MIUI"; fi
          if [[ "${{ steps.var.outputs.make_flyme }}" = "true" ]]; then rom_type="Flyme"; fi
          if [[ "${{ steps.var.outputs.make_coloros }}" = "true" ]]; then rom_type="ColorOS"; fi
          if [[ "${{ steps.var.outputs.make_h2os }}" = "true" ]]; then rom_type="H2OS"; fi
          if [[ "${{ steps.var.outputs.make_smartisanos }}" = "true" ]]; then rom_type="SmartisanOS"; fi
          if [[ "${{ steps.var.outputs.make_zui }}" = "true" ]]; then rom_type="ZUI"; fi
          
          # 默认使用通用类型
          [[ -z "$rom_type" ]] && rom_type="Generic"
          
          # ColorOS特殊解密
          if [[ "$rom_type" = "ColorOS" ]]; then
            sudo python3 SGSI-build-tool/10/oppo_ozip/ozipdecrypt.py "SGSI-build-tool/10/tmp/${{ steps.var.outputs.rom_name }}"
            sudo rm -f "SGSI-build-tool/10/tmp/${{ steps.var.outputs.rom_name }}"
          fi
          
          # 应用配置脚本
          [[ -f "fix/${rom_type}.sh" ]] && \
            cp "fix/${rom_type}.sh" SGSI-build-tool/10/fixbug/fixbug.sh && \
            echo "✅ $rom_type configured (${rom_type}配置完成)"
            
          # 输出ROM类型
          echo "rom_type=$rom_type" >> $GITHUB_OUTPUT
          
      - name: "🛠️ Build SGSI (构建SGSI)"
        run: |
          cd SGSI-build-tool/10
          sudo mv ../make/*.sh ../bin/{mke2fs,e2fsdroid} .
          sudo bash make.sh
          echo "🎉 Build completed (构建完成)"
             
      - name: "📦 Package Output (打包输出)"
        run: |
          # 打包补丁
          cd SGSI-build-tool/10
          for dir in Patch/Patch{1..3}; do
            zip -r "${dir##*/}.zip" "$dir"/*
            mv "${dir##*/}.zip" SGSI/
          done
          
          # 主打包
          zip -r "${{ steps.var.outputs.pack_sgsi }}" SGSI/*
          
          # 分卷处理
          mkdir -p upload
          file_size=$(stat -c%s "${{ steps.var.outputs.pack_sgsi }}")
          [[ $file_size -gt 2097152000 ]] && \
            split -b 1024m "${{ steps.var.outputs.pack_sgsi }}" "upload/${{ steps.var.outputs.pack_sgsi }}_" || \
            mv "${{ steps.var.outputs.pack_sgsi }}" upload/
            
          echo "📁 Upload contents (上传内容):"
          ls -lh upload
          
      - name: "🏷️ Generate Release Tag (生成发布标签)"
        id: release_tag
        run: |
          # 获取当前日期
          current_date=$(date +"%Y%m%d")
          # 组合标签格式: 日期_系统版本 (如: 20240530_MIUI11)
          release_tag="${current_date}_${{ steps.configure_rom.outputs.rom_type }}"
          echo "release_tag=$release_tag" >> $GITHUB_OUTPUT
          echo "Generated release tag: $release_tag (生成的发布标签: $release_tag)"
             
      - name: "🚀 Upload Artifacts (上传产物)"
        uses: ncipollo/release-action@v1.11.0
        with:
          artifacts: upload/*
          name: xiaoxinSGSI-ab-Android10-unpack
          tag: ${{ steps.release_tag.outputs.release_tag }}  # 使用生成的日期_系统版本标签
          token: ${{ secrets.GITHUB_TOKEN }}
