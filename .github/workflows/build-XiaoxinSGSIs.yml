name: build_XiaoxinSGSIs_Old_With_Ai-fix

on:
  repository_dispatch:
    types: [build-request]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 120

    steps:
    - name: 安装系统依赖
      run: |
        sudo apt-get update -y
        sudo apt-get install -y \
          brotli \
          p7zip-full \
          python3 \
          python3-pip \
          android-sdk-libsparse-utils \
          e2fsprogs \
          simg2img \
          img2simg \
          unzip \
          jq \
          git \
          file \
          tree \
          pigz \
          rsync
        
        pip3 install --upgrade pip
        pip3 install protobuf pycryptodome

    - name: 准备Swap空间
      run: |
        sudo fallocate -l 8G /swapfile
        sudo chmod 600 /swapfile
        sudo mkswap /swapfile
        sudo swapon /swapfile
        free -h

    - name: 检出代码库
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 读取配置文件
      id: config
      run: |
        # 从sgsi.json读取配置
        config=$(cat sgsi.json)
        echo "配置内容:"
        echo "$config"

        for key in $(jq -r 'keys[]' sgsi.json); do
          value=$(jq -r ".$key" sgsi.json)
          echo "$key=$value" >> $GITHUB_ENV
          echo "设置环境变量: $key=$value"
        done

        # 确定ROM类型
        declare -A rom_types=(
          ["make_miui"]="miui"
          ["make_flyme"]="flyme"
          ["make_coloros"]="coloros"
          ["make_h2os"]="h2os"
          ["make_smartisanos"]="smartisanos"
          ["make_zui"]="zui"
        )

        ROM_TYPE=""
        for key in "${!rom_types[@]}"; do
          if [[ "${!key}" == "true" ]]; then
            ROM_TYPE="${rom_types[$key]}"
            break
          fi
        done

        [[ -z "$ROM_TYPE" ]] && ROM_TYPE="standard"
        echo "ROM_TYPE=$ROM_TYPE" >> $GITHUB_ENV
        echo "确定ROM类型: $ROM_TYPE"

        mkdir -p logs

    - name: 下载构建工具
      run: |
        tool_url="https://github.com/xiaoxindada/SGSI-build-tool/releases/download/v1.9/SGSI-build-tool.tar"
        echo "下载构建工具从: $tool_url"
        
        for i in {1..5}; do
          echo "尝试 #$i"
          if curl -fL -o SGSI-build-tool.tar "$tool_url"; then
            echo "下载成功"
            break
          else
            echo "下载失败, 等待10秒后重试..."
            sleep 10
          fi
        done

        if [ ! -f "SGSI-build-tool.tar" ]; then
          echo "::error::无法下载构建工具"
          exit 1
        fi

        tar -xf SGSI-build-tool.tar --no-same-owner
        ls -l SGSI-build-tool/

    - name: 设置构建环境
      run: |
        cd SGSI-build-tool/10
        
        # 修复脚本错误
        sed -i '
          s|\./bin/|bin/|g;
          s|\[ \$MAKETYPE = \]|[ -z "$MAKETYPE" ]|g;
          s|\[ \$INSTALL_TYPE = \]|[ -z "$INSTALL_TYPE" ]|g;
          /chown/d;
        ' SGSI.sh make.sh

        # 创建必要的目录结构
        mkdir -p {bin,fixbug,Patch}
        
        # 创建包装脚本
        cat > bin/brotli << 'EOF'
        #!/bin/bash
        exec /usr/bin/brotli "$@"
        EOF
        
        cat > bin/sdat2img << 'EOF'
        #!/bin/bash
        exec /usr/bin/sdat2img "$@"
        EOF

        for f in bin/*; do chmod +x "$f"; done
        chmod +x *.sh

    - name: 初始化环境
      run: |
        cd SGSI-build-tool
        echo "当前目录: $(pwd)"
        echo "文件列表:"
        ls -l
        
        echo "::group::运行setup.sh"
        sudo ./setup.sh 2>&1 | tee ../../logs/setup.log
        echo "::endgroup::"

    - name: 下载ROM文件
      run: |
        mkdir -p SGSI-build-tool/10/tmp
        cd SGSI-build-tool/10/tmp
        
        echo "下载ROM从: $rom_url"
        echo "保存为: $rom_name"
        
        for i in {1..5}; do
          echo "尝试 #$i"
          if curl -fL -o "$rom_name" "$rom_url"; then
            echo "下载成功"
            break
          else
            echo "下载失败, 等待10秒后重试..."
            sleep 10
          fi
        done

        if [ ! -f "$rom_name" ]; then
          echo "::error::无法下载ROM文件"
          exit 1
        fi

        # 验证文件大小
        filesize=$(stat -c%s "$rom_name")
        echo "ROM文件大小: $filesize 字节"
        if [ "$filesize" -lt 100000000 ]; then
          echo "::error::ROM文件太小, 可能下载不完整"
          exit 1
        fi

    - name: 执行构建
      run: |
        cd SGSI-build-tool/10
        echo "::group::执行make.sh"
        ./make.sh 2>&1 | tee ../../logs/make.log
        echo "::endgroup::"
        
        if [ $? -ne 0 ]; then
          echo "::error::make.sh执行失败"
          exit 1
        fi

        echo "::group::执行SGSI.sh"
        ./SGSI.sh 2>&1 | tee ../../logs/sgsi.log
        echo "::endgroup::"
        
        if [ $? -ne 0 ]; then
          echo "::error::SGSI.sh执行失败"
          exit 1
        fi

        # 收集输出文件
        mkdir -p ../../upload/SGSI
        mv out/* ../../upload/SGSI/ 2>/dev/null || true
        mv SGSI/* ../../upload/SGSI/ 2>/dev/null || true

        if [ -f "system.img" ]; then
          mv system.img ../../upload/SGSI/
        fi

        echo "构建产物:"
        ls -lh ../../upload/SGSI/

    - name: 准备发布包
      run: |
        cd upload/SGSI
        
        # 处理system.img
        if [ -f "system.img.br" ]; then
          echo "解压system.img.br"
          brotli -d system.img.br -o system.img
          rm -f system.img.br
        fi
        
        # 创建说明文件
        cat > README.txt << 'EOF'
        ===== 刷机说明 =====
        1. 进入fastboot模式
        2. 执行: fastboot flash system system.img
        3. 重启设备: fastboot reboot
        EOF
        
        # 创建压缩包
        echo "创建压缩包: $pack_sgsi"
        tar --use-compress-program="pigz -9" -cvf "../$pack_sgsi" .
        
        # 检查文件大小
        filesize=$(stat -c%s "../$pack_sgsi")
        echo "压缩包大小: $((filesize/1024/1024))MB"

    - name: 上传产物
      uses: actions/upload-artifact@v4
      with:
        name: Build-Output
        path: upload/
        retention-days: 1

    - name: 清理Swap空间
      if: always()
      run: |
        sudo swapoff /swapfile
        sudo rm -f /swapfile
