name: build_XiaoxinSGSIs_old

on:
  watch:
    types: [started]
    
jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
      - name: "🚀 Checkout Code (检出代码)"
        uses: actions/checkout@v4
       
      - name: "🧹 Clean Up Environment (清理环境)"
        run: |
          docker rmi -f $(docker images -q) || true
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php* || true
          sudo -E apt-get update
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean 
          df -h
       
      - name: "⚙️ Get Configuration Variables (获取配置变量)"
        run: |
          {
            echo "rom_url=$(jq -r '.rom_url' sgsi.json)"
            echo "rom_name=$(jq -r '.rom_name' sgsi.json)"
            echo "pack_sgsi=$(jq -r '.pack_sgsi' sgsi.json)"
            echo "make_miui=$(jq -r '.make_miui' sgsi.json)"
            echo "make_flyme=$(jq -r '.make_flyme' sgsi.json)"
            echo "make_coloros=$(jq -r '.make_coloros' sgsi.json)"
            echo "make_h2os=$(jq -r '.make_h2os' sgsi.json)"
            echo "make_smartisanos=$(jq -r '.make_smartisanos' sgsi.json)"
            echo "make_zui=$(jq -r '.make_zui' sgsi.json)"
            echo "make_super=$(jq -r '.make_super' sgsi.json)"
          } >> $GITHUB_OUTPUT
        id: var
           
      - name: "📦 Install Download Tools (安装下载工具)"
        run: |
          sudo apt-get update
          sudo apt-get install -y axel curl wget pv aria2
          echo "max-connections = 32" | sudo tee -a /etc/axelrc
          echo "✅ 工具安装完成"
           
      - name: "⬇️ Download Build Tools (下载构建工具)"
        run: |
          tool_url="https://github.com/xiaoxindada/SGSI-build-tool/releases/download/v1.9/SGSI-build-tool.tar"
          filename="SGSI-build-tool.tar"
          echo "🔧 正在下载构建工具: $tool_url"
          
          max_retries=3
          for i in $(seq 1 $max_retries); do
            # 首选curl（简洁进度条）
            if command -v curl &> /dev/null; then
              echo "⚡ 使用curl下载 [$filename]"
              if curl -# -fL -o "$filename" "$tool_url"; then
                echo "✅ 下载成功"
                break
              else
                echo "❌ curl失败，尝试aria2"
              fi
            fi
            
            # 备选aria2（多线程下载）
            if command -v aria2c &> /dev/null; then
              echo "⚡ 使用aria2下载 [$filename] (16线程)"
              if aria2c -x 16 -s 16 -k 1M --file-allocation=trunc -U "Mozilla/5.0" -o "$filename" "$tool_url"; then
                echo "✅ 下载成功"
                break
              else
                echo "❌ aria2失败，尝试axel"
              fi
            fi
            
            # 备选axel（精简进度条）
            if command -v axel &> /dev/null; then
              echo "⚡ 使用32线程Axel下载 [$filename]"
              
              # 获取文件大小
              if size=$(curl -sI "$tool_url" | grep -i content-length | awk '{print $2}' | tr -d '\r'); then
                echo "📊 文件大小: $((size / 1024 / 1024)) MB"
              else
                size=0
              fi
              
              # 启动进度监控
              start_progress_monitor() {
                local file="$1"
                local size="$2"
                echo -n "📥 ${file}: 0%"
                while true; do
                  if [ -f "$file" ]; then
                    current=$(du -b "$file" | cut -f1 2>/dev/null || echo 0)
                    if [ "$size" -gt 0 ] && [ "$current" -gt 0 ]; then
                      percent=$((current * 100 / size))
                      # 避免百分比超过100
                      if [ $percent -gt 100 ]; then percent=100; fi
                      echo -ne "\r📥 ${file}: ${percent}%"
                    fi
                  fi
                  sleep 0.5
                done
              }
              
              # 后台运行进度显示
              start_progress_monitor "$filename" "$size" &
              monitor_pid=$!
              
              # 运行axel下载（静默模式）
              if axel -q -n 32 -U "Mozilla/5.0" -s -k -o "$filename" "$tool_url"; then
                kill $monitor_pid 2>/dev/null
                echo -e "\r📥 ${filename}: 100%"
                echo "✅ 下载成功"
                break
              else
                kill $monitor_pid 2>/dev/null
                echo -e "\n❌ Axel失败，尝试wget"
              fi
            fi
            
            # 最后尝试wget
            if command -v wget &> /dev/null; then
              echo "⚡ 使用wget下载 [$filename]"
              if wget -q --show-progress -O "$filename" "$tool_url"; then
                echo "✅ 下载成功"
                break
              else
                echo "❌ wget失败"
              fi
            fi
            
            if [ $i -lt $max_retries ]; then
              echo "🔄 所有下载方式失败，重试中 ($i/$max_retries)..."
              sleep 10
            else
              echo "::error::❌ 构建工具下载失败"
              exit 1
            fi
          done
          
      - name: "🏗️ Initialize Environment (初始化环境)"
        run: |
          sudo tar -xf SGSI-build-tool.tar
          sudo rm -rf SGSI-build-tool/10/setup.sh
          sudo mv bin/setup.sh SGSI-build-tool/10/
          cd SGSI-build-tool/10
          sudo bash setup.sh
          echo "✅ 环境初始化完成"
           
      - name: "💾 Download ROM File (下载ROM文件)"
        run: |
          rom_path="SGSI-build-tool/10/tmp/${{ steps.var.outputs.rom_name }}"
          rom_url="${{ steps.var.outputs.rom_url }}"
          filename="${{ steps.var.outputs.rom_name }}"
          
          echo "🚀 开始下载: $filename"
          max_retries=5
          
          for i in $(seq 1 $max_retries); do
            # 首选aria2（多线程下载）
            if command -v aria2c &> /dev/null; then
              echo "⚡ 使用aria2下载 [$filename] (32线程)"
              # 使用简洁进度条（通过awk解析输出）
              aria2c -x 32 -s 32 -k 1M --file-allocation=trunc -U "Mozilla/5.0" -o "$rom_path" "$rom_url" 2>&1 | \
                awk '
                  /\[#/ {
                    gsub(/#/, "", $0)
                    split($0, parts, /[()]/)
                    if (length(parts) >= 2) {
                      percent = substr(parts[1], length(parts[1])-4, 5)
                      speed = parts[2]
                      gsub(/ /, "", percent)
                      gsub(/%|,/, "", percent)
                      printf "\r📥 %s: %s%% (%s)", "'"$filename"'", percent, speed
                    }
                  }
                  END {
                    printf "\n"
                  }'
              if [ ${PIPESTATUS[0]} -eq 0 ]; then
                echo "✅ 下载成功"
                break
              else
                echo "❌ aria2失败，尝试axel"
              fi
            fi
            
            # 备选axel（精简进度条）
            if command -v axel &> /dev/null; then
              echo "⚡ 使用32线程Axel下载 [$filename]"
              
              # 获取文件大小
              if size=$(curl -sI "$rom_url" | grep -i content-length | awk '{print $2}' | tr -d '\r'); then
                echo "📊 文件大小: $((size / 1024 / 1024)) MB"
              else
                size=0
              fi
              
              # 启动进度监控
              start_progress_monitor() {
                local file="$1"
                local size="$2"
                local filename=$(basename "$file")
                echo -n "📥 ${filename}: 0%"
                while true; do
                  if [ -f "$file" ]; then
                    current=$(du -b "$file" | cut -f1 2>/dev/null || echo 0)
                    if [ "$size" -gt 0 ] && [ "$current" -gt 0 ]; then
                      percent=$((current * 100 / size))
                      # 避免百分比超过100
                      if [ $percent -gt 100 ]; then percent=100; fi
                      echo -ne "\r📥 ${filename}: ${percent}%"
                    fi
                  fi
                  sleep 0.5
                done
              }
              
              # 后台运行进度显示
              start_progress_monitor "$rom_path" "$size" &
              monitor_pid=$!
              
              # 运行axel下载（静默模式）
              if axel -q -n 32 -U "Mozilla/5.0" -s -k -o "$rom_path" "$rom_url"; then
                kill $monitor_pid 2>/dev/null
                echo -e "\r📥 ${filename}: 100%"
                echo "✅ 下载成功"
                break
              else
                kill $monitor_pid 2>/dev/null
                echo -e "\n❌ Axel失败，尝试curl"
              fi
            fi
            
            # 备选curl（简洁进度条）
            if command -v curl &> /dev/null; then
              echo "⚡ 使用curl下载 [$filename]"
              if curl -# -L -o "$rom_path" "$rom_url"; then
                echo "✅ 下载成功"
                break
              else
                echo "❌ curl失败，尝试wget"
              fi
            fi
            
            # 最后尝试wget
            if command -v wget &> /dev/null; then
              echo "⚡ 使用wget下载 [$filename]"
              if wget -q --show-progress -O "$rom_path" "$rom_url"; then
                echo "✅ 下载成功"
                break
              else
                echo "❌ wget失败"
              fi
            fi
            
            if [ $i -lt $max_retries ]; then
              echo "🔄 所有下载方式失败，重试中 ($i/$max_retries)..."
              sleep 10
            else
              echo "::error::❌ ROM下载失败"
              exit 1
            fi
          done
          
          echo -e "\n🎉 下载完成"
          echo "📦 文件大小: $(du -h "$rom_path" | cut -f1)"
       
      - name: "📦 Package SGSI Output (打包SGSI输出)"
        run: |
          mkdir -p upload
          zip -r ${{ steps.var.outputs.pack_sgsi }} SGSI-build-tool/10/SGSI/*
          file_size=$(du -sb ${{ steps.var.outputs.pack_sgsi }} | awk '{print $1}')
          max_size=2097152000
          
          if [ $file_size -gt $max_size ]; then
            echo "⚠️ 文件过大 ($(numfmt --to=iec $file_size))，进行分割打包..."
            split -b 1024m -d ${{ steps.var.outputs.pack_sgsi }} upload/${{ steps.var.outputs.pack_sgsi }}_
            rm ${{ steps.var.outputs.pack_sgsi }}
            echo "✅ 分割完成: 1GB分块"
          else
            echo "📦 移动文件到上传目录"
            mv ${{ steps.var.outputs.pack_sgsi }} upload/
          fi
          
          echo "📁 上传目录内容:"
          ls -lh "upload"
             
      - name: "🚀 Upload Build Artifacts (上传构建产物)"
        uses: ncipollo/release-action@v1.11.0
        with:
          artifacts: upload/*
          name: xiaoxinSGSI-ab-Android10-unpack
          tag: xiaoxinSGSI-ab-Android10-${{ github.run_number }}
          token: ${{ secrets.GITHUB_TOKEN }}
