name: build_XiaoxinSGSIs_old

on:
  watch:
    types: [started]
    
jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
      - name: "🚀 Checkout Code (检出代码)"
        uses: actions/checkout@v4
       
      - name: "🧹 Clean Up Environment (清理环境)"
        run: |
          docker rmi -f $(docker images -q) || true
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php* || true
          sudo -E apt-get update
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean 
          df -h
       
      - name: "⚙️ Get Configuration Variables (获取配置变量)"
        run: |
          {
            echo "rom_url=$(jq -r '.rom_url' sgsi.json)"
            echo "rom_name=$(jq -r '.rom_name' sgsi.json)"
            echo "pack_sgsi=$(jq -r '.pack_sgsi' sgsi.json)"
            echo "make_miui=$(jq -r '.make_miui' sgsi.json)"
            echo "make_flyme=$(jq -r '.make_flyme' sgsi.json)"
            echo "make_coloros=$(jq -r '.make_coloros' sgsi.json)"
            echo "make_h2os=$(jq -r '.make_h2os' sgsi.json)"
            echo "make_smartisanos=$(jq -r '.make_smartisanos' sgsi.json)"
            echo "make_zui=$(jq -r '.make_zui' sgsi.json)"
            echo "make_super=$(jq -r '.make_super' sgsi.json)"
          } >> $GITHUB_OUTPUT
        id: var
           
      - name: "📦 Install Download Tools (安装下载工具)"
        run: |
          sudo apt-get update
          sudo apt-get install -y axel curl wget pv aria2
          echo "max-connections = 32" | sudo tee -a /etc/axelrc
          echo "✅ 工具安装完成"
           
      - name: "⬇️ Download Build Tools (下载构建工具)"
        run: |
          tool_url="https://github.com/xiaoxindada/SGSI-build-tool/releases/download/v1.9/SGSI-build-tool.tar"
          filename="SGSI-build-tool.tar"
          echo "🔧 正在下载构建工具: $tool_url"
          
          max_retries=3
          for i in $(seq 1 $max_retries); do
            if command -v curl &> /dev/null; then
              echo "⚡ 使用curl下载 [$filename]"
              if curl -# -fL -o "$filename" "$tool_url"; then
                echo "✅ 下载成功"
                break
              else
                echo "❌ curl失败，尝试aria2"
              fi
            fi
            
            if command -v aria2c &> /dev/null; then
              echo "⚡ 使用aria2下载 [$filename] (16线程)"
              if aria2c -x 16 -s 16 -k 1M --file-allocation=trunc -U "Mozilla/5.0" -o "$filename" "$tool_url"; then
                echo "✅ 下载成功"
                break
              else
                echo "❌ aria2失败，尝试axel"
              fi
            fi
            
            if command -v axel &> /dev/null; then
              echo "⚡ 使用32线程Axel下载 [$filename]"
              if axel -q -n 32 -U "Mozilla/5.0" -s -k -o "$filename" "$tool_url"; then
                echo "✅ 下载成功"
                break
              else
                echo "❌ Axel失败，尝试wget"
              fi
            fi
            
            if command -v wget &> /dev/null; then
              echo "⚡ 使用wget下载 [$filename]"
              if wget -q --show-progress -O "$filename" "$tool_url"; then
                echo "✅ 下载成功"
                break
              else
                echo "❌ wget失败"
              fi
            fi
            
            if [ $i -lt $max_retries ]; then
              echo "🔄 所有下载方式失败，重试中 ($i/$max_retries)..."
              sleep 10
            else
              echo "::error::❌ 构建工具下载失败"
              exit 1
            fi
          done
          
      - name: "🏗️ Initialize Environment (初始化环境)"
        run: |
          sudo tar -xf SGSI-build-tool.tar
          sudo rm -rf SGSI-build-tool/10/setup.sh
          sudo mv bin/setup.sh SGSI-build-tool/10/
          cd SGSI-build-tool/10
          sudo bash setup.sh
          echo "✅ 环境初始化完成"
           
      - name: "💾 Download ROM File (下载ROM文件)"
        run: |
          rom_path="SGSI-build-tool/10/tmp/${{ steps.var.outputs.rom_name }}"
          rom_url="${{ steps.var.outputs.rom_url }}"
          filename="${{ steps.var.outputs.rom_name }}"
          
          echo "🚀 开始下载: $filename"
          max_retries=5
          
          for i in $(seq 1 $max_retries); do
            if command -v aria2c &> /dev/null; then
              echo "⚡ 使用aria2下载 [$filename] (32线程)"
              aria2c -x 32 -s 32 -k 1M --file-allocation=trunc -U "Mozilla/5.0" -o "$rom_path" "$rom_url" && echo "✅ 下载成功" && break || echo "❌ aria2失败，尝试axel"
            fi
            
            if command -v axel &> /dev/null; then
              echo "⚡ 使用32线程Axel下载 [$filename]"
              axel -q -n 32 -U "Mozilla/5.0" -s -k -o "$rom_path" "$rom_url" && echo "✅ 下载成功" && break || echo "❌ Axel失败，尝试curl"
            fi
            
            if command -v curl &> /dev/null; then
              echo "⚡ 使用curl下载 [$filename]"
              curl -# -L -o "$rom_path" "$rom_url" && echo "✅ 下载成功" && break || echo "❌ curl失败，尝试wget"
            fi
            
            if command -v wget &> /dev/null; then
              echo "⚡ 使用wget下载 [$filename]"
              wget -q --show-progress -O "$rom_path" "$rom_url" && echo "✅ 下载成功" && break || echo "❌ wget失败"
            fi
            
            if [ $i -lt $max_retries ]; then
              echo "🔄 所有下载方式失败，重试中 ($i/$max_retries)..."
              sleep 10
            else
              echo "::error::❌ ROM下载失败"
              exit 1
            fi
          done
          
          echo -e "\n🎉 下载完成"
          echo "📦 文件大小: $(du -h "$rom_path" | cut -f1)"

      - name: "⚙️ Configure ROM Specific Settings (配置ROM特定设置)"
        run: |
          echo "开始配置ROM特定设置..."
          
          # Super SGSI配置
          if [ "${{ steps.var.outputs.make_super }}" = "true" ]; then
            echo "配置Super SGSI..."
            sed -i 's/SGSI.sh/dynamic_SGSI.sh/g' SGSI-build-tool/10/make.sh
            echo "Super SGSI配置完成"
          fi
          
          # 删除旧的fixbug脚本（为后续配置做准备）
          sudo rm -rf SGSI-build-tool/10/fixbug/fixbug.sh
          
          # MIUI配置
          if [ "${{ steps.var.outputs.make_miui }}" = "true" ]; then
            echo "配置MIUI..."
            cp fix/MIUI.sh SGSI-build-tool/10/fixbug/fixbug.sh
            echo "MIUI配置完成"
          
          # Flyme配置
          elif [ "${{ steps.var.outputs.make_flyme }}" = "true" ]; then
            echo "配置Flyme..."
            cp fix/Flyme.sh SGSI-build-tool/10/fixbug/fixbug.sh
            echo "Flyme配置完成"
          
          # ColorOS配置（特殊处理）
          elif [ "${{ steps.var.outputs.make_coloros }}" = "true" ]; then
            echo "配置ColorOS..."
            echo "解密ColorOS OZIP包..."
            sudo python3 SGSI-build-tool/10/oppo_ozip/ozipdecrypt.py "SGSI-build-tool/10/tmp/${{ steps.var.outputs.rom_name }}"
            sudo rm -rf "SGSI-build-tool/10/tmp/${{ steps.var.outputs.rom_name }}"
            cp fix/ColorOS.sh SGSI-build-tool/10/fixbug/fixbug.sh
            echo "ColorOS配置完成"
          
          # H2OS配置
          elif [ "${{ steps.var.outputs.make_h2os }}" = "true" ]; then
            echo "配置H2OS..."
            cp fix/H2OS.sh SGSI-build-tool/10/fixbug/fixbug.sh
            echo "H2OS配置完成"
          
          # SmartisanOS配置
          elif [ "${{ steps.var.outputs.make_smartisanos }}" = "true" ]; then
            echo "配置SmartisanOS..."
            cp fix/SmartisanOS.sh SGSI-build-tool/10/fixbug/fixbug.sh
            echo "SmartisanOS配置完成"
          
          # ZUI配置
          elif [ "${{ steps.var.outputs.make_zui }}" = "true" ]; then
            echo "配置ZUI..."
            cp fix/ZUI.sh SGSI-build-tool/10/fixbug/fixbug.sh
            echo "ZUI配置完成"
          
          else
            echo "未选择特定ROM配置，使用默认设置"
          fi
          
          echo "ROM特定设置配置完成"
            
      - name: "🛠️ Build SGSI Images (构建SGSI镜像)"
        run: |
          rm -rf SGSI-build-tool/10/SGSI.sh SGSI-build-tool/10/makeimg.sh SGSI-build-tool/10/bin/mke2fs SGSI-build-tool/10/bin/e2fsdroid SGSI-build-tool/10/dynamic_SGSI.sh SGSI-build-tool/10/oppo.sh SGSI-build-tool/10/make.sh
          mv make/makeimg.sh make/SGSI.sh make/dynamic_SGSI.sh make/oppo.sh make/make.sh SGSI-build-tool/10/
          mv bin/mke2fs bin/e2fsdroid SGSI-build-tool/10/bin/
          cd SGSI-build-tool/10
          sudo bash make.sh
          echo "🎉 SGSI镜像构建完成"
           
      - name: "📦 Package Patches (打包补丁文件)"
        run: |
          zip -r Patch1.zip Patch/Patch1/*
          zip -r Patch2.zip Patch/Patch2/*
          zip -r Patch3.zip Patch/Patch3/*
          sudo mv Patch1.zip Patch2.zip Patch3.zip SGSI-build-tool/10/SGSI/
          echo "✅ 补丁文件打包完成"

      - name: "📦 Package SGSI Output (打包SGSI输出)"
        run: |
          mkdir -p upload
          zip -r ${{ steps.var.outputs.pack_sgsi }} SGSI-build-tool/10/SGSI/*
          file_size=$(du -sb ${{ steps.var.outputs.pack_sgsi }} | awk '{print $1}')
          max_size=2097152000
          
          if [ $file_size -gt $max_size ]; then
            echo "⚠️ 文件过大 ($(numfmt --to=iec $file_size))，进行分割打包..."
            split -b 1024m -d ${{ steps.var.outputs.pack_sgsi }} upload/${{ steps.var.outputs.pack_sgsi }}_
            rm ${{ steps.var.outputs.pack_sgsi }}
            echo "✅ 分割完成: 1GB分块"
          else
            echo "📦 移动文件到上传目录"
            mv ${{ steps.var.outputs.pack_sgsi }} upload/
          fi
          
          echo "📁 上传目录内容:"
          ls -lh "upload"
             
      - name: "🚀 Upload Build Artifacts (上传构建产物)"
        uses: ncipollo/release-action@v1.11.0
        with:
          artifacts: upload/*
          name: xiaoxinSGSI-ab-Android10-unpack
          tag: xiaoxinSGSI-ab-Android10-${{ github.run_number }}
          token: ${{ secrets.GITHUB_TOKEN }}
