name: build_XiaoxinSGSIs_Old_With_Ai-fix

on:
  watch:
    types: [started]

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: 安装系统依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          brotli \
          p7zip-full \
          python3 \
          python3-pip \
          android-sdk-libsparse-utils \
          e2fsprogs \
          simg2img \
          img2simg \
          unzip \
          jq \
          git \
          file \
          tree \
          pigz \
          pbzip2 \
          coreutils \
          rsync
        
        pip3 install protobuf pycryptodome
        echo "所有必需依赖已安装"
        
    - name: 准备Swap空间
      run: |
        sudo fallocate -l 4G /swapfile
        sudo chmod 600 /swapfile
        sudo mkswap /swapfile
        sudo swapon /swapfile
        free -h
        
    - name: 检出代码库
      uses: actions/checkout@v4
      
    - name: 清理工作区
      run: |
        rm -rf SGSI-build-tool upload logs || true
        df -h
        
    - name: 读取配置文件
      id: var
      run: |
        # 一次性读取所有配置
        declare -A config
        while IFS="=" read -r key value; do
          config[$key]="$value"
          echo "$key=$value" >> $GITHUB_ENV
        done < <(jq -r 'to_entries[] | "\(.key)=\(.value)"' sgsi.json)
        
        # 设置ROM类型标记
        echo "ROM_TYPE=$(jq -r '[
          if .make_miui then "miui" else empty end,
          if .make_flyme then "flyme" else empty end,
          if .make_coloros then "coloros" else empty end,
          if .make_h2os then "h2os" else empty end,
          if .make_smartisanos then "smartisanos" else empty end,
          if .make_zui then "zui" else empty end
        ] | first // "standard"' sgsi.json)" >> $GITHUB_ENV
        
        # 创建日志目录
        mkdir -p logs
        
    - name: 缓存构建工具
      id: tool-cache
      uses: actions/cache@v4
      with:
        path: SGSI-build-tool.tar
        key: ${{ runner.os }}-sgsitool-v1.9-${{ hashFiles('sgsi.json') }}
        
    - name: 下载构建工具 (缓存未命中)
      if: steps.tool-cache.outputs.cache-hit != 'true'
      run: |
        tool_url="https://github.com/xiaoxindada/SGSI-build-tool/releases/download/v1.9/SGSI-build-tool.tar"
        max_retries=5
        for i in $(seq 1 $max_retries); do
          echo "下载构建工具 (尝试 $i/$max_retries)"
          if command -v curl &> /dev/null; then
            curl -fL -o SGSI-build-tool.tar "$tool_url" && break
          else
            wget -c -O SGSI-build-tool.tar "$tool_url" && break
          fi
          sleep 10
        done
        
        if [ ! -f SGSI-build-tool.tar ]; then
          echo "::error::工具包下载失败" | tee -a logs/error.log
          exit 1
        fi
        
    - name: 设置构建环境
      run: |
        tar -xf SGSI-build-tool.tar --no-same-owner --no-overwrite-dir
        
        # 使用系统工具替代内置工具
        ln -sf $(which brotli) SGSI-build-tool/10/bin/brotli
        ln -sf $(which sdat2img) SGSI-build-tool/10/bin/sdat2img
        ln -sf $(which simg2img) SGSI-build-tool/10/bin/simg2img
        ln -sf $(which img2simg) SGSI-build-tool/10/bin/img2simg
        
        # 修复脚本错误
        sed -i '
          8s/\[ \$MAKETYPE = \]/[ -z "$MAKETYPE" ]/g;
          11s/\[ \$INSTALL_TYPE = \]/[ -z "$INSTALL_TYPE" ]/g;
          s|\./bin/|bin/|g;
          /chown/d;
        ' SGSI-build-tool/10/SGSI.sh SGSI-build-tool/10/make.sh
        
        chmod +x SGSI-build-tool/10/*.sh
        chmod +x SGSI-build-tool/10/bin/*
        
    - name: 初始化环境
      run: |
        cd SGSI-build-tool/10
        mv ../../bin/setup.sh .
        echo "::group::运行环境初始化脚本"
        sudo bash setup.sh 2>&1 | tee -a ../../logs/setup.log
        echo "::endgroup::"
        cd ../..
        
    - name: 磁盘空间监控
      run: |
        echo "::group::磁盘空间检查"
        df -h | tee -a logs/disk.log
        min_free=10
        free_space=$(df -BG . | awk 'NR==2 {print $4}' | tr -d 'G')
        [ "$free_space" -lt "$min_free" ] && {
          echo "::error::磁盘空间不足! 需要 ${min_free}GB, 当前 ${free_space}GB" | tee -a logs/error.log
          exit 1
        }
        echo "::endgroup::"
        
    - name: 下载ROM文件
      run: |
        mkdir -p SGSI-build-tool/10/tmp
        rom_path="SGSI-build-tool/10/tmp/${{ env.rom_name }}"
        
        function download_with_progress() {
          if command -v curl &> /dev/null; then
            curl -# -L -k -C - "$1" -o "$2" 2>&1 | tee -a logs/download.log
          else
            wget --progress=bar:force -c "$1" -O "$2" 2>&1 | tee -a logs/download.log
          fi
        }
        
        max_retries=5
        for i in $(seq 1 $max_retries); do
          download_with_progress "${{ env.rom_url }}" "$rom_path" && break
          sleep 10
        done

        if [ ! -f "$rom_path" ] || [ $(stat -c%s "$rom_path") -lt 100000000 ]; then
          echo "::error::ROM文件无效" | tee -a logs/error.log
          exit 1
        fi
        
    - name: 设置ROM特定配置
      run: |
        cd SGSI-build-tool/10
        ROM_TYPE="${{ env.ROM_TYPE }}"
        
        # 解密ColorOS ROM
        if [[ "$ROM_TYPE" == "coloros" ]]; then
          echo "::group::解密ColorOS ROM"
          python3 oppo_ozip/ozipdecrypt.py "tmp/${{ env.rom_name }}" 2>&1 | tee -a ../../logs/decrypt.log
          decrypted_name="${rom_name%.ozip}.zip"
          echo "rom_name=$decrypted_name" >> $GITHUB_ENV
          echo "::endgroup::"
        fi
        
        # 设置修复脚本
        declare -A rom_fixes=(
          ["miui"]="MIUI.sh"
          ["flyme"]="Flyme.sh"
          ["coloros"]="ColorOS.sh"
          ["h2os"]="H2OS.sh"
          ["smartisanos"]="SmartisanOS.sh"
          ["zui"]="ZUI.sh"
        )
        
        if [ -n "${rom_fixes[$ROM_TYPE]}" ]; then
          cp "../../fix/${rom_fixes[$ROM_TYPE]}" fixbug/fixbug.sh
          chmod +x fixbug/fixbug.sh
        fi
        
        # 启用Super分区支持
        [[ "${{ env.make_super }}" == "true" ]] && sed -i 's/SGSI.sh/dynamic_SGSI.sh/g' make.sh
        
        cd ../..
        
    - name: 执行并行构建
      run: |
        cd SGSI-build-tool/10
        
        # 创建详细日志文件
        echo "构建开始时间: $(date)" > ../../logs/build.log
        echo "构建参数: ROM_TYPE=$ROM_TYPE, make_super=${{ env.make_super }}" >> ../../logs/build.log
        
        # 主构建过程
        echo "::group::运行主构建"
        ./make.sh 2>&1 | tee -a ../../logs/build.log
        if [ ${PIPESTATUS[0]} -ne 0 ]; then
          echo "::error::构建失败" | tee -a ../../logs/error.log
          # 保存错误日志
          [ -f error.log ] && cp error.log ../../logs/build-error.log
          exit 1
        fi
        echo "::endgroup::"
        
        # 生成SGSI镜像
        echo "::group::生成SGSI镜像"
        ./SGSI.sh 2>&1 | tee -a ../../logs/sgsi-build.log
        if [ ${PIPESTATUS[0]} -ne 0 ]; then
          echo "::error::SGSI生成失败" | tee -a ../../logs/error.log
          exit 1
        fi
        echo "::endgroup::"
        
        # 准备上传目录
        mkdir -p ../../upload/SGSI
        mv out/* SGSI/* ../../upload/SGSI/
        
    - name: 打包补丁
      run: |
        echo "::group::打包补丁"
        cd SGSI-build-tool/10/Patch
        
        # 并行打包
        (
          zip -r Patch1.zip Patch1/* 2>&1 | tee -a ../../../logs/patch.log
        ) &
        (
          zip -r Patch2.zip Patch2/* 2>&1 | tee -a ../../../logs/patch.log
        ) &
        (
          zip -r Patch3.zip Patch3/* 2>&1 | tee -a ../../../logs/patch.log
        ) &
        wait
        
        mv Patch*.zip ../../../upload/SGSI/
        echo "::endgroup::"
        
    - name: 并行压缩SGSI
      run: |
        echo "::group::压缩SGSI"
        cd upload/SGSI
        
        # 使用pigz多线程压缩
        tar --use-compress-program="pigz -9 -k" -cf "${{ env.pack_sgsi }}.tar.gz" . 2>&1 | tee -a ../../logs/compress.log
        
        # 检查文件大小
        file_size=$(stat -c%s "${{ env.pack_sgsi }}.tar.gz")
        max_size=2000000000
        
        if [ $file_size -gt $max_size ]; then
            echo "分割超大文件..." | tee -a ../../logs/compress.log
            split -d -b 1024m "${{ env.pack_sgsi }}.tar.gz" "${pack_sgsi}_part" 2>&1 | tee -a ../../logs/compress.log
            rm "${{ env.pack_sgsi }}.tar.gz"
        else
            mv "${{ env.pack_sgsi }}.tar.gz" "${{ env.pack_sgsi }}"
        fi
        
        echo "最终文件列表:" | tee -a ../../logs/compress.log
        ls -lh | tee -a ../../logs/compress.log
        echo "::endgroup::"
        
    - name: 收集所有日志
      if: always()
      run: |
        echo "收集所有日志文件..."
        mkdir -p upload/logs
        
        # 收集构建日志
        [ -d logs ] && rsync -av logs/ upload/logs/
        
        # 收集SGSI工具日志
        [ -d SGSI-build-tool/10 ] && find SGSI-build-tool/10 -name "*.log" -exec cp --parents {} upload/logs/ \;
        
        # 创建日志索引
        echo "日志文件清单:" > upload/logs/index.txt
        find upload/logs -type f -printf "%p - %s bytes\n" >> upload/logs/index.txt
        
        # 压缩日志目录
        cd upload
        tar -czf logs.tar.gz logs
        rm -rf logs  # 删除未压缩的日志目录
        cd ..
        
        echo "日志收集完成"
        
    - name: 清理工作空间
      run: |
        # 保留必要的构建结果
        mkdir -p upload
        mv SGSI-build-tool/10/tmp/${{ env.rom_name }} upload/ || true
        
        # 清理大文件释放空间
        rm -rf SGSI-build-tool
        df -h
        
    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: XiaoxinSGSI
        path: upload
        retention-days: 1
        
    - name: 清理Swap空间
      if: always()
      run: |
        sudo swapoff /swapfile
        sudo rm /swapfile
