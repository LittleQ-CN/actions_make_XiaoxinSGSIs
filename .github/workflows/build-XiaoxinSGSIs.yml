name: build_XiaoxinSGSIs

on:
  watch:
    types: [started]

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: 检出代码
      uses: actions/checkout@v3
      
    - name: 清理工作区
      run: |
        rm -rf SGSI-build-tool || true
        df -h
        
    - name: 读取配置变量
      id: var
      run: |
        echo "rom_url=$(jq -r '.rom_url' sgsi.json)" >> $GITHUB_OUTPUT
        echo "rom_name=$(jq -r '.rom_name' sgsi.json)" >> $GITHUB_OUTPUT
        echo "pack_sgsi=$(jq -r '.pack_sgsi' sgsi.json)" >> $GITHUB_OUTPUT
        echo "make_miui=$(jq -r '.make_miui' sgsi.json)" >> $GITHUB_OUTPUT
        echo "make_flyme=$(jq -r '.make_flyme' sgsi.json)" >> $GITHUB_OUTPUT
        echo "make_coloros=$(jq -r '.make_coloros' sgsi.json)" >> $GITHUB_OUTPUT
        echo "make_h2os=$(jq -r '.make_h2os' sgsi.json)" >> $GITHUB_OUTPUT
        echo "make_smartisanos=$(jq -r '.make_smartisanos' sgsi.json)" >> $GITHUB_OUTPUT
        echo "make_zui=$(jq -r '.make_zui' sgsi.json)" >> $GITHUB_OUTPUT
        echo "make_super=$(jq -r '.make_super' sgsi.json)" >> $GITHUB_OUTPUT
        
    - name: 下载构建工具
      run: |
        wget -c https://github.com/xiaoxindada/SGSI-build-tool/releases/download/v1.9/SGSI-build-tool.tar
        if [ ! -f SGSI-build-tool.tar ]; then
          echo "::error::工具包下载失败"
          exit 1
        fi
        
    - name: 初始化环境
      run: |
        # 安全解压文件，避免权限问题
        tar -xf SGSI-build-tool.tar --no-same-owner
        
        if [ ! -d "SGSI-build-tool" ]; then
          echo "::error::未找到SGSI-build-tool目录"
          ls -la
          exit 1
        fi
        
        # 仅设置必要的权限，避免chown
        find SGSI-build-tool -type d -exec chmod 775 {} +
        find SGSI-build-tool -type f -exec chmod 664 {} +
        
        # 确保关键目录可执行
        chmod +x SGSI-build-tool/10/setup.sh
        chmod +x SGSI-build-tool/10/make.sh
        
        cd SGSI-build-tool/10
        bash setup.sh
        cd ../..
        
    - name: 下载ROM
      run: wget -c ${{ steps.var.outputs.rom_url }} -O SGSI-build-tool/10/tmp/${{ steps.var.outputs.rom_name }}
    
    - name: 构建Super分区SGSI
      if: ${{ steps.var.outputs.make_super == 'true' }}
      run: sed -i 's/SGSI.sh/dynamic_SGSI.sh/g' SGSI-build-tool/10/make.sh
    
    - name: 生成MIUI SGSI
      if: ${{ steps.var.outputs.make_miui == 'true' }}
      run: |
        rm -f SGSI-build-tool/10/fixbug/fixbug.sh
        mv fix/MIUI.sh SGSI-build-tool/10/fixbug/fixbug.sh
        chmod +x SGSI-build-tool/10/fixbug/fixbug.sh
        
    - name: 生成Flyme SGSI
      if: ${{ steps.var.outputs.make_flyme == 'true' }}
      run: |
        rm -f SGSI-build-tool/10/fixbug/fixbug.sh
        mv fix/Flyme.sh SGSI-build-tool/10/fixbug/fixbug.sh
        chmod +x SGSI-build-tool/10/fixbug/fixbug.sh
        
    - name: 生成ColorOS SGSI
      if: ${{ steps.var.outputs.make_coloros == 'true' }}
      run: |
        python3 SGSI-build-tool/10/oppo_ozip/ozipdecrypt.py SGSI-build-tool/10/tmp/${{ steps.var.outputs.rom_name }}
        rm -f SGSI-build-tool/10/tmp/${{ steps.var.outputs.rom_name }} SGSI-build-tool/10/fixbug/fixbug.sh
        mv fix/ColorOS.sh SGSI-build-tool/10/fixbug/f极速版ixbug.sh
        chmod +x SGSI-build-tool/10/fixbug/fixbug.sh
        
    - name: 生成H2OS SGSI
      if: ${{ steps.var.outputs.make_h2os == 'true' }}
      run: |
        rm -f SGSI-build-tool/10/fixbug/fixbug.sh
        mv fix/H2OS.sh SGSI-build-tool/10/fixbug/fixbug.sh
        chmod +x SGSI-build-tool/10/fixbug/fixbug.sh
        
    - name: 生成SmartisanOS SGSI
      if: ${{ steps.var.outputs.make_smartisanos == 'true' }}
      run: |
        rm -f SGSI-build-tool/10/fixbug/fixbug.sh
        mv fix/SmartisanOS.sh SGSI-build-tool/10/fixbug/fixbug.sh
        chmod +x SGSI-build-tool/10/fixbug/fixbug.sh
        
    - name: 生成ZUI SGSI
      if: ${{ steps.var.outputs.make_zui == 'true' }}
      run: |
        rm -f SGSI-build-tool/10/fixbug/fixbug.sh
        mv fix/ZUI.sh SGSI-build-tool/10/fixbug/fixbug.sh
        chmod +x SGSI-build-tool/10/fixbug/fixbug.sh
         
    - name: 生成SGSI镜像
      timeout-minutes: 120
      run: |
        # 清理文件
        rm -f SGSI-build-tool/10/SGSI.sh SGSI-build-tool/10/makeimg.sh SGSI-build-tool/10/dynamic_SGSI.sh SGSI-build-tool/10/oppo.sh
        
        # 移动文件
        mv make/* SGSI-build-tool/10/
        mv bin/* SGSI-build-tool/10/bin/
        
        # 设置关键工具权限
        chmod +x SGSI-build-tool/10/make.sh
        chmod +x SGSI-build-tool/10/bin/mke2fs
        chmod +x SGSI-build-tool/10/bin/e2fsdroid
        
        # 进入目录
        cd SGSI-build-tool/10
        
        # 创建目录结构
        mkdir -p out/system out/config
        mkdir -p out/system/{bin,etc,lib,usr,framework,app,priv-app,vendor}
        
        # 创建默认配置文件
        echo "# 默认文件上下文" > out/config/system_file_contexts
        echo "/system(/.*)? u:object_r:system_file:s0" >> out/config/system_file_contexts
        echo "/vendor(/.*)? u:object_r:vendor_file:s0" >> out/config/system_file_contexts
        
        echo "# 默认文件系统配置" > out/config/system_fs_config
        echo "/system 0 0 755" >> out/config/system_fs_config
        echo "/vendor 0 0 755" >> out/config/system_fs_config
        
        # 执行构建
        bash make.sh
        
        # 检查结果
        if [ ! -f "out/system.img" ]; then
          echo "::warning::system.img未生成，尝试手动创建"
          ./bin/mke2fs -t ext4 -L /system -b 4096 -m 0 out/system.img 512M
          ./bin/e2fsdroid -e -T 1230768000 -C out/config/system_fs_config -S out/config/system_file_contexts -f out/system/ -a /system out/system.img || true
          if [ ! -f "out/system.img" ]; then
            echo "::error::无法生成system.img"
            exit 1
          fi
        fi
        
        # 移动镜像
        mv out/system.img SGSI/
        
    - name: 打包补丁文件
      run: |
        zip -r Patch1.zip Patch/Patch1/*
        zip -r Patch2.zip Patch/Patch2/*
        zip -r Patch3.zip Patch/Patch3/*
        mv Patch1.zip Patch2.zip Patch3.zip SGSI-build-tool/10/SGSI/

    - name: 压缩SGSI成果物
      run: |
        mkdir -p upload
        cd SGSI-build-tool/10/SGSI
        zip -r ../../../../${{ steps.var.outputs.pack_sgsi }} *
        cd ../../../../
        
        filesize=$(stat -c%s "${{ steps.var.outputs.pack_sgsi }}")
        max_size=2000000000
        
        if [ $filesize -gt $max_size ]; then
          echo "::notice::文件过大($filesize字节)，进行分割打包..."
          split -b 1000m "${{ steps.var.outputs.pack_sgsi }}" "upload/${{ steps.var.outputs.pack_sgsi }}_part_"
        else
          mv "${{ steps.var.outputs.pack_sgsi }}" upload/
        fi
        ls -lh upload
          
    - name: 发布SGSI版本
      uses: ncipollo/release-action@v1.8.6
      with:
        artifacts: upload/*
        name: xiaoxinSGSI-ab-Android10-unpack
        tag: xiaoxinSGSI-ab-Android10-${{ github.run_number }}
        token: ${{ secrets.GITHUB_TOKEN }}
