
name: build_XiaoxinSGSIs_test

on:
  watch:
    types: [started]
    
jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
      - name: Checkout
        uses: actions/checkout@main
      
      - name: Clean Up
        run: |
          docker rmi $(docker images -q) || true
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php* || true
          sudo -E apt-get update
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean 
      
      - name: Get variables
        id: var
        run: |
          echo "rom_url=$(jq -r '.rom_url' sgsi.json)" >> $GITHUB_OUTPUT
          echo "rom_name=$(jq -r '.rom_name' sgsi.json)" >> $GITHUB_OUTPUT
          echo "pack_sgsi=$(jq -r '.pack_sgsi' sgsi.json)" >> $GITHUB_OUTPUT
          echo "make_miui=$(jq -r '.make_miui' sgsi.json)" >> $GITHUB_OUTPUT
          echo "make_flyme=$(jq -r '.make_flyme' sgsi.json)" >> $GITHUB_OUTPUT
          echo "make_coloros=$(jq -r '.make_coloros' sgsi.json)" >> $GITHUB_OUTPUT
          echo "make_h2os=$(jq -r '.make_h2os' sgsi.json)" >> $GITHUB_OUTPUT
          echo "make_smartisanos=$(jq -r '.make_smartisanos' sgsi.json)" >> $GITHUB_OUTPUT
          echo "make_zui=$(jq -r '.make_zui' sgsi.json)" >> $GITHUB_OUTPUT
          echo "make_super=$(jq -r '.make_super' sgsi.json)" >> $GITHUB_OUTPUT
          echo "upload_transfer=$(jq -r '.upload_transfer' sgsi.json)" >> $GITHUB_OUTPUT
          echo "upload_artifact=$(jq -r '.upload_artifact' sgsi.json)" >> $GITHUB_OUTPUT
          
      - name: Download XiaoxinSGSIs Tools
        run: |
          tool_url="https://github.com/xiaoxindada/SGSI-build-tool/releases/download/v2.0/SGSI-build-tool.tar"
          filename="SGSI-build-tool.tar"
          
          echo "🔧 Starting build tools download (开始下载构建工具)..."
          max_retries=5
          retry_delay=10
          
          for i in $(seq 1 $max_retries); do
            if curl -fL -o "$filename" "$tool_url"; then
              echo "✅ Download successful (下载成功)"
              break
            else
              echo "❌ Download failed (尝试 $i/$max_retries) (下载失败)"
              if [ $i -eq $max_retries ]; then
                echo "::error::❌ Build tools download failed (构建工具下载失败)"
                exit 1
              fi
              echo "🔄 Retrying in ${retry_delay}seconds (${retry_delay}秒后重试)..."
              sleep $retry_delay
            fi
          done
           
      - name: Initialization environment
        run: |
          sudo tar -xf SGSI-build-tool.tar
          sudo rm -rf SGSI-build-tool/10/setup.sh
          sudo mv bin/setup.sh SGSI-build-tool/10/
          cd SGSI-build-tool/10
          sudo bash setup.sh
           
      - name: Download Rom
        run: sudo wget -c "${{ steps.var.outputs.rom_url }}" -O "SGSI-build-tool/10/tmp/${{ steps.var.outputs.rom_name }}"
       
      - name: Build Super SGSI
        if: ${{ steps.var.outputs.make_super == 'true' }}
        run: |
          cd SGSI-build-tool/10
          sed -i 's/SGSI.sh/dynamic_SGSI.sh/g' make.sh
       
      - name: Make MIUI SGSI
        if: ${{ steps.var.outputs.make_miui == 'true' }}
        run: |
          cd SGSI-build-tool/10
          sudo rm -rf fixbug/fixbug.sh
          cp ../../fix/MIUI.sh fixbug/fixbug.sh
           
      - name: Make Flyme SGSI
        if: ${{ steps.var.outputs.make_flyme == 'true' }}
        run: |
          cd SGSI-build-tool/10
          sudo rm -rf fixbug/fixbug.sh
          cp ../../fix/Flyme.sh fixbug/fixbug.sh
           
      - name: Make ColorOS SGSI
        if: ${{ steps.var.outputs.make_coloros == 'true' }}
        run: |
          cd SGSI-build-tool/10
          sudo python3 oppo_ozip/ozipdecrypt.py "tmp/${{ steps.var.outputs.rom_name }}"
          sudo rm -rf "tmp/${{ steps.var.outputs.rom_name }}" fixbug/fixbug.sh
          cp ../../fix/ColorOS.sh fixbug/fixbug.sh
           
      - name: Make H2OS SGSI
        if: ${{ steps.var.outputs.make_h2os == 'true' }}
        run: |
          cd SGSI-build-tool/10
          sudo rm -rf fixbug/fixbug.sh
          cp ../../fix/H2OS.sh fixbug/fixbug.sh
           
      - name: Make SmartisanOS SGSI
        if: ${{ steps.var.outputs.make_smartisanos == 'true' }}
        run: |
          cd SGSI-build-tool/10
          sudo rm -rf fixbug/fixbug.sh
          cp ../../fix/SmartisanOS.sh fixbug/fixbug.sh
           
      - name: Make ZUI SGSI
        if: ${{ steps.var.outputs.make_zui == 'true' }}
        run: |
          cd SGSI-build-tool/10
          sudo rm -rf fixbug/fixbug.sh
          cp ../../fix/ZUI.sh fixbug/fixbug.sh
            
      - name: Generate SGSI
        run: |
          cd SGSI-build-tool/10
          
          # 修复关键文件缺失问题
          cp -r ../../bin/. bin/
          cp -r ../../make/. .
          cp -r ../../tools/new_fs/. new_fs/
          cp -r ../../tools/add_lib/. add_lib/
          cp -r ../../tools/add_lib64/. add_lib64/
          cp -r ../../tools/mergefs/. mergefs/
          cp -r ../../tools/cp_phh/. cp_phh/
          cp -r ../../tools/phh_lib64/. phh_lib64/
          cp -r ../../tools/phh_lib/. phh_lib/
          
          # 设置执行权限
          chmod +x SGSI.sh makeimg.sh dynamic_SGSI.sh oppo.sh make.sh
          chmod +x bin/mke2fs bin/e2fsdroid
          chmod +x new_fs/*.sh
          chmod +x add_lib/*.sh
          chmod +x add_lib64/*.sh
          chmod +x mergefs/*.sh
          chmod +x phh_lib64/*.sh
          
          sudo bash make.sh

      - name: Make Patch Module
        run: |
          cd SGSI-build-tool/10
          
          # 确保out目录存在
          if [ -d "out/vendor" ]; then
            zip -r Patchmod.zip out/vendor/app/* out/vendor/bin/* out/vendor/etc/* out/vendor/lib/* out/vendor/lib64/* out/vendor/overlay/*
            mv Patchmod.zip SGSI/
          else
            echo "::warning::out/vendor directory not found (out/vendor目录不存在)"
          fi
           
      - name: Zip Patch  
        run: |
          cd SGSI-build-tool/10
          
          # 确保Patch目录存在
          if [ -d "../../Patch" ]; then
            cd ../../Patch
            zip -r Patch1.zip Patch1/*
            zip -r Patch2.zip Patch2/*
            zip -r Patch3.zip Patch3/*
            mv Patch1.zip Patch2.zip Patch3.zip ../SGSI-build-tool/10/SGSI/
          else
            echo "::warning::Patch directory not found (Patch目录不存在)"
          fi

      - name: 7z SGSI
        run: |
          cd SGSI-build-tool/10
          
          # 确保SGSI目录存在
          if [ -d "SGSI" ]; then
            7za a -t7z -r "${{ steps.var.outputs.pack_sgsi }}" SGSI/*
          else
            echo "::error::SGSI directory not found (SGSI目录不存在)"
            exit 1
          fi

      - name: Upload SGSI to WeTransfer
        if: ${{ steps.var.outputs.upload_transfer == 'true' }}
        run: |
          cd SGSI-build-tool/10
          curl -sL https://git.io/file-transfer | sh
          ./transfer wet "${{ steps.var.outputs.pack_sgsi }}"
          
      - name: Upload SGSI to Artifact
        if: ${{ steps.var.outputs.upload_artifact == 'true' }}
        uses: actions/upload-artifact@v4
        with: 
          name: XiaoxinSGSIs
          path: "SGSI-build-tool/10/${{ steps.var.outputs.pack_sgsi }}"
