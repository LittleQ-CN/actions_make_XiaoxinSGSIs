name: Build_XiaoxinSGSIs_test

on:
  watch:
    types: [started]

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Clean system environment
        run: |
          sudo docker rmi $(sudo docker images -q) || true
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php* || true
          sudo -E apt-get update
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean 
          df -h
      
      - name: Parse configuration variables
        id: var
        run: |
          echo "rom_url=$(jq -r '.rom_url' sgsi.json)" >> $GITHUB_OUTPUT
          echo "rom_name=$(jq -r '.rom_name' sgsi.json)" >> $GITHUB_OUTPUT
          echo "pack_sgsi=$(jq -r '.pack_sgsi' sgsi.json)" >> $GITHUB_OUTPUT
          echo "make_miui=$(jq -r '.make_miui' sgsi.json)" >> $GITHUB_OUTPUT
          echo "make_flyme=$(jq -r '.make_flyme' sgsi.json)" >> $GITHUB_OUTPUT
          echo "make_coloros=$(jq -r '.make_coloros' sgsi.json)" >> $GITHUB_OUTPUT
          echo "make_h2os=$(jq -r '.make_h2os' sgsi.json)" >> $GITHUB_OUTPUT
          echo "make_smartisanos=$(jq -r '.make_smartisanos' sgsi.json)" >> $GITHUB_OUTPUT
          echo "make_zui=$(jq -r '.make_zui' sgsi.json)" >> $GITHUB_OUTPUT
          echo "make_super=$(jq -r '.make_super' sgsi.json)" >> $GITHUB_OUTPUT
          
      - name: Install download utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y aria2 axel wget
          echo "Download utilities installed:"
          aria2c --version | head -1
          axel --version
          wget --version | head -1
          
      - name: Download build tools
        run: |
          tool_url="https://github.com/xiaoxindada/SGSI-build-tool/releases/download/v1.9/SGSI-build-tool.tar"
          echo "Downloading build tools: $tool_url"
          
          max_retries=5
          for i in $(seq 1 $max_retries); do
            if curl -fL -o SGSI-build-tool.tar "$tool_url"; then
              echo "Build tools download successful"
              break
            else
              echo "Download attempt $i/$max_retries failed - retrying..."
              sleep 10
            fi
          done
          if [ ! -f "SGSI-build-tool.tar" ]; then
            echo "::error::Build tools download failed after $max_retries attempts"
            exit 1
          fi
            
      - name: Initialize build environment
        run: |
          # Extract and verify archive contents
          sudo tar -xf SGSI-build-tool.tar
          echo "Extracted archive contents:"
          ls -lh
          
          # Check if setup.sh exists in alternative locations
          if [ -f "SGSI-build-tool/10/setup.sh" ]; then
            echo "setup.sh already exists in SGSI-build-tool/10"
          elif [ -f "bin/setup.sh" ]; then
            echo "Moving bin/setup.sh to SGSI-build-tool/10/"
            sudo mv bin/setup.sh SGSI-build-tool/10/
          else
            echo "::error::setup.sh not found in extracted archive!"
            echo "Available files:"
            find . -type f | grep setup.sh || echo "No setup.sh found"
            exit 1
          fi
          
          cd SGSI-build-tool/10
          sudo bash setup.sh
          
      - name: Download ROM
        run: |
          echo "Downloading ROM: ${{ steps.var.outputs.rom_name }}"
          rom_path="SGSI-build-tool/10/tmp/${{ steps.var.outputs.rom_name }}"
          sudo mkdir -p $(dirname "$rom_path")
          
          # Simple wget download as in the old workflow
          sudo wget -c "${{ steps.var.outputs.rom_url }}" -O "$rom_path"
          
          # Verify download
          if [ ! -f "$rom_path" ]; then
            echo "::error::ROM download failed"
            exit 1
          fi
          
          file_size=$(sudo stat -c%s "$rom_path")
          echo "Downloaded ROM size: $(numfmt --to=iec $file_size)"
      
      - name: Configure Super SGSI build
        if: ${{ steps.var.outputs.make_super == 'true' }}
        run: |
          sed -i 's/SGSI.sh/dynamic_SGSI.sh/g' SGSI-build-tool/10/make.sh
      
      - name: Configure MIUI SGSI build
        if: ${{ steps.var.outputs.make_miui == 'true' }}
        run: |
          sudo rm -rf SGSI-build-tool/10/fixbug/fixbug.sh
          [ -f "fix/MIUI.sh" ] && sudo mv fix/MIUI.sh SGSI-build-tool/10/fixbug/fixbug.sh
          
      - name: Configure Flyme SGSI build
        if: ${{ steps.var.outputs.make_flyme == 'true' }}
        run: |
          sudo rm -rf SGSI-build-tool/10/fixbug/fixbug.sh
          [ -f "fix/Flyme.sh" ] && sudo mv fix/Flyme.sh SGSI-build-tool/10/fixbug/fixbug.sh
          
      - name: Configure ColorOS SGSI build
        if: ${{ steps.var.outputs.make_coloros == 'true' }}
        run: |
          sudo python3 SGSI-build-tool/10/oppo_ozip/ozipdecrypt.py SGSI-build-tool/10/tmp/${{ steps.var.outputs.rom_name }}
          sudo rm -rf SGSI-build-tool/10/tmp/${{ steps.var.outputs.rom_name }} 
          sudo rm -rf SGSI-build-tool/10/fixbug/fixbug.sh
          [ -f "fix/ColorOS.sh" ] && sudo mv fix/ColorOS.sh SGSI-build-tool/10/fixbug/fixbug.sh
          
      - name: Configure H2OS SGSI build
        if: ${{ steps.var.outputs.make_h2os == 'true' }}
        run: |
          sudo rm -rf SGSI-build-tool/10/fixbug/fixbug.sh
          [ -f "fix/H2OS.sh" ] && sudo mv fix/H2OS.sh SGSI-build-tool/10/fixbug/fixbug.sh
          
      - name: Configure SmartisanOS SGSI build
        if: ${{ steps.var.outputs.make_smartisanos == 'true' }}
        run: |
          sudo rm -rf SGSI-build-tool/10/fixbug/fixbug.sh
          [ -f "fix/SmartisanOS.sh" ] && sudo mv fix/SmartisanOS.sh SGSI-build-tool/10/fixbug/fixbug.sh
          
      - name: Configure ZUI SGSI build
        if: ${{ steps.var.outputs.make_zui == 'true' }}
        run: |
          sudo rm -rf SGSI-build-tool/10/fixbug/fixbug.sh
          [ -f "fix/ZUI.sh" ] && sudo mv fix/ZUI.sh SGSI-build-tool/10/fixbug/fixbug.sh
           
      - name: Generate SGSI images
        run: |
          # Clear existing scripts
          sudo rm -f SGSI-build-tool/10/{SGSI.sh,makeimg.sh,dynamic_SGSI.sh,oppo.sh,make.sh}
          sudo rm -f SGSI-build-tool/10/bin/{mke2fs,e2fsdroid}
          
          # Move new scripts - check existence first
          [ -f "make/makeimg.sh" ] && sudo mv make/makeimg.sh SGSI-build-tool/10/
          [ -f "make/SGSI.sh" ] && sudo mv make/SGSI.sh SGSI-build-tool/10/
          [ -f "make/dynamic_SGSI.sh" ] && sudo mv make/dynamic_SGSI.sh SGSI-build-tool/10/
          [ -f "make/oppo.sh" ] && sudo mv make/oppo.sh SGSI-build-tool/10/
          [ -f "make/make.sh" ] && sudo mv make/make.sh SGSI-build-tool/10/
          [ -f "bin/mke2fs" ] && sudo mv bin/mke2fs SGSI-build-tool/10/bin/
          [ -f "bin/e2fsdroid" ] && sudo mv bin/e2fsdroid SGSI-build-tool/10/bin/
          
          cd SGSI-build-tool/10
          sudo bash make.sh
          echo "SGSI image generation completed successfully"
          
      - name: Ensure SGSI directory exists
        run: |
          sudo mkdir -p SGSI-build-tool/10/SGSI
          echo "SGSI output directory verified"
          
      - name: Package patch files
        run: |
          for patch_num in 1 2 3; do
            patch_dir="Patch/Patch${patch_num}"
            if [ -d "$patch_dir" ]; then
              echo "Packaging $patch_dir ..."
              zip -r Patch${patch_num}.zip "$patch_dir"
            else
              echo "Warning: $patch_dir not found! Skipping"
            fi
          done
          
          # Move patch files to SGSI directory
          for file in Patch{1,2,3}.zip; do
            if [ -f "$file" ]; then
              echo "Moving $file to SGSI directory"
              sudo mv "$file" SGSI-build-tool/10/SGSI/
            fi
          done
          echo "Patch files moved successfully"

      - name: Create final SGSI package
        run: |
          mkdir -p upload
          cd SGSI-build-tool/10/SGSI
          
          # Create zip package
          sudo zip -r "../../../${{ steps.var.outputs.pack_sgsi}}" . -0
          
          # Verify package creation
          if [ ! -f "../../../${{ steps.var.outputs.pack_sgsi }}" ]; then
            echo "::error::SGSI package not created!"
            exit 1
          fi
          
          cd ../../../
          file_size=$(stat -c%s "${{ steps.var.outputs.pack_sgsi }}")
          echo "Package size: $(numfmt --to=iec $file_size)"
          
          # Handle large files (>2GB) using split
          if [ $file_size -gt 2147483648 ]; then
            echo "Splitting large package (2GB+)"
            split -b 1024m -d "${{ steps.var.outputs.pack_sgsi }}" \
                  "upload/${{ steps.var.outputs.pack_sgsi }}."
          else
            mv "${{ steps.var.outputs.pack_sgsi }}" upload/
          fi
          
      - name: Upload artifacts to GitHub release
        uses: ncipollo/release-action@v1.8.6
        with:
          artifacts: 'upload/*'
          name: SGSI-build-result
          tag: xiaoxinSGSI-ab-Android10-${{ github.run_number }}
          token: ${{ secrets.GITHUB_TOKEN }}
