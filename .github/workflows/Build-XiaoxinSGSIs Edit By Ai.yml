name: build_XiaoxinSGSIs_test

on:
  watch:
    types: [started]
    
jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
      - name: Checkout
        uses: actions/checkout@main
      
      - name: Clean Up
        run: |
          docker rmi $(docker images -q) || true
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php* || true
          sudo -E apt-get update
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean 
      
      - name: Get variables
        id: var
        run: |
          echo "rom_url=$(jq -r '.rom_url' sgsi.json)" >> $GITHUB_OUTPUT
          echo "rom_name=$(jq -r '.rom_name' sgsi.json)" >> $GITHUB_OUTPUT
          echo "pack_sgsi=$(jq -r '.pack_sgsi' sgsi.json)" >> $GITHUB_OUTPUT
          echo "make_miui=$(jq -r '.make_miui' sgsi.json)" >> $GITHUB_OUTPUT
          echo "make_flyme=$(jq -r '.make_flyme' sgsi.json)" >> $GITHUB_OUTPUT
          echo "make_coloros=$(jq -r '.make_coloros' sgsi.json)" >> $GITHUB_OUTPUT
          echo "make_h2os=$(jq -r '.make_h2os' sgsi.json)" >> $GITHUB_OUTPUT
          echo "make_smartisanos=$(jq -r '.make_smartisanos' sgsi.json)" >> $GITHUB_OUTPUT
          echo "make_zui=$(jq -r '.make_zui' sgsi.json)" >> $GITHUB_OUTPUT
          echo "make_super=$(jq -r '.make_super' sgsi.json)" >> $GITHUB_OUTPUT
          echo "upload_transfer=$(jq -r '.upload_transfer' sgsi.json)" >> $GITHUB_OUTPUT
          echo "upload_artifact=$(jq -r '.upload_artifact' sgsi.json)" >> $GITHUB_OUTPUT
          
      - name: Download XiaoxinSGSIs Tools
        run: |
          tool_url="https://github.com/xiaoxindada/SGSI-build-tool/releases/download/v2.0/SGSI-build-tool.tar"
          filename="SGSI-build-tool.tar"
          
          echo "üîß Starting build tools download (ÂºÄÂßã‰∏ãËΩΩÊûÑÂª∫Â∑•ÂÖ∑)..."
          max_retries=5
          retry_delay=10
          
          for i in $(seq 1 $max_retries); do
            if curl -fL -o "$filename" "$tool_url"; then
              echo "‚úÖ Download successful (‰∏ãËΩΩÊàêÂäü)"
              break
            else
              echo "‚ùå Download failed (Â∞ùËØï $i/$max_retries) (‰∏ãËΩΩÂ§±Ë¥•)"
              if [ $i -eq $max_retries ]; then
                echo "::error::‚ùå Build tools download failed (ÊûÑÂª∫Â∑•ÂÖ∑‰∏ãËΩΩÂ§±Ë¥•)"
                exit 1
              fi
              echo "üîÑ Retrying in ${retry_delay}seconds (${retry_delay}ÁßíÂêéÈáçËØï)..."
              sleep $retry_delay
            fi
          done
           
      - name: Initialization environment
        run: |
          sudo tar -xf SGSI-build-tool.tar
          sudo rm -rf SGSI-build-tool/10/setup.sh
          sudo mv bin/setup.sh SGSI-build-tool/10/
          cd SGSI-build-tool/10
          sudo bash setup.sh
           
      - name: Download Rom
        run: sudo wget -c "${{ steps.var.outputs.rom_url }}" -O "SGSI-build-tool/10/tmp/${{ steps.var.outputs.rom_name }}"
       
      - name: Build Super SGSI
        if: ${{ steps.var.outputs.make_super == 'true' }}
        run: sed -i 's/SGSI.sh/dynamic_SGSI.sh/g' SGSI-build-tool/10/make.sh
       
      - name: Make MIUI SGSI
        if: ${{ steps.var.outputs.make_miui == 'true' }}
        run: |
          sudo rm -rf SGSI-build-tool/10/fixbug/fixbug.sh
          mv fix/MIUI.sh SGSI-build-tool/10/fixbug/fixbug.sh
           
      - name: Make Flyme SGSI
        if: ${{ steps.var.outputs.make_flyme == 'true' }}
        run: |
          sudo rm -rf SGSI-build-tool/10/fixbug/fixbug.sh
          mv fix/Flyme.sh SGSI-build-tool/10/fixbug/fixbug.sh
           
      - name: Make ColorOS SGSI
        if: ${{ steps.var.outputs.make_coloros == 'true' }}
        run: |
          sudo python3 SGSI-build-tool/10/oppo_ozip/ozipdecrypt.py "SGSI-build-tool/10/tmp/${{ steps.var.outputs.rom_name }}"
          sudo rm -rf "SGSI-build-tool/10/tmp/${{ steps.var.outputs.rom_name }}" SGSI-build-tool/10/fixbug/fixbug.sh
          mv fix/ColorOS.sh SGSI-build-tool/10/fixbug/fixbug.sh
           
      - name: Make H2OS SGSI
        if: ${{ steps.var.outputs.make_h2os == 'true' }}
        run: |
          sudo rm -rf SGSI-build-tool/10/fixbug/fixbug.sh
          mv fix/H2OS.sh SGSI-build-tool/10/fixbug/fixbug.sh
           
      - name: Make SmartisanOS SGSI
        if: ${{ steps.var.outputs.make_smartisanos == 'true' }}
        run: |
          sudo rm -rf SGSI-build-tool/10/fixbug/fixbug.sh
          mv fix/SmartisanOS.sh SGSI-build-tool/10/fixbug/fixbug.sh
           
      - name: Make ZUI SGSI
        if: ${{ steps.var.outputs.make_zui == 'true' }}
        run: |
          sudo rm -rf SGSI-build-tool/10/fixbug/fixbug.sh
          mv fix/ZUI.sh SGSI-build-tool/10/fixbug/fixbug.sh
            
      - name: Generate SGSI
        run: |
          rm -rf SGSI-build-tool/10/SGSI.sh SGSI-build-tool/10/makeimg.sh SGSI-build-tool/10/bin/mke2fs SGSI-build-tool/10/bin/e2fsdroid SGSI-build-tool/10/dynamic_SGSI.sh SGSI-build-tool/10/oppo.sh SGSI-build-tool/10/make.sh
          mv make/makeimg.sh make/SGSI.sh make/dynamic_SGSI.sh make/oppo.sh make/make.sh SGSI-build-tool/10/
          mv bin/mke2fs bin/e2fsdroid SGSI-build-tool/10/bin/
          cd SGSI-build-tool/10
          sudo bash make.sh

      - name: Make Patch Module
        run: |
          cd SGSI-build-tool/10
          zip -r Patchmod.zip out/vendor/app/* out/vendor/bin/* out/vendor/etc/* out/vendor/lib/* out/vendor/lib64/* out/vendor/overlay/*
          sudo mv Patchmod.zip SGSI/
           
      - name: Zip Patch  
        run: |
          cd Patch
          zip -r Patch1.zip Patch1/*
          zip -r Patch2.zip Patch2/*
          zip -r Patch3.zip Patch3/*
          sudo mv Patch1.zip Patch2.zip Patch3.zip ../SGSI-build-tool/10/SGSI/

      - name: 7z SGSI
        run: |
          cd SGSI-build-tool/10
          7za a -t7z -r "${{ steps.var.outputs.pack_sgsi }}" SGSI/*

      - name: Upload SGSI to WeTransfer
        if: ${{ steps.var.outputs.upload_transfer == 'true' }}
        run: |
          curl -sL https://git.io/file-transfer | sh
          ./transfer wet "SGSI-build-tool/10/${{ steps.var.outputs.pack_sgsi }}"
          
      - name: Upload SGSI to Artifact
        if: ${{ steps.var.outputs.upload_artifact == 'true' }}
        uses: actions/upload-artifact@v2
        with: 
          name: XiaoxinSGSIs
          path: "SGSI-build-tool/10/${{ steps.var.outputs.pack_sgsi }}"
