name: Build_XiaoxinSGSIs_test

on:
  watch:
    types: [started]

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id
    steps:  # Missing steps keyword added
      
      - name: Clean system environment
        run: |
          sudo docker rmi $(sudo docker images -q) || true
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php* || true
          sudo -E apt-get update
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean 
          df -h
      
      - name: Parse configuration variables
        id: var
        run: |
          echo "rom_url=$(jq -r '.rom_url' sgsi.json)" >> $GITHUB_OUTPUT
          echo "rom_name=$(jq -r '.rom_name' sgsi.json)" >> $GITHUB_OUTPUT
          echo "pack_sgsi=$(jq -r '.pack_sgsi' sgsi.json)" >> $GITHUB_OUTPUT
          echo "make_miui=$(jq -r '.make_miui' sgsi.json)" >> $GITHUB_OUTPUT
          echo "make_flyme=$(jq -r '.make_flyme' sgsi.json)" >> $GITHUB_OUTPUT
          echo "make_coloros=$(jq -r '.make_coloros' sgsi.json)" >> $GITHUB_OUTPUT
          echo "make_h2os=$(jq -r '.make_h2os' sgsi.json)" >> $GITHUB_OUTPUT
          echo "make_smartisanos=$(jq -r '.make_smartisanos' sgsi.json)" >> $GITHUB_OUTPUT
          echo "make_zui=$(jq -r '.make_zui' sgsi.json)" >> $GITHUB_OUTPUT
          echo "make_super=$(jq -r '.make_super' sgsi.json)" >> $GITHUB_OUTPUT
          
      - name: Install download utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y aria2 axel
          echo "Download utilities installed:"
          aria2c --version | head -1
          axel --version
          
      - name: Download build tools
        run: |
          tool_url="https://github.com/xiaoxindada/SGSI-build-tool/releases/download/v1.9/SGSI-build-tool.tar"
          echo "Downloading build tools: $tool_url"
          
          max_retries=5
          for i in $(seq 1 $max_retries); do
            if sudo curl -fL -o SGSI-build-tool.tar "$tool_url"; then
              echo "Build tools download successful"
              break
            else
              echo "Download attempt $i/$max_retries failed - retrying..."
              sleep 10
            fi
          done
          if [ ! -f "SGSI-build-tool.tar" ]; then
            echo "::error::Build tools download failed after $max_retries attempts"
            exit 1
          fi
            
      - name: Initialize build environment
        run: |
          sudo tar -xf SGSI-build-tool.tar
          sudo rm -rf SGSI-build-tool/10/setup.sh
          sudo mv bin/setup.sh SGSI-build-tool/10/
          cd SGSI-build-tool/10
          sudo bash setup.sh
          
      - name: Download ROM (multi-threaded)
        run: |
          echo "Downloading ROM: ${{ steps.var.outputs.rom_name }}"
          rom_path="SGSI-build-tool/10/tmp/${{ steps.var.outputs.rom_name }}"
          rom_dir=$(dirname "$rom_path")
          rom_file=$(basename "$rom_path")
          
          # Ensure download directory exists
          sudo mkdir -p "$rom_dir"
          
          max_retries=3
          download_success=false
          
          # Prefer aria2 if available
          if command -v aria2c &> /dev/null; then
            echo "Using aria2 multi-threaded download"
            for i in $(seq 1 $max_retries); do
              if sudo aria2c -x 8 -s 8 -k 1M "${{ steps.var.outputs.rom_url }}" -d "$rom_dir" -o "$rom_file"; then
                echo "ROM download successful with aria2"
                download_success=true
                break
              else
                echo "Download attempt $i/$max_retries failed with aria2 - retrying..."
                sudo rm -f "$rom_path" || true
                sleep 15
              fi
            done
          fi
          
          # If aria2 failed or not available, try axel
          if [ "$download_success" = false ]; then
            if command -v axel &> /dev/null; then
              echo "Using axel multi-threaded download"
              for i in $(seq 1 $max_retries); do
                if sudo axel -n 10 -a -o "$rom_path" "${{ steps.var.outputs.rom_url }}"; then  # Fixed variable reference
                  echo "ROM download successful with axel"
                  download_success=true
                  break
                else
                  echo "Download attempt $i/$max_retries failed with axel - retrying..."
                  sudo rm -f "$rom_path" || true
                  sleep 15
                fi
              done
            fi
          fi
          
          # Fallback to curl if both aria2 and axel failed
          if [ "$download_success" = false ]; then
            echo "Using curl as fallback download method"
            for i in $(seq 1 $max_retries); do
              if sudo curl -fL -o "$rom_path" "${{ steps.var.outputs.rom_url }}"; then
                echo "ROM download successful with curl"
                download_success=true
                break
              else
                echo "Download attempt $i/$max_retries failed with curl - retrying..."
                sudo rm -f "$rom_path" || true
                sleep 15
              fi
            done
          fi
          
          if [ ! -f "$rom_path" ]; then
            echo "::error::ROM download failed after $max_retries attempts with all methods"
            exit 1
          fi
          
          # Verify file size
          file_size=$(sudo stat -c%s "$rom_path")
          echo "Downloaded ROM size: $(numfmt --to=iec $file_size)"
      
      - name: Configure Super SGSI build
        if: ${{ steps.var.outputs.make_super == 'true' }}
        run: |
          sed -i 's/SGSI.sh/dynamic_SGSI.sh/g' SGSI-build-tool/10/make.sh
      
      - name: Configure MIUI SGSI build
        if: ${{ steps.var.outputs.make_miui == 'true' }}
        run: |
          sudo rm -rf SGSI-build-tool/10/fixbug/fixbug.sh
          sudo mv fix/MIUI.sh SGSI-build-tool/10/fixbug/fixbug.sh  # Added sudo
          
      - name: Configure Flyme SGSI build
        if: ${{ steps.var.outputs.make_flyme == 'true' }}
        run: |
          sudo rm -rf SGSI-build-tool/10/fixbug/fixbug.sh
          sudo mv fix/Flyme.sh SGSI-build-tool/10/fixbug/fixbug.sh  # Added sudo
          
      - name: Configure ColorOS SGSI build
        if: ${{ steps.var.outputs.make_coloros == 'true' }}
        run: |
          sudo python3 SGSI-build-tool/10/oppo_ozip/ozipdecrypt.py SGSI-build-tool/10/tmp/${{ steps.var.outputs.rom_name }}
          sudo rm -rf SGSI-build-tool/10/tmp/${{ steps.var.outputs.rom_name }} 
          sudo rm -rf SGSI-build-tool/10/fixbug/fixbug.sh
          sudo mv fix/ColorOS.sh SGSI-build-tool/10/fixbug/fixbug.sh  # Added sudo
          
      - name: Configure H2OS SGSI build
        if: ${{ steps.var.outputs.make_h2os == 'true' }}
        run: |
          sudo rm -rf SGSI-build-tool/10/fixbug/fixbug.sh
          sudo mv fix/H2OS.sh SGSI-build-tool/10/fixbug/fixbug.sh  # Added sudo
          
      - name: Configure SmartisanOS SGSI build
        if: ${{ steps.var.outputs.make_smartisanos == 'true' }}
        run: |
          sudo rm -rf SGSI-build-tool/10/fixbug/fixbug.sh
          sudo mv fix/SmartisanOS.sh SGSI-build-tool/10/fixbug/fixbug.sh  # Added sudo
          
      - name: Configure ZUI SGSI build
        if: ${{ steps.var.outputs.make_zui == 'true' }}
        run: |
          sudo rm -rf SGSI-build-tool/10/fixbug/fixbug.sh
          sudo mv fix/ZUI.sh SGSI-build-tool/10/fixbug/fixbug.sh  # Added sudo
           
      - name: Generate SGSI images
        run: |
          sudo rm -rf SGSI-build-tool/10/SGSI.sh SGSI-build-tool/10/makeimg.sh \
                  SGSI-build-tool/10/bin/mke2fs SGSI-build-tool/10/bin/e2fsdroid \
                  SGSI-build-tool/10/dynamic_SGSI.sh SGSI-build-tool/10/oppo.sh SGSI-build-tool/10/make.sh
          
          sudo mv make/makeimg.sh make/SGSI.sh make/dynamic_SGSI.sh make/oppo.sh make/make.sh SGSI-build-tool/10/
          sudo mv bin/mke2fs bin/e2fsdroid SGSI-build-tool/10/bin/
          
          cd SGSI-build-tool/10
          sudo bash make.sh
          echo "SGSI image generation completed successfully"
          
      - name: Ensure SGSI directory exists
        run: |
          sudo mkdir -p SGSI-build-tool/10/SGSI
          echo "SGSI output directory verified"
          
      - name: Package patch files
        run: |
          for patch_num in 1 2 3; do
            patch_dir="Patch/Patch${patch_num}"
            if [ -d "$patch_dir" ]; then
              echo "Packaging $patch_dir ..."
              sudo zip -r Patch${patch_num}.zip "${patch_dir}"/*
            else
              echo "Warning: $patch_dir not found! Skipping"
            fi
          done
          
          for file in Patch{1,2,3}.zip; do
            if [ -f "$file" ]; then
              echo "Moving $file to SGSI directory"
              sudo mv "$file" SGSI-build-tool/10/SGSI/
            fi
          done
          echo "Patch files moved successfully"

      - name: Create final SGSI package
        run: |
          mkdir -p upload
          cd SGSI-build-tool/10/SGSI
          
          # Verify files exist before zipping
          echo "Files in SGSI directory:"
          sudo ls -lh
          
          if sudo zip -r "../../../${{ steps.var.outputs.pack_sgsi}}" . -0; then
            echo "Package created successfully"
          else
            echo "::error::SGSI package creation failed"
            exit 1
          fi
          
          cd ../../../
          
          # Check if the file exists and has content
          if [ ! -f "${{ steps.var.outputs.pack_sgsi }}" ]; then
            echo "::error::SGSI package not found after creation"
            exit 1
          fi
          
          file_size=$(stat -c%s "${{ steps.var.outputs.pack_sgsi }}")
          echo "Package size: $(numfmt --to=iec $file_size)"
          
          mkdir -p upload
          if [ $file_size -gt 2097152000 ]; then  # Over 2GB
            echo "Splitting large package using segment size of 1GB"
            split -b 1000m -d "${{ steps.var.outputs.pack_sgsi }}" \
                  "upload/${{ steps.var.outputs.pack_sgsi }}.part"
            echo "Split files:"
            ls -lh upload/
          else
            mv "${{ steps.var.outputs.pack_sgsi }}" upload/
            echo "Complete package: upload/${{ steps.var.outputs.pack_sgsi }}"
          fi
          
      - name: Upload artifacts to GitHub release
        uses: ncipollo/release-action@v1.8.6
        with:
          artifacts: 'upload/*'
          name: SGSI-build-result
          tag: android10-sgsi-${{ github.run_id }}
          token: ${{ secrets.GITHUB_TOKEN }}
