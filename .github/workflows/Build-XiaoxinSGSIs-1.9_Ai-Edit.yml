name: Build_XiaoxinSGSIs_Ai-Edit [1.9]
on:
  workflow_dispatch:  # 仅手动触发
jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 120
    steps:
      - name: "Checkout Code (检出代码)"
        uses: actions/checkout@v4
        
      - name: "Check Config Status (检查配置文件)"
        run: |
          if [[ ! -f "sgsi.json" ]]; then
            echo "::error::❌ Missing sgsi.json config file (缺少sgsi.json配置文件)"
            exit 1
          fi
          
          if [[ -f "SGSI-build-tool/10/sg极si.sh" ]]; then
            echo "✅ Detected configured sgsi.sh file (检测到已配置sgsi.sh文件)"
          else
            echo "ℹ️ No custom sgsi.sh detected, using default config (未检测到自定义sgsi.sh文件，将使用默认配置)"
          fi
       
      - name: "Clean Up Environment (清理环境)"
        run: |
          echo "🗑️ Starting full cleanup (启动全面清理)..."
          sudo apt-get autoremove -y --purge
          sudo apt-get clean
          sudo rm -rf /usr/share.docker /etc/mysql /etc/php /etc/apt/sources.list.d || true
          echo "✅ Cleanup complete! Disk space (清理完成！磁盘空间):"
          df -h
       
      - name: "Parse Config Variables (解析配置变量)"
        id: config
        run: |
          rom_url=$(jq -r '.rom_url // empty' sgsi.json)
          if [[ -z "$rom_url" ]]; then
            echo "::error::❌ Missing rom_url field in sgsi.json (sgsi.json中缺少rom_url字段)"
            exit 1
          fi
          
          {
            echo "rom_url=$rom_url"
            echo "rom_name=$(jq -r '.rom_name // "unknown_rom"' sgsi.json)"
            echo "pack_sgsi=$(jq -r '.pack_sgsi // "SGSI.zip"' sgsi.json)"
            echo "make_miui=$(jq -r '.make_miui // "false"' sgsi.json)"
            echo "make_flyme=$(jq -r '.make_flyme // "false"' sgsi.json)"
            echo "make_coloros=$(jq -r '.make_coloros // "false"' sgsi.json)"
            echo "make_h2os=$(jq -r '.make_h2os // "false"' sgsi.json)"
            echo "make_smartisanos=$(jq -r '.make_smartisanos // "false"' sgsi.json)"
            echo "make_zui=$(jq -r '.make_zui // "false"' sgsi.json)"
            echo "make_super=$(jq -r '.make_super // "false"' sgsi.json)"
            echo "upload_transfer=$(jq -r '.upload_transfer // "false"' sgsi.json)"
            echo "upload_artifact=$(jq -r '.upload_artifact // "false"' sgsi.json)"
          } >> $GITHUB_OUTPUT
           
      - name: "Install Essential Tools (安装基础工具)"
        run: |
          sudo apt-get update
          sudo apt-get install -y aria2 curl jq brotli android-sdk-libsparse-utils
          echo "✅ 基础工具安装完成"
          
      - name: "Download Build Tools (下载构建工具)"
        run: |
          tool_url="https://github.com/xiaoxindada/SGSI-build-tool/releases/download/v1.9/SGSI-build-tool.tar"
          filename="SGSI-build-tool.tar"
          
          echo "🔧 Starting build tools download (开始下载构建工具)..."
          max_retries=5
          retry_delay=10
          
          for i in $(seq 1 $max_retries); do
            if curl -fL -o "$filename" "$tool_url"; then
              echo "✅ Download successful (下载成功)"
              break
            else
              echo "❌ Download failed (尝试 $i/$max_retries) (下载失败)"
              if [ $i -eq $max_retries ]; then
                echo "::error::❌ Build tools download failed (构建工具下载失败)"
                exit 1
              fi
              echo "🔄 Retrying in ${retry_delay}seconds (${retry_delay}秒后重试)..."
              sleep $retry_delay
            fi
          done
          
      - name: "Initialize Build Environment (初始化构建环境)"
        run: |
          echo "📂 Extracting build tools (解压构建工具)..."
          if ! sudo tar -xf SGSI-build-tool.tar; then
            echo "::error::❌ Failed to extract build tools (解压构建工具失败)"
            exit 1
          fi
          
          sudo find SGSI-build-tool -name "*.sh" -exec chmod +x {} \;
          echo "✅ Environment initialization complete (环境初始化完成)"
          
      - name: "Fix Toolchain Issues (修复工具链问题)"
        run: |
          cd SGSI-build-tool/10
          echo "🛠️ Fixing binary compatibility (修复二进制兼容性)..."
          sudo mkdir -p bin
          for tool in brotli simg2img img2simg mke2fs; do
            tool_location=$(which $tool 2>/dev/null)
            if [[ -n "$tool_location" ]]; then
              sudo ln -sf "$tool_location" bin/$tool
              echo "✅ Linked $tool from $tool_location"
            else
              echo "::warning::⚠️ Tool not found: $tool (未找到工具: $tool)"
            fi
          done
          cd ../..
          
      - name: "Fix Directory Permissions (修复目录权限)"
        run: |
          echo "Fixing SGSI-build-tool directory permissions (修复SGSI-build-tool目录权限)..."
          sudo chown -极R $(id -u):$(id -g) SGSI-build-tool
          sudo chmod -R 755 SGSI-build-tool
          echo "✅ Directory permissions fixed (目录权限已修复)"
          
      - name: "Download ROM File (下载ROM文件)"
        run: |
          rom_path="SGSI-build-tool/10/tmp/${{ steps.config.outputs.rom_name }}"
          rom_url="${{ steps.config.outputs.rom_url }}"
          filename="${{ steps.config.outputs.rom_name }}"
          
          sudo mkdir -p "$(dirname "$rom_path")"
          echo "🚀 Starting ROM download: $filename"
          echo "📥 URL: $rom_url"
          
          max_retries=5
          retry_delay=30
          
          for i in $(seq 1 $max_retries); do
            echo "Attempt $i/$max_retries (尝试 $i/$max_retries)..."
            
            if command -v aria2c &> /dev/null; then
              echo "⚡ Using aria2 download (multi-threaded) (使用aria2下载 - 多线程)"
              if sudo aria2c -x 8 -s 8 -k 1M "$rom_url" -d "$(dirname "$rom_path")" -o "$(basename "$rom_path")"; then
                echo "✅ aria2 download successful (aria2下载成功)"
                break
              fi
            fi
            
            if command -v curl &> /dev/null; then
              echo "⚡ Using curl download (使用curl下载)"
              if sudo curl -fL -C - -o "$rom_path" "$rom_url"; then
                echo "✅ curl download successful (curl下载成功)"
                break
              fi
            fi
            
            if [ $i -eq $max_retries ]; then
              echo "::error::❌ ROM download failed (ROM下载失败)"
              exit 1
            fi
            
            echo "🔄 Retrying in ${retry_delay}seconds (${retry_delay}秒后重试)..."
            sleep $retry_delay
          done
          
          echo -e "\n🎉 Download completed (下载完成)"
          echo "📦 File info (文件信息): $(sudo ls -lh "$rom_path")"

      - name: "Configure ROM Specific Settings (配置ROM特定设置)"
        run: |
          echo "Starting ROM-specific configuration (开始配置ROM特定设置)..."
          rom_type="Generic"
          if [ "${{ steps.config.outputs.make_miui }}" = "true" ]; then rom_type="MIUI"; fi
          if [ "${{ steps.config.outputs.make_flyme }}" = "true" ]; then rom_type="Flyme"; fi
          if [ "${{ steps.config.outputs.make_coloros }}" = "true" ]; then rom_type="ColorOS"; fi
          if [ "${{ steps.config.outputs.make_h2os }}" = "true" ]; then rom_type="H2OS"; fi
          if [ "${{ steps.config.outputs.make_smartisanos }}" = "true" ]; then rom_type="SmartisanOS"; fi
          if [ "${{ steps.config.outputs.make_zui }}" = "true" ]; then rom_type="ZUI"; fi
          
          echo "ℹ️ Detected ROM type: $rom_type (检测到的ROM类型: $rom_type)"
          
          if [ "${{ steps.config.outputs.make_super }}" = "true" ]; then
            echo "Configuring Super SGSI (配置Super SGSI)..."
            if [[ -f "SGSI-build-tool/10/make.sh" ]]; then
              sudo sed -i 's/SGSI.sh/dynamic_SGSI.sh/g' SGSI-build-tool/10/make.sh
              echo "Super SGSI configuration completed (Super SGSI配置完成)"
            else
              echo "::warning::⚠️ make.sh script not found, skipping Super SGSI configuration (未找到make.sh脚本，跳过Super SGSI配置)"
            fi
          fi
          
          sudo rm -f SGSI-build-tool/10/fixbug/fixbug.sh
          
          if [ "$rom_type" = "ColorOS" ]; then
            echo "Decrypting ColorOS OZIP package (解密ColorOS OZIP包)..."
            if [[ -f "SGSI-build-tool/10/oppo_ozip/ozipdecrypt.py" ]]; then
              sudo python3 SGSI-build-tool/10/oppo_ozip/ozipdecrypt.py "SGSI-build-tool/10/tmp/${{ steps.config.outputs.rom_name }}"
              sudo rm -f "SGSI-build-tool/10/tmp/${{ steps.config.outputs.rom_name }}"
              echo "ColorOS ROM decryption completed (ColorOS ROM解密完成)"
            else
              echo "::error::❌ ozipdecrypt.py script not found (未找到ozipdecrypt.py脚本)"
              exit 1
            fi
          fi
          
          if [[ -f "fix/${rom_type}.sh" ]]; then
            echo "Applying $rom_type configuration script (应用$rom_type配置脚本)..."
            sudo cp "fix/${rom_type}.sh" SGSI-build-tool/10/fixbug/fixbug.sh
            sudo chmod +x SGSI-build-tool/10/fixbug/fixbug.sh
            echo "$rom_type configuration completed ($rom_type配置完成)"
          else
            echo "ℹ️ $rom_type configuration script not found, using generic configuration (找不到$rom_type配置脚本，使用通用配置)"
          fi
            
          echo "ROM-specific configuration completed (ROM特定设置配置完成)"
          
      - name: "Fix Script Syntax Errors (修复脚本语法错误)"
        run: |
          cd SGSI-build-tool/10
          if [[ -f "SGSI.sh" ]]; then
            sudo sed -i 's/\[ *\] *== *"\(.*\)" *]/\[ -n "\1" ]/g' SGSI.sh
            sudo sed -i 's/==/=/g' SGSI.sh
            echo "✅ Script syntax errors fixed (已修复脚本语法错误)"
          else
            echo "::warning::⚠️ SGSI.sh script not found (未找到SGSI.sh脚本)"
          fi
          cd ../..
          
      - name: "Prepare Build Files (准备构建文件)"
        run: |
          echo "Preparing build scripts and tools (准备构建脚本和工具)..."
          if [[ -d "make" ]]; then
            echo "Moving build scripts (移动构建脚本)..."
            sudo cp -v make/*.sh SGSI-build-tool/10/
          fi
          
          if [[ -d "bin" ]]; then
            echo "Moving binary tools (移动二进制工具)..."
            sudo mkdir -p SGSI-build-tool/10/bin
            sudo cp -v bin/* SGSI-build-tool/10/bin/
          fi
          
          cd SGSI-build-tool/10
          for tool in brotli simg2img; do
            if command -v $tool >/dev/null 2>&1; then
              sudo ln -sf $(which $tool) bin/$tool
            fi
          done
          cd ../..
          echo "✅ Build files preparation completed (构建文件准备完成)"
          
      - name: "Build SGSI Image (构建SGSI镜像)"
        id: build_sgsi
        run: |
          cd SGSI-build-tool/10
          echo "🏗️ Starting SGSI build (开始构建SGSI)..."
          timeout 60m bash -c '
            if ! sudo bash make.sh 2>&1 | tee make.log; then
              echo "::error::❌ Build failed! (构建失败！)"
              tail -100 make.log
              exit 1
            fi
          ' || exit $?
          
          echo "🎉 SGSI image build completed (SGSI镜像构建完成)"
          sudo chown -R $(id -u):$(id -g) out/
          sudo chmod -R 755 out/
          
          if [[ -f "./out/system/system/build.prop" ]]; then
            sudo chmod 644 ./out/system/system/build.prop
            model=$(grep 'ro.product.model' ./out/system/system/build.prop | head -1 | cut -d'=' -f2 | tr -d '[:space:]' || echo "Unknown")
            device_codename=$(grep -E 'ro.product.(device|name|board|hardware)' ./out/system/system/build.prop | head -1 | cut -d'=' -f2 | tr -d '[:space:]' || echo "Unknown")
            security_patch=$(grep 'ro.build.version.security_patch' ./out/system/system/build.prop | head -1 | cut -d'=' -f2 | tr -d '[:space:]' || echo "Unknown")
            android_version=$(grep 'ro.build.version.release' ./out/system/system/build.prop | head -1 | cut -d'=' -f2 | tr -d '[:space:]' || echo "Unknown")
            build_date=$(grep 'ro.build.date' ./out/system/system/build.prop | head -1 | cut -d'=' -f2 | tr -d '[:space:]' || echo "Unknown")
            rom_version=$(grep -E 'ro.(build|system|product).(version|display).(incremental|id|name)' ./out/system/system/build.prop | head -1 | cut -d'=' -f2 | tr -d '[:space:]' || echo "Unknown")
            build_id=$(grep 'ro.build.id' ./out/system/system/build.prop | head -1 | cut -d'=' -f 2 | tr -d '[:space:]' || echo "Unknown")
            
            echo "model=$model" >> $GITHUB_OUTPUT
            echo "device_codename=$device_codename" >> $GITHUB_OUTPUT
            echo "security_patch=$security_patch" >> $GITHUB_OUTPUT
            echo "android_version=$android_version" >> $GITHUB_OUTPUT
            echo "build_date=$build_date" >> $GITHUB_OUTPUT
            echo "rom_version=$rom_version" >> $GITHUB_OUTPUT
            echo "build_id=$build_id" >> $GITHUB_OUTPUT
          else
            echo "model=Unknown" >> $GITHUB_OUTPUT
            echo "device_codename=Unknown" >> $GITHUB_OUTPUT
            echo "security_patch=Unknown" >> $GITHUB_OUTPUT
            echo "android_version=Unknown" >> $GITHUB_OUTPUT
            echo "build_date=Unknown" >> $GITHUB_OUTPUT
            echo "rom_version=Unknown" >> $GITHUB_OUTPUT
            echo "build_id=Unknown" >> $GITHUB_OUTPUT
          fi
           
      - name: "Package Patches (打包补丁文件)"
        run: |
          if [[ ! -d "Patch" ]]; then
            echo "ℹ️ 未找到Patch目录，跳过补丁打包"
            exit 0
          fi

          sudo mkdir -p SGSI-build-tool/10/SGSI/
          for i in {1..3}; do
            patch_dir="Patch/Patch${i}"
            output_file="Patch${i}.zip"
            if [[ -d "$patch_dir" ]]; then
              if ! zip -r "$output_file" "$patch_dir"/*; then
                echo "::warning::⚠️ 补丁打包失败: $patch_dir"
              else
                sudo mv "$output_file" SGSI-build-tool/10/SGSI/
              fi
            fi
          done
          
      - name: "Package Output Files (打包输出文件)"
        run: |
          cd SGSI-build-tool/10
          echo "=== Packaging step (打包步骤) ==="
          patch_count=$(ls SGSI/Patch*.zip 2>/dev/null | wc -l)
          if [[ $patch_count -gt 0 ]]; then
            echo "✅ 检测到 $patch_count 个补丁文件"
          else
            echo "ℹ️ 未检测到补丁文件"
          fi
          
          if [[ ! -d "SGSI" ]]; then
            echo "::error::❌ SGSI directory does not exist! (SGSI目录不存在！)"
            exit 1
          fi
          
          output_file="${{ steps.config.outputs.pack_sgsi }}"
          sudo chown -R $(id -u):$(id -g) SGSI/
          if ! zip -r "$output_file" SGSI/*; then
            echo "::error::❌ Packaging failed! (打包失败！)"
            exit 1
          fi
          
          mkdir -p "${GITHUB_WORKSPACE}/upload"
          file_size=$(stat -c%s "$output_file")
          max_size=2000000000
          
          if [[ -z "$file_size" ]] || [[ "$file_size" -eq 0 ]]; then
            echo "::error::❌ SGSI production failed or is empty (SGSI产出失败或为空)"
            exit 1
          fi
          
          if [[ $file_size -gt $max_size ]]; then
            echo "⚠️ File too large, splitting into parts (文件过大，进行分卷打包)..."
            split -b 1500m -d -a 1 "$output_file" "${output_file}_part"
            mv "${output_file}_part"* "${GITHUB_WORKSPACE}/upload/"
            rm "$output_file"
          else
            mv "$output_file" "${GITHUB_WORKSPACE}/upload/"
          fi
          
          echo "UPLOAD_DIR=${GITHUB_WORKSPACE}/upload" >> $GITHUB_ENV
             
      - name: "Generate Release Tag and Time Info (生成发布标签和时间信息)"
        id: release_tag
        run: |
          current_date=$(TZ='Asia/Shanghai' date +"%Y%m%d")
          timestamp=$(TZ='Asia/Shanghai' date +"%H%M%S")
          release_tag="${current_date}_${timestamp}"
          echo "release_tag=$release_tag" >> $GITHUB_OUTPUT
          
          build_time=$(TZ='Asia/Shanghai' date +"%Y-%m-%d %p %I:%M")
          build_time=$(echo "$build_time" | sed -e 's/AM/上午/' -e 's/PM/下午/')
          build_time="${build_time} [北京时间]"
          echo "build_time=$build_time" >> $GITHUB_OUTPUT
          
          original_build_date="${{ steps.build_sgsi.outputs.build_date }}"
          if [[ "$original_build_date" != "Unknown" ]]; then
            parsed_date=$(echo "$original_build_date" | sed -E 's/([a-zA-Z]{3})([a-zA-Z]{3})([0-9]{2})([0-9]{2}:[0-9]{2}:[0-9]{2})([A-Z]{3})([0-9]{4})/\1 \2 \3 \4 \5 \6/' 2>/dev/null)
            formatted_date=$(date -d "$parsed_date" "+%Y-%m-%d %H:%M:%S %Z" 2>/dev/null || echo "$original_build_date")
            echo "formatted_build_date=$formatted_date" >> $极ITHUB_OUTPUT
          else
            echo "formatted_build_date=Unknown" >> $GITHUB_OUTPUT
          fi
          
          model="${{ steps.build_sgsi.outputs.model }}"
          device_codename="${{ steps.build_sgsi.outputs.device_codename }}"
          if [[ "$model" == "Unknown" && "$device_codename" == "Unknown" ]]; then
            source_device="Unknown"
          elif [[ "$model" == "Unknown" ]]; then
            source_device="$device_codename"
          elif [[ "$device_codename" == "Unknown" ]]; then
            source_device="$model"
          else
            source_device="$model [$device_codename]"
          fi
          echo "source_device=$source_device" >> $GITHUB_OUTPUT
          
          rom_type="Generic"
          if [ "${{ steps.config.outputs.make_miui }}" = "true" ]; then rom_type="MIUI"; fi
          if [ "${{ steps.config.outputs.make_flyme }}" = "true" ]; then rom_type="Flyme"; fi
          if [ "${{ steps.config.outputs.make_coloros }}" = "true" ]; then rom_type="ColorOS"; fi
          if [ "${{ steps.config.outputs.make_h2os }}" = "true" ]; then rom_type="H2OS"; fi
          if [ "${{ steps.config.outputs.make_smartisanos }}" = "true" ]; then rom_type="SmartisanOS"; fi
          if [ "${{ steps.config.outputs.make_zui }}" = "true" ]; then rom_type="ZUI"; fi
          echo "rom_type=$rom_type" >> $GITHUB_OUTPUT
          
      - name: Upload SGSI to WeTransfer (上传SGSI到WeTransfer)
        id: upload_wetransfer
        if: ${{ steps.config.outputs.upload_transfer == 'true' }}
        run: |
          cd ${{ env.UPLOAD_DIR }}
          echo "🔗 Starting WeTransfer upload (开始WeTransfer上传)..."
          curl -sL https://git.io/file-transfer | sh
          
          upload_output=$(./transfer wet ./* || true)
          share_link=$(echo "$upload_output" | grep "Share link: " | cut -d' ' -f3)
          
          if [[ -n "$share_link" ]]; then
            echo "✅ WeTransfer upload completed (WeTransfer上传完成)"
            echo "share_link=$share_link" >> $GITHUB_OUTPUT
            echo "WETRANSFER_SHARE_LINK=$share_link" >> $GITHUB_ENV
          else
            echo "::warning::⚠️ WeTransfer upload failed or link not captured (WeTransfer上传失败或未捕获到链接)"
            echo "share_link=error" >> $GITHUB_OUTPUT
          fi
          
      - name: Upload SGSI to Artifact (上传SGSI为Artifact)
        id: upload_artifact
        if: ${{ steps.config.outputs.upload_artifact == 'true' }}
        uses: actions/upload-artifact@v4
        with: 
          name: XiaoxinSGSIs_1.9
          path: ${{ env.UPLOAD_DIR }}
          
      - name: Generate Download Links (生成下载链接信息)
        id: generate_links
        run: |
          download_links="### 下载链接 (Download Links)\n\n"
          
          if [ "${{ steps.config.outputs.upload_transfer }}" = "true" ]; then
            if [[ -n "${{ steps.upload_wetransfer.outputs.share_link }}" && "${{ steps.upload_wetransfer.outputs.share_link }}" != "error" ]]; then
              download_links+="- **WeTransfer下载链接 (7天内有效):** [${{ steps.upload_wetransfer.outputs.share_link }}](${{ steps.upload_wetransfer.outputs.share_link }})\n"
            else
              download_links+="- **WeTransfer上传错误:** 未能生成有效的下载链接\n"
            fi
          else
            download_links+="- **WeTransfer上传:** 未启用\n"
          fi
          
          if [ "${{ steps.config.outputs.upload_artifact }}" = "true" ]; then
            artifacts_url="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts"
            download_links+="- **GitHub Artifacts下载链接:** [${{ github.run_number }}]($artifacts_url)\n"
          else
            download_links+="- **Artifacts上传:** 未启用\n"
          fi
          
          echo "DOWNLOAD_LINKS=$download_links" >> $GITHUB_ENV
          
      - name: "Create Release (创建发布)"
        uses: softprops/action-gh-release@v1
        with:
          name: "Auto Build SGSI - XiaoxinTools 1.9-AB [${{ steps.release_tag.outputs.release_tag }}]"
          tag_name: "${{ steps.release_tag.outputs.release_tag }}"
          files: "${{ env.UPLOAD_DIR }}/*"
          body: |
            ##  📱 SGSI Build Information (构建信息)
            
            ### 基础信息 (Basic Info)
            - **构建时间 (Built at):** ${{ steps.release_tag.outputs.build_time }}
            - **原包机型 (Source Device):** ${{ steps.release_tag.outputs.source_device }}
            - **ROM 类型 (ROM Type):** ${{ steps.release_tag.outputs.rom_type }}
            - **Android 版本 (Android Version):** ${{ steps.build_sgsi.outputs.android_version }}
            - **ROM 版本 (ROM Version):** ${{ steps.build_sgsi.outputs.rom_version }}
            - **构建 ID (Build ID):** ${{ steps.build_sgsi.outputs.build_id }}
            - **安全补丁 (Security Patch):** ${{ steps.build_sgsi.outputs.security_patch }}
            - **原构建日期 (Source Build Date):** ${{ steps.release_tag.outputs.formatted_build_date }}
            
            ${{ env.DOWNLOAD_LINKS }}
            
            ### 其他信息 (Other Info)
            - **构建工具 (Build Tools):** XiaoxinTools_1.9 (Only for Android 10/AB)
            - **构建日志 (Build Log):** [View Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) (点击查看详细日志)
            
            ---
            
             ⚠️ **实验性构建 (Experimental Build):**  
            This is an experimental build and may have stability issues. Please test before using as a daily driver.  
            这是实验性构建，可能存在稳定性问题，请测试后再作为主力系统使用。
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: "Completion Notification (完成通知)"
        if: success()
        run: |
          echo "🎉 Build completed! (构建完成!)"
          echo "Release tag: ${{ steps.release_tag.outputs.release_tag }} (发布标签)"
          echo "Artifact location: ${{ env.UPLOAD_DIR }} (产物位置)"
          
          if [ "${{ steps.config.outputs.upload_transfer }}" = "true" ]; then
            if [[ -n "${{ steps.upload_wetransfer.outputs.share_link }}" && "${{ steps.upload_wetransfer.outputs.share_link }}" != "error" ]]; then
              echo "✅ WeTransfer 下载链接: ${{ steps.upload_wetransfer.outputs.share_link }}"
            else
              echo "❌ WeTransfer 上传失败: 未生成有效链接"
            fi
          else
            echo "ℹ️ WeTransfer 上传: 未启用"
          fi
          
          if [ "${{ steps.config.outputs.upload_artifact }}" = "true" ]; then
            echo "✅ Artifacts 下载链接: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts"
          else
            echo "ℹ️ Artifacts 上传: 未启用"
          fi
