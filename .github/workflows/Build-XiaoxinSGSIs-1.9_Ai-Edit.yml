name: Build_XiaoxinSGSIs_Ai-Edit [1.9]
on:
  workflow_dispatch:  # Manual trigger only (仅手动触发)

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 120
    
    steps:
      - name: "Checkout Code (检出代码)"
        uses: actions/checkout@v4
        
      - name: "Environment Setup (环境设置)"
        run: |
          # Check configuration files (检查配置文件)
          if [[ ! -f "sgsi.json" ]]; then
            echo "::error::❌ Missing sgsi.json config file (缺少sgsi.json配置文件)"
            exit 1
          fi
          
          # Install essential tools (安装基础工具)
          sudo apt-get update
          sudo apt-get install -y \
            aria2 curl jq brotli \
            android-sdk-libsparse-utils \
            zip unzip file \
            python3 python3-pip
          echo "✅ Environment setup completed (环境设置完成)"

      - name: "Parse Configuration (解析配置)"
        id: config
        run: |
          # Robust JSON parsing (健壮的JSON解析)
          rom_url=$(jq -r '.rom_url // empty' sgsi.json)
          if [[ -z "$rom_url" ]]; then
            echo "::error::❌ Missing rom_url field in sgsi.json (sgsi.json中缺少rom_url字段)"
            exit 1
          fi
          
          {
            echo "rom_url=$rom_url"
            echo "rom_name=$(jq -r '.rom_name // "unknown_rom"' sgsi.json)"
            echo "pack_sgsi=$(jq -r '.pack_sgsi // "SGSI.zip"' sgsi.json)"
            echo "make_miui=$(jq -r '.make_miui // "false"' sgsi.json)"
            echo "make_flyme=$(jq -r '.make_flyme // "false"' sgsi.json)"
            echo "make_coloros=$(jq -r '.make_coloros // "false"' sgsi.json)"
            echo "make_h2os=$(jq -r '.make_h2os // "false"' sgsi.json)"
            echo "make_smartisanos=$(jq -r '.make_smartisanos // "false"' sgsi.json)"
            echo "make_zui=$(jq -r '.make_zui // "false"' sgsi.json)"
            echo "make_super=$(jq -r '.make_super // "false"' sgsi.json)"
            echo "upload_wetransfer=$(jq -r '.upload_wetransfer // "false"' sgsi.json)"
          } >> $GITHUB_OUTPUT

      - name: "Download Resources (下载资源)"
        run: |
          # Download build tools (下载构建工具)
          tool_url="https://github.com/xiaoxindada/SGSI-build-tool/releases/download/v1.9/SGSI-build-tool.tar"
          echo "🔧 Downloading build tools (开始下载构建工具)..."
          
          max_retries=5
          for i in $(seq 1 $max_retries); do
            if curl -fL -o "SGSI-build-tool.tar" "$tool_url"; then
              echo "✅ Build tools download successful (构建工具下载成功)"
              break
            else
              echo "❌ Download failed (attempt $i/$max_retries) (下载失败)"
              [[ $i -eq $max_retries ]] && exit 1
              sleep 10
            fi
          done
          
          # Download ROM file (下载ROM文件)
          rom_path="SGSI-build-tool/10/tmp/${{ steps.config.outputs.rom_name }}"
          sudo mkdir -p "$(dirname "$rom_path")"
          echo "🚀 Downloading ROM: ${{ steps.config.outputs.rom_name }}"
          
          for i in $(seq 1 $max_retries); do
            if sudo aria2c -x 8 -s 8 -k 1M --continue=true \
               "${{ steps.config.outputs.rom_url }}" \
               -d "$(dirname "$rom_path")" \
               -o "$(basename "$rom_path")"; then
              echo "✅ ROM download successful (ROM下载成功)"
              break
            elif sudo curl -fL -C - -o "$rom_path" "${{ steps.config.outputs.rom_url }}"; then
              echo "✅ ROM download successful (curl) (ROM下载成功)"
              break
            else
              echo "❌ ROM download failed (attempt $i/$max_retries) (ROM下载失败)"
              [[ $i -eq $max_retries ]] && exit 1
              sleep 30
            fi
          done

      - name: "Build Environment Setup (构建环境设置)"
        run: |
          # Extract and setup build tools (解压并设置构建工具)
          echo "📂 Setting up build environment (设置构建环境)..."
          sudo tar -xf SGSI-build-tool.tar || exit 1
          sudo find SGSI-build-tool -name "*.sh" -exec chmod +x {} \;
          
          # Fix toolchain and permissions (修复工具链和权限)
          cd SGSI-build-tool/10
          sudo mkdir -p bin
          for tool in brotli simg2img img2simg mke2fs e2fsck resize2fs file; do
            if tool_path=$(which "$tool" 2>/dev/null) || [[ -x "/usr/bin/$tool" ]]; then
              sudo ln -sf "${tool_path:-/usr/bin/$tool}" "bin/$tool"
              echo "✅ Linked $tool (已链接$tool)"
            else
              echo "::warning::⚠️ Tool not found: $tool (未找到工具: $tool)"
            fi
          done
          
          sudo chown -R $(id -u):$(id -g) ../..
          sudo chmod -R 755 ../..
          echo "✅ Build environment ready (构建环境准备完成)"

      - name: "ROM Configuration (ROM配置)"
        run: |
          echo "🔧 Configuring ROM settings (配置ROM设置)..."
          
          # Determine ROM type (确定ROM类型)
          rom_type="Generic"
          [[ "${{ steps.config.outputs.make_miui }}" = "true" ]] && rom_type="MIUI"
          [[ "${{ steps.config.outputs.make_flyme }}" = "true" ]] && rom_type="Flyme"
          [[ "${{ steps.config.outputs.make_coloros }}" = "true" ]] && rom_type="ColorOS"
          [[ "${{ steps.config.outputs.make_h2os }}" = "true" ]] && rom_type="H2OS"
          [[ "${{ steps.config.outputs.make_smartisanos }}" = "true" ]] && rom_type="SmartisanOS"
          [[ "${{ steps.config.outputs.make_zui }}" = "true" ]] && rom_type="ZUI"
          
          echo "ℹ️ ROM type: $rom_type (ROM类型: $rom_type)"
          
          # Super SGSI configuration (Super SGSI配置)
          if [[ "${{ steps.config.outputs.make_super }}" = "true" && -f "SGSI-build-tool/10/make.sh" ]]; then
            sudo sed -i 's/SGSI.sh/dynamic_SGSI.sh/g' SGSI-build-tool/10/make.sh
            echo "✅ Super SGSI configured (Super SGSI配置完成)"
          fi
          
          # ColorOS decryption (ColorOS解密)
          if [[ "$rom_type" = "ColorOS" && -f "SGSI-build-tool/10/oppo_ozip/ozipdecrypt.py" ]]; then
            sudo python3 SGSI-build-tool/10/oppo_ozip/ozipdecrypt.py \
              "SGSI-build-tool/10/tmp/${{ steps.config.outputs.rom_name }}"
            sudo rm -f "SGSI-build-tool/10/tmp/${{ steps.config.outputs.rom_name }}"
            echo "✅ ColorOS ROM decrypted (ColorOS ROM解密完成)"
          fi
          
          # Apply ROM-specific fixes (应用ROM特定修复)
          if [[ -f "fix/${rom_type}.sh" ]]; then
            sudo cp "fix/${rom_type}.sh" SGSI-build-tool/10/fixbug/fixbug.sh
            sudo chmod +x SGSI-build-tool/10/fixbug/fixbug.sh
            echo "✅ $rom_type configuration applied (已应用$rom_type配置)"
          fi
          
          # Fix script syntax errors (修复脚本语法错误)
          cd SGSI-build-tool/10
          echo "Checking and fixing SGSI.sh script errors (检查并修复SGSI.sh脚本错误)..."
          if [[ -f "SGSI.sh" ]]; then
            # 修复第9行和第12行的变量引用问题
            # 将 [ $dynamic = 'y' ] 修复为 [ "$dynamic" = 'y' ]
            sudo sed -i '9s/\[ \$dynamic = /[ "$dynamic" = /' SGSI.sh
            sudo sed -i '12s/\[ \$dynamic = /[ "$dynamic" = /' SGSI.sh
            
            # 修复其他可能的变量引用问题
            sudo sed -i 's/\[ \$light = /[ "$light" = /g' SGSI.sh
            sudo sed -i 's/\[ \$mane = /[ "$mane" = /g' SGSI.sh
            
            echo "✅ Script syntax errors fixed (已修复脚本语法错误)"
            
            # 显示修复后的相关行
            echo "=== Fixed lines 9 and 12 (修复后的第9行和第12行) ==="
            sed -n '9p;12p' SGSI.sh
            echo "=================================================="
          else
            echo "::warning::⚠️ SGSI.sh script not found (未找到SGSI.sh脚本)"
          fi
          
          # Prepare build files (准备构建文件)
          if [[ -d "../make" ]]; then
            sudo cp -v ../make/*.sh ./
          fi
          if [[ -d "../bin" ]]; then
            sudo mkdir -p bin
            sudo cp -v ../bin/* bin/
          fi
          
          cd ../..

      - name: "Build Process (构建过程)"
        id: build_sgsi
        run: |
          cd SGSI-build-tool/10
          
          echo "🏗️ Starting SGSI build (开始构建SGSI)..."
          {
            echo "=== Build Started (构建开始) ==="
            echo "Start Time (开始时间): $(date)"
            echo "=============================="
          } > build_monitor.log
          
          # Build with monitoring (带监控的构建)
          timeout 75m bash -c '
            # Disk space monitoring (磁盘空间监控)
            while true; do
              echo "Disk usage (磁盘使用): $(df -h / | tail -1)" >> build_monitor.log
              sleep 300
            done &
            disk_monitor_pid=$!
            
            if ! sudo bash make.sh 2>&1 | tee -a make.log build_monitor.log; then
              echo "::error::❌ Build failed! (构建失败！)"
              kill $disk_monitor_pid 2>/dev/null || true
              echo "=== Last 100 lines of build log (构建日志最后100行) ==="
              tail -100 make.log
              exit 1
            fi
            
            kill $disk_monitor_pid 2>/dev/null || true
          ' || exit $?
          
          echo "🎉 SGSI build completed (SGSI构建完成)"
          
          # Fix permissions and extract info (修复权限并提取信息)
          sudo chown -R $(id -u):$(id -g) out/
          sudo chmod -R 755 out/
          
          if [[ -f "./out/system/system/build.prop" ]]; then
            sudo chmod 644 ./out/system/system/build.prop
            {
              echo "model=$(grep 'ro.product.model' ./out/system/system/build.prop | head -1 | cut -d'=' -f2 | tr -d '[:space:]' || echo "Unknown")"
              echo "device_codename=$(grep -E 'ro.product.(device|name|board|hardware)' ./out/system/system/build.prop | head -1 | cut -d'=' -f2 | tr -d '[:space:]' || echo "Unknown")"
              echo "security_patch=$(grep 'ro.build.version.security_patch' ./out/system/system/build.prop | head -1 | cut -d'=' -f2 | tr -d '[:space:]' || echo "Unknown")"
              echo "android_version=$(grep 'ro.build.version.release' ./out/system/system/build.prop | head -1 | cut -d'=' -f2 | tr -d '[:space:]' || echo "Unknown")"
              echo "build_date=$(grep 'ro.build.date' ./out/system/system/build.prop | head -1 | cut -d'=' -f2 | tr -d '[:space:]' || echo "Unknown")"
              echo "rom_version=$(grep -E 'ro.(build|system|product).(version|display).(incremental|id|name)' ./out/system/system/build.prop | head -1 | cut -d'=' -f2 | tr -d '[:space:]' || echo "Unknown")"
              echo "build_id=$(grep 'ro.build.id' ./out/system/system/build.prop | head -1 | cut -d'=' -f2 | tr -d '[:space:]' || echo "Unknown")"
            } >> $GITHUB_OUTPUT
          else
            echo "⚠️ build.prop not found (未找到build.prop文件)"
            echo "model=Unknown" >> $GITHUB_OUTPUT
            echo "device_codename=Unknown" >> $GITHUB_OUTPUT
            echo "security_patch=Unknown" >> $GITHUB_OUTPUT
            echo "android_version=Unknown" >> $GITHUB_OUTPUT
            echo "build_date=Unknown" >> $GITHUB_OUTPUT
            echo "rom_version=Unknown" >> $GITHUB_OUTPUT
            echo "build_id=Unknown" >> $GITHUB_OUTPUT
          fi

      - name: "Package Output (打包输出)"
        run: |
          echo "📦 Packaging output files (打包输出文件)..."
          
          # Package patches (打包补丁)
          if [[ -d "Patch" ]]; then
            sudo mkdir -p SGSI-build-tool/10/SGSI/
            for i in {1..3}; do
              patch_dir="Patch/Patch${i}"
              if [[ -d "$patch_dir" ]]; then
                zip -r "Patch${i}.zip" "$patch_dir"/* && \
                sudo mv "Patch${i}.zip" SGSI-build-tool/10/SGSI/ && \
                echo "✅ Patched packaged: Patch${i} (补丁打包完成)"
              fi
            done
          fi
          
          # Package SGSI files (打包SGSI文件)
          cd SGSI-build-tool/10
          if [[ ! -d "SGSI" ]]; then
            echo "::error::❌ SGSI directory missing (SGSI目录不存在)"
            exit 1
          fi
          
          output_file="${{ steps.config.outputs.pack_sgsi }}"
          sudo chown -R $(id -u):$(id -g) SGSI/
          
          if zip -r "$output_file" SGSI/*; then
            echo "✅ SGSI packaged successfully (SGSI打包成功)"
          else
            echo "::error::❌ Packaging failed (打包失败)"
            exit 1
          fi
          
          # Prepare upload directory (准备上传目录)
          mkdir -p "${GITHUB_WORKSPACE}/upload"
          file_size=$(stat -c%s "$output_file")
          max_size=2000000000  # 2GB
          
          if [[ $file_size -gt $max_size ]]; then
            echo "⚠️ File too large, splitting (文件过大，进行分卷)"
            split -b 1500m -d -a 1 "$output_file" "${output_file}_part"
            mv "${output_file}_part"* "${GITHUB_WORKSPACE}/upload/"
            rm "$output_file"
          else
            mv "$output_file" "${GITHUB_WORKSPACE}/upload/"
          fi
          
          echo "UPLOAD_DIR=${GITHUB_WORKSPACE}/upload" >> $GITHUB_ENV
          echo "📁 Upload directory ready (上传目录准备完成)"

      - name: "Upload Services (上传服务)"
        run: |
          echo "🌐 Uploading to services (上传到各服务)..."
          
          # WeTransfer upload (WeTransfer上传)
          if [[ "${{ steps.config.outputs.upload_wetransfer }}" = "true" && -n "$(ls -A ${{ env.UPLOAD_DIR }})" ]]; then
            response=$(curl -s -F "file=@${{ env.UPLOAD_DIR }}/*" "https://transfer.sh/?expire=7d")
            if [[ $? -eq 0 && -n "$response" && "$response" != *"error"* ]]; then
              echo "link=$response" >> $GITHUB_OUTPUT
              echo "✅ WeTransfer upload successful (WeTransfer上传成功): $response"
            else
              echo "::warning::⚠️ WeTransfer upload failed (WeTransfer上传失败)"
            fi
          fi

      - name: "Upload Artifacts (上传制品)"
        uses: actions/upload-artifact@v4
        with:
          name: sgsi-build-artifacts
          path: ${{ env.UPLOAD_DIR }}/*
          retention-days: 30
        continue-on-error: true

      - name: "Generate Release Info (生成发布信息)"
        id: release_tag
        run: |
          # Generate unique tag (生成唯一标签)
          current_date=$(TZ='Asia/Shanghai' date +"%Y%m%d")
          timestamp=$(TZ='Asia/Shanghai' date +"%H%M%S")
          release_tag="${current_date}_${timestamp}"
          
          # Format build time (格式化构建时间)
          build_time=$(TZ='Asia/Shanghai' date +"%Y-%m-%d %p %I:%M")
          build_time=$(echo "$build_time" | sed -e 's/AM/上午/' -e 's/PM/下午/')
          build_time="${build_time} [北京时间]"
          
          # Format source build date (格式化源构建日期)
          original_build_date="${{ steps.build_sgsi.outputs.build_date }}"
          if [[ "$original_build_date" != "Unknown" ]]; then
            parsed_date=$(echo "$original_build_date" | sed -E 's/([a-zA-Z]{3})([a-zA-Z]{3})([0-9]{2})([0-9]{2}:[0-9]{2}:[0-9]{2})([A-Z]{3})([0-9]{4})/\1 \2 \3 \4 \5 \6/')
            formatted_date=$(date -d "$parsed_date" "+%Y-%m-%d %H:%M:%S %Z" 2>/dev/null || echo "$original_build_date")
          else
            formatted_date="Unknown"
          fi
          
          # Determine source device (确定源设备)
          model="${{ steps.build_sgsi.outputs.model }}"
          device_codename="${{ steps.build_sgsi.outputs.device_codename }}"
          if [[ "$model" == "Unknown" && "$device_codename" == "Unknown" ]]; then
            source_device="Unknown"
          elif [[ "$model" == "Unknown" ]]; then
            source_device="$device_codename"
          elif [[ "$device_codename" == "Unknown" ]]; then
            source_device="$model"
          else
            source_device="$model [$device_codename]"
          fi
          
          # Determine ROM type (确定ROM类型)
          rom_type="Generic"
          [[ "${{ steps.config.outputs.make_miui }}" = "true" ]] && rom_type="MIUI"
          [[ "${{ steps.config.outputs.make_flyme }}" = "true" ]] && rom_type="Flyme"
          [[ "${{ steps.config.outputs.make_coloros }}" = "true" ]] && rom_type="ColorOS"
          [[ "${{ steps.config.outputs.make_h2os }}" = "true" ]] && rom_type="H2OS"
          [[ "${{ steps.config.outputs.make_smartisanos }}" = "true" ]] && rom_type="SmartisanOS"
          [[ "${{ steps.config.outputs.make_zui }}" = "true" ]] && rom_type="ZUI"
          
          {
            echo "release_tag=$release_tag"
            echo "build_time=$build_time"
            echo "formatted_build_date=$formatted_date"
            echo "source_device=$source_device"
            echo "rom_type=$rom_type"
          } >> $GITHUB_OUTPUT

      - name: "Create Release (创建发布)"
        uses: softprops/action-gh-release@v1
        with:
          name: "Auto Build SGSI - XiaoxinTools 1.9-AB [${{ steps.release_tag.outputs.release_tag }}]"
          tag_name: "${{ steps.release_tag.outputs.release_tag }}"
          files: "${{ env.UPLOAD_DIR }}/*"
          body: |
            ## 📱 SGSI Build Information (构建信息)
            
            ### Basic Info (基础信息)
            - **Built at (构建时间):** ${{ steps.release_tag.outputs.build_time }}
            - **Source Device (原包机型):** ${{ steps.release_tag.outputs.source_device }}
            - **ROM Type (ROM类型):** ${{ steps.release_tag.outputs.rom_type }}
            - **Android Version (Android版本):** ${{ steps.build_sgsi.outputs.android_version }}
            - **ROM Version (ROM版本):** ${{ steps.build_sgsi.outputs.rom_version }}
            - **Build ID (构建ID):** ${{ steps.build_sgsi.outputs.build_id }}
            - **Security Patch (安全补丁):** ${{ steps.build_sgsi.outputs.security_patch }}
            - **Source Build Date (原构建日期):** ${{ steps.release_tag.outputs.formatted_build_date }}
            
            ### Download Links (下载链接)
            - **WeTransfer (7 days) (7天有效):** ${{ steps.upload_wetransfer.outputs.link }}
            - **GitHub Artifacts (30 days) (30天保留):** [Download (点击下载)](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)
            
            ### Other Info (其他信息)
            - **Build Tools (构建工具):** XiaoxinTools_1.9 (Only for Android 10/AB)
            - **Build Log (构建日志):** [View Details (点击查看)](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ---
            
            ⚠️ **Experimental Build (实验性构建):**  
            This is an experimental build and may have stability issues. Please test before using as a daily driver.  
            这是实验性构建，可能存在稳定性问题，请测试后再作为主力系统使用。
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Cleanup and Notify (清理和通知)"
        if: always()
        run: |
          # Cleanup intermediate files (清理中间文件)
          sudo rm -rf SGSI-build-tool/10/tmp/* || true
          sudo rm -rf SGSI-build-tool/10/out/system/ || true
          
          # Save logs (保存日志)
          if [[ -f "SGSI-build-tool/10/make.log" ]]; then
            mkdir -p "${GITHUB_WORKSPACE}/logs"
            cp SGSI-build-tool/10/make.log "${GITHUB_WORKSPACE}/logs/" || true
          fi
          
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "🎉 Build completed successfully! (构建成功完成！)"
            echo "📁 Artifacts: ${{ env.UPLOAD_DIR }}"
          else
            echo "❌ Build failed or cancelled (构建失败或被取消)"
            echo "=== Error Summary (错误总结) ==="
            if [[ -f "SGSI-build-tool/10/make.log" ]]; then
              grep -i -A5 -B5 "error\|failed" SGSI-build-tool/10/make.log | tail -50 || true
            fi
          fi
          
          echo "💾 Final disk space (最终磁盘空间):"
          df -h
